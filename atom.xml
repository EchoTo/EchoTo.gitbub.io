<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShanTianQi&#39;s Blog</title>
  
  
  <link href="https://www.stq555.com/atom.xml" rel="self"/>
  
  <link href="https://www.stq555.com/"/>
  <updated>2022-01-14T10:11:03.893Z</updated>
  <id>https://www.stq555.com/</id>
  
  <author>
    <name>ShanTianQi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端基础</title>
    <link href="https://www.stq555.com/2022/01/14/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>https://www.stq555.com/2022/01/14/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80(%E4%B8%80)/</id>
    <published>2022-01-14T09:25:32.000Z</published>
    <updated>2022-01-14T10:11:03.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Html-5"><a href="#第一章-Html-5" class="headerlink" title="第一章   Html 5"></a>第一章   Html 5</h1><hr><h2 id="1-1网页"><a href="#1-1网页" class="headerlink" title="1.1网页"></a>1.1网页</h2><p><strong>网站</strong>是指在因特网上根据一定的规则，使用HTML等制作的用于展示特定内容相关的网页集合。</p><p><strong>网页</strong>是网站中的一”页”，通常是<strong>HTML格式的文件</strong>，它要通过浏览器来阅读。</p><p><strong>网页是构成网站的基本元素</strong>，它通常由图片、链接、文字、声音、视频等<strong>元素</strong>组成。通常我们看到的网页，常见以.htm或.html后缀结尾的文件，因此将其俗称为HTML文件。</p><p><strong>HTML</strong></p><p><strong>HTML</strong>指的是**超文本标记语言(Hyper Text Markup Language)**，它是用来描述网页的一种语言。</p><p>HTML不是一种编程语言，而是一种标记语言(markup language)，标记语言是一套标记标签(markup tag)</p><p>所谓超文本，有两层含义：</p><p>1.它可以加入图片、声音、动画、多媒体等内容(超越了文本限制)。</p><p>2.它还可以从一个文件跳转到另一个文件，与世界各地主机的文件链接(超级文本链接)</p><p><strong>网页的形成</strong></p><p>网页是由网页元素组成，这些元素是利用html标签描述出来，然后通过浏览器解析来显示给用户的。</p><hr><h2 id="1-2常用浏览器"><a href="#1-2常用浏览器" class="headerlink" title="1.2常用浏览器"></a>1.2常用浏览器</h2><p>1.常用浏览器</p><p>浏览器是网页显示、运行的平台。常用的有IE，Firefox，Chrome，Safari和Opera等。</p><p>2.浏览器内核</p><p>浏览器内核(渲染引擎)：负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210721212227.png" alt="QQ截图20210721212227" style="zoom: 67%;" /><p>目前国内一般浏览器都会采用Webkit/Blink内核，如360，UC，QQ，搜狗等。</p><hr><h2 id="1-3Web标准"><a href="#1-3Web标准" class="headerlink" title="1.3Web标准"></a>1.3Web标准</h2><p><strong>Web标准</strong>是由W3C组织和其他标准化组织制定的<strong>一系列标准的集合</strong>。W3C(万维网联盟)是国际最著名的标准化组织。</p><p><strong>构成</strong></p><p>主要包括**结构(Structure)<strong>、</strong>表现(Presentation)<strong>、</strong>行为(Behavior)**三个方面。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210722102139.png" alt="QQ截图20210722102139" style="zoom:80%;" /><p>Web标准提出的最佳体验方案：结构、样式、行为<strong>相分离</strong>。</p><blockquote><p>tips：结构写到HTML文件中，表现写到CSS文件中，行为写到JavaScript文件中</p></blockquote><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210722102850.png" alt="QQ截图20210722102850" style="zoom:80%;" /><p>结构类似身体，表现类似外观装饰，行为类似行为动作。相比而言结构最重要。</p><hr><h2 id="1-4HTML语法规范"><a href="#1-4HTML语法规范" class="headerlink" title="1.4HTML语法规范"></a>1.4HTML语法规范</h2><p>1.HTML标签是<strong>由尖括号包围的关键字</strong>，例如<html></p><p>2.HTML标签<strong>通常是成对出现的</strong>，例如<html>和</html>，我们称为<strong>双标签</strong>。标签对中的第一个标签是开始标签，第二个标签是结束标签。</p><p>3.有些特殊的标签必须是单个标签(极少情况)，我们称为<strong>单标签</strong>，例如<br/></p><p><strong>标签关系</strong></p><p>标签关系可以分为两类：<strong>包含关系</strong>和<strong>并列关系</strong>     </p><p>包含关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-5HTML基本结构标签"><a href="#1-5HTML基本结构标签" class="headerlink" title="1.5HTML基本结构标签"></a>1.5HTML基本结构标签</h2><p><strong>1.第一个HTML网页</strong></p><p>每个网页都会有一个基本的结构标签(也成为骨架标签)，页面内容也是在这些基本标签上书写。</p><p>HTML页面也称为HTML文档</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        痛出来的鲜美，才足够颠倒众生</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一.<html></html>  HTML标签</p><p>页面中的最大的标签，我们称为根标签</p><p>二.<head></head>  文档的头部</p><p>注意head标签中我们必须要设置的标签是title</p><p>三.<titile></tltile>  文档的标题</p><p>让页面拥有一个属于自己的网页标题</p><p>四.<body></body>  文档的主体</p><p>元素包含文档的所有内容，页面内容 基本都是放到body里面的</p><p><strong>附：网页开发工具标签</strong></p><p><strong>1.文档类型声明标签</strong>        &lt;!DOCTYPE&gt; </p><p>文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这句代码的意思是：当前页面采取的是HTML5版本来显示网页</p><blockquote><p>tips：1.&lt;!DOCTYPE&gt;声明命位于文档中的最前面的位置，处于<html>标签之前。</p><p>​          2.&lt;!DOCTYPE&gt;不是一个HTML标签，它就是文档类型声明标签。</p></blockquote><p><strong>2.lang语言种类</strong></p><p>用来定义当前文档显示的语言。</p><p>1.en定义语言为英文</p><p>2.zh-CN定义语言为中文</p><p>简单来说，定义为en就是英文网页，定义为zh-CN就是中文网页。其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN也可以显示英文。</p><p>这个属性对浏览器和搜索引擎(百度、谷歌等)还是有作用的</p><p><strong>3.字符集</strong></p><p>字符集(Character set)是多个字符的集合，以便计算机能够识别和存储各种文字.</p><p>在<head>标签内，可以通过<meta>标签的charset属性来规定HTML文档应该使用哪种字符编码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>charset常用的值有：GB2312、BIG5、GBK、UTF-8，其中<strong>UTF-8</strong>也被称为万国码，基本包含了全世界所有国家需要用到的字符。</p><hr><h2 id="1-6HTML常用标签"><a href="#1-6HTML常用标签" class="headerlink" title="1.6HTML常用标签"></a>1.6HTML常用标签</h2><p><strong>1.标题标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>-<span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的网页标题，即<h1>-<h6>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单词head的缩写，意为头部、标题。</p><p><strong>标签语义</strong>：作为标题使用，并且依据重要性递减。</p><p>特点：1.加了标题的文字会变的加粗，字号也会依次变大。</p><p>​           2.一个标题独占一行。</p><p><strong>2.段落标签和换行标签</strong></p><p>在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示，在HTML标签中，<p>标签用于定义段落，它可以将整个网页分为若干个段落。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签语义</strong>：可以把HTML文档分割为若干段落。</p><p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签<br/></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签语义</strong>：强制换行。</p><p>特点：1.是单标签。</p><p>​           2.此标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</p><p><strong>3.文本格式化标签</strong></p><p>在网页中，有时需要为文字设置<strong>粗体</strong>、<em>斜体</em>、<u>下划线</u>等效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p><strong>标签语义</strong>：突出重要性，比普通文字更重要。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210722172103.png" alt="QQ截图20210722172103" style="zoom:80%;" /><p><strong>4.<div>和<span>标签</strong></p><p>&lt; div&gt;和&lt; span&gt;是没有语义的，它们就是一个盒子，用来装内容的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>div是division的缩写，表示分割、分区。span表示跨度、跨距。</p><p>特点：1.<div>标签用来布局，但是现在一行只能放一个<div>。大盒子</p><p>​           2.<span>标签用来布局，一行上可以放多个<span>。小盒子</p><p><strong>5.图像标签和路径</strong></p><p><strong>图像标签</strong></p><p>在HTML标签中，<img>标签用于定义HTML页面中的图像。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>src是<img>标签的<strong>必须属性</strong>，它用于<strong>指定图像文件的路径和文件名</strong>。</p><p>所谓属性：简单理解就是属于这个图像标签的特性。</p><p>图像标签的其他属性：</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210722183016.png" alt="QQ截图20210722183016" style="zoom:80%;" /><p> 注意点：</p><p>1.图像标签可以拥有多个属性，必须写在标签名的后面。</p><p>2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</p><p>3.属性采用键值对的格式，即Key=”value”的格式，属性=”属性值”。</p><hr><p><strong>路径</strong></p><p><strong>目录文件夹</strong>：就是普通文件夹，里面只不过存放了我们做页面所需要的相关素材，比如html文件、图片等。</p><p><strong>根目录</strong>：打开目录文件夹的第一层就是根目录。</p><p>路径可以分为：<strong>相对路径</strong>和<strong>绝对路径</strong></p><p>1.相对路径：以<strong>引用文件所在位置</strong>为参考基础，而建立出的目录路径，简单来说，图片相对于HTML页面的位置。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210722185151.png" alt="QQ截图20210722185151" style="zoom: 80%;" /><p><strong>绝对路径</strong>：是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。</p><p><strong>6.超链接标签</strong></p><p>在HTML标签中，<a>标签用于定义超链接，作用是从一个页面链接到另一个页面。</p><p>链接的语法格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span><span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span> 文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210722192737.png" alt="QQ截图20210722192737" style="zoom:80%;" /><p>链接分类：</p><p>1.外部链接，例如<a href ="http://www.baidu.com">百度&lt; /a&gt;。</p><p>2.内部链接：网站内部页面之间的相互链接，直接链接内部页面名称即可，例如<a href="index.html">首页&lt; /a&gt;。</p><p>3.空链接：如果当时没有确定链接目标时，<a href="#">首页&lt; /a&gt;。</p><p>4.下载链接：如果href里面地址是一个文件和压缩包，会下载这个文件</p><p>5.网络元素链接：在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接。</p><p>6.锚点链接：当我们点击链接，可以快速定位到页面中的某个位置。</p><ul><li>在链接文本的href属性中，设置属性值为**#名字**的形式，如<a href="#two">第二集&lt; /a&gt;</li><li>找到目标位置标签，里面添加一个id属性=刚才的名字，如：<h3 id="two">第二集介绍</h3></li></ul><hr><h2 id="1-7HTML中的注释和特殊字符"><a href="#1-7HTML中的注释和特殊字符" class="headerlink" title="1.7HTML中的注释和特殊字符"></a>1.7HTML中的注释和特殊字符</h2><p><strong>注释</strong></p><p>如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p><p>HTML中的注释以”<!--"开头，以"-->“结束。</p><p><strong>特殊字符</strong></p><p>在HTML页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210722204628.png" alt="QQ截图20210722204628"></p><blockquote><p>重点记前三个</p></blockquote><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;three&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5，CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，合适的动效设计，给用户带来极高的用户体验。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#one&quot;</span>&gt;</span>1.网站前端<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span>2.核心技术<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网站前端<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>前端技术一般分为前端设计和前端开发，前端设计一般可以理解为网站的视觉设计，前端开发则是网站的前台代码实现，包括基本的HTML和CSS以及JavaScript/ajax，最新的高级版本HTML5、CSS3，以及SVG等。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>核心技术<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baike.baidu.com/item/CSS/5457&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这三个是前端开发中最基本也是最必须的三个技能。前端的开发中，在页面的布局时， HTML将元素进行定义，CSS对展示的元素进行定位，再通过JavaScript实现相应的效果和交互。虽然表面看起来很简单，但这里面需要掌握的东西绝对不会少。在进行开发前，需要对这些概念弄清楚、弄明白，这样在开发的过程中才会得心应手。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>指的是超文本标记语言 (Hyper Text Markup Language)，这个也是我们网页最常用普通的语言了，经历了多个版本的发展，已经发展到5.0版了，得力于W3C建立的标准和规范，已普遍升级到了XHTML，XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）， XHTML 于2000年的1月26日成为 W3C 标准，是更严格更纯净的 HTML 代码，XHTML 的目标是取代 HTML。XHTML 与 HTML 4.01 几乎是相同的，XHTML</span><br><span class="line">    是作为一种 XML 应用被重新定义的 HTML，是一个 W3C 标准。W3C 将 XHTML 定义为最新的HTML版本。所有新的浏览器都支持 XHTML。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>级联样式表（Cascading Style Sheet）简称“CSS”，通常又称为“风格样式表（Style Sheet）”，它是用来进行网页风格设计的。比如，如果想让链接字未点击时是蓝色的，当鼠标移上去后字变成红色的且有下划线，这就是一种风格。通过设立样式表，可以统一地控制HTML中各标志的显示属性。级联样式表可以使人更能有效地控制网页外观。使用级联样式表，可以扩充精确指定网页元素位置，外观以及创建特殊效果的能力。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>是一种由Netscape的LiveScript发展而来的原型化继承的面向对象的动态类型的区分大小写的客户端脚本语言，主要目的是为了解决服务器端语言，比如Perl，遗留的速度问题，为客户提供更流畅的浏览效果。当时服务端需要对数据进行验证，由于网络速度相当缓慢，只有28.8kbps，验证步骤浪费的时间太多。于是Netscape的浏览器Navigator加入了Javascript，提供了数据验证的基本功能。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#three&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-8表格标签"><a href="#1-8表格标签" class="headerlink" title="1.8表格标签"></a>1.8表格标签</h2><p><strong>主要作用</strong></p><p>表格主要用来显示、展示数据，因为它可以让数据显示的非常规整，可读性非常好，特别是后台展示数据的时候，能够熟练运用表格就显得很重要。一个简约的表格能够把繁杂的数据表现得很有条理。</p><p>总结：表格不是用来布局页面的，而是用来<strong>展示数据</strong>的。</p><p><strong>基本语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.<table></table>是用于定义表格的标签。</p><p>2.<tr></tr>标签用于定义表格中的行，必须嵌套在<table></table>标签中。</p><p>3.<td></td>用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。</p><p>4.字母td指表格数据(table data)，即数据单元格的内容。</p><p><strong>表头单元格标签</strong></p><p>一般表头单元格位于表格的第一行或者第一列，表头单元格里面的文本内容加粗居中显示。</p><th></th><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>表格属性</strong></p><p>表格标签这部分属性，实际开发我们并不常用，后面通过CSS来设置。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210723102637.png" alt="QQ截图20210723102637" style="zoom:80%;" /><p>cellpadding                   cellspacing                    align                      border                      width                        heigh</p><p>内容与格间距                格与格间距                   对齐方式                 边框                          宽                              高</p><p> <strong>表格结构标签</strong></p><p>使用场景：因为表格可能很长，为了更好的表示表格的语义，可以将表格分割成表格头部和表格主体两大部分。</p><p>在表格标签中，分别用：**<thead>标签  表格的头部区域、<tbody>   表格的主体区域**。这样可以更好的分清表格结构。</p><p>1.<thead></thrad>：用于定义表格的头部。<thead>内部必须拥有<tr>标签。一般是位于第一行。</p><p>2.<tbody></tbody>：用于定义表格的主体，主要用于放数据本体。</p><p>3.以上两个标签都是放在<table></table>标签中。</p><p><strong>合并单元格</strong></p><p>方式：</p><ul><li>跨行合并：rowspan=”合并单元格的个数”</li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210723110122.png" alt="QQ截图20210723110122" style="zoom:80%;" /><p>目标单元格：</p><ul><li>跨行：最上侧单元格为目标单元格，写合并代码</li><li>跨列：最左侧单元格为目标单元格，写合并代码</li></ul><p><strong>合并单元格三步：</strong></p><p>1.确定跨行合并还是跨列合并</p><p>2.找到目标单元格。写上合并方式=合并的单元格数量。比如：<td colspan="2"></td>。</p><p>3.删除多余的单元格。</p><hr><h2 id="1-9列表标签"><a href="#1-9列表标签" class="headerlink" title="1.9列表标签"></a>1.9列表标签</h2><p>表格是用来显示数据的，那么<strong>列表就是用来布局的</strong>。</p><p><strong>列表</strong>最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。</p><p>根据使用情景的不同，列表可以分为三大类：<strong>无序列表</strong>、<strong>有序列表</strong>和<strong>自定义列表</strong>。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210723171731.png" alt="QQ截图20210723171731"></p><p><strong>无序列表</strong>(重点)</p><p>&lt; ul &gt;标签表示HTML页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用&lt; li &gt;标签定义。</p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   ... </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.无序列表的各个列表项之间没有顺序级别之分，是并列的。</p><p>2.<ul></ul>中只能嵌套<li></li>，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。</p><p>3.<li>与</li>之间相当于一个容器，可以容纳所有元素。</p><p>4.无序列表会带有自己的样式属性，但在实际使用时，我们会使用CSS来设置。</p><p><strong>有序列表</strong>(了解)</p><p>有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。</p><p>在HTML标签中，<ol>标签用于定义有序列表，列表排序以数字来显示，并使用<li>标签来定义列表项。</p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   ... </span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.<ol></ol>中只能嵌套<li></li>，直接在<ol></ol>标签中输入其他标签或者文字的做法是不被允许的。</p><p>2.<li>与</li>之间相当于一个容器，可以容纳所有元素。</p><p>3.无序列表会带有自己的样式属性，但在实际使用时，我们会使用CSS来设置。</p><p><strong>自定义列表</strong>(重点)</p><p>自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210723175440.png" alt="QQ截图20210723175440"></p><p>在HTML标签中，<dl>标签用于定义描述列表(或定义列表)，该标签会与<dt>(定义项目/名字)和<dd>(描述每一个项目/名字)一起使用。</p><p>基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.<dl></dl>里面只能包含<dt>和<dd>。</p><p>2.<dt>和<dd>个数没有限制，经常是一个<dt>对应多个<dd>。</p><hr><h2 id="1-10表单标签"><a href="#1-10表单标签" class="headerlink" title="1.10表单标签"></a>1.10表单标签</h2><p>表单的目的：<strong>收集用户信息</strong></p><p>在HTML中，一个完整的表单通常由<strong>表单域</strong>、<strong>表单控件(也称表单元素)<strong>、</strong>提示信息</strong>3个部分构成</p><p><strong>表单域</strong></p><p>表单域是一个包含表单元素的区域。</p><p>在HTML标签中，<form>标签用于定义表单域，以实现用户信息的收集和传递。</p><form>会把它范围内的表单元素信息提交给服务器。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单域名称&quot;</span>&gt;</span></span><br><span class="line">   各种表单元素控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性：</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210723182117.png" alt="QQ截图20210723182117" style="zoom:80%;" /><p><strong>表单控件</strong></p><p>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件。</p><p><strong>1.input输入表单元素</strong></p><p>在表单元素中**<input>标签用于收集用户信息**</p><p>在<input>标签中，包含一个<strong>type</strong>属性，根据不同的type属性值，输入字段拥有很多种形式(文本字段、复选框、掩码后的文本控件、单选按钮、按钮等)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span>  /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><input/>标签为单标签</li><li>type属性设置不同的属性值用来指定不同的控件类型</li></ul><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210723183148.png" alt="QQ截图20210723183148" style="zoom: 80%;" /><p>text             文本框         用户可以在里面输入任何文字</p><p>password   密码框         用户看不见输入的密码</p><p>radio           单选按钮     可以实现多选</p><p>checkbox    复选框         可以实现多选</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210723185409.png" alt="QQ截图20210723185409" style="zoom: 80%;" /><p>1.name和value是每个表单元素都有的属性值，主要给后台人员使用。</p><p>2.name表单元素的名字，要求<strong>单选按钮和复选框要有相同的name值</strong>。</p><p>3.checked=”checked”默认勾选，单选按钮只能加一个，复选框可以加多个，maxlength规定输入字段中的字符的最大长度。</p><p>4.type=”submit”提交按钮，可以将表单元素里面的值，提交给后台服务器。type=”reset” 重置按钮，可以还原表单元素初始的默认状态。</p><p>5.type=”botton” value=”获取短信验证码”，后期配合JS使用。type=”file”上传文件使用的。</p><p><strong><lable>标签</strong></p><p><lable>标签为input元素定义标注(标签)</p><p><lable>标签用于绑定一个表单元素，当点击<lable>标签内文本时，浏览器就会自动将光标转到或者选择对应的表单元素上，用来增加用户体验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>核心：<lable>标签的<strong>for属性</strong>应当与相关元素的<strong>id属性相同</strong>。</p><p><strong>2.select下拉表单元素</strong></p><p>在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用<select>标签控件定义<strong>下拉列表</strong></p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.<select>中至少包含一对<option>。</p><p>2.在<option>中定义selected=”selected”时，当前项即为默认选中项。</p><p><strong>3.textarea文本域元素</strong></p><p>当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用<textarea>标签。</p><p>在表单元素中，<textarea>标签是用于定义多行文本输入的控件。</p><p>使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板、评论。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">row</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">   文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.通过<textarea>标签可以轻松的创建多行文本输入框。</p><p>2.cols=”每行中的字符数”，row=”显示的行数”，我们在实际开发中不会使用，都是用CSS来改变大小。</p><hr><h1 id="第二章-CSS"><a href="#第二章-CSS" class="headerlink" title="第二章  CSS"></a>第二章  CSS</h1><hr><h2 id="2-1CSS简介"><a href="#2-1CSS简介" class="headerlink" title="2.1CSS简介"></a>2.1CSS简介</h2><p><strong>CSS</strong>是<strong>层叠样式表</strong>(Cascading Style Sheets)的简称，有时我们也会称之为<strong>CSS样式表</strong>或<strong>级联样式表</strong>。</p><p>CSS也是一种标记语言</p><p>CSS主要用于设置HTML页面中的<strong>文本内容</strong>(字体、大小、对齐方式等)、<strong>图片的外形</strong>(宽高、边框样式、边距等)以及<strong>版面的布局和外观显示样式</strong>。</p><p><strong>总结：</strong></p><p>1.HTML主要做结构，显示元素内容。</p><p>2.CSS美化HTML，布局网页。</p><p>3.<strong>CSS最大价值：由HTML专注去做结构呈现，样式交给CSS，即结构(HTML)与样式(CSS)相分离</strong>。</p><p><strong>CSS语法规范</strong></p><p>CSS规则由两个主要的部分构成：<strong>选择器</strong>以及一条或多条<strong>声明</strong>。</p><ul><li><strong>选择器</strong>是用于指定CSS样式的<strong>HTML标签</strong>，花括号内是对该对象设置的具体样式</li><li>属性和属性值以”键值对”的形式出现</li><li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</li><li>属性和属性值之间用英文 “:” 分开</li></ul><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;theme.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在HTML用link标签链接一个外部样式表--&gt;</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="2-2CSS基础选择器"><a href="#2-2CSS基础选择器" class="headerlink" title="2.2CSS基础选择器"></a>2.2CSS基础选择器</h2><p><strong>CSS选择器的作用</strong></p><p>选择器就是根据不同需求把不同的标签选出来，简单说选择器就是<strong>选择标签用的</strong>。</p><p><strong>选择器分类</strong></p><p>选择器分为<strong>基础选择器</strong>和<strong>复合选择器</strong>两大类。</p><p><em>基础选择器</em></p><ul><li>基础选择器是由单个选择器组成的</li><li>基础选择器又包括：<em>标签选择器</em>、<em>类选择器</em>、<em>id选择器</em>和<em>通配符选择器</em></li></ul><p><strong>1.标签选择器</strong></p><p>标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;</span><br><span class="line">    属性<span class="number">1</span>：属性值<span class="number">1</span>；</span><br><span class="line">    属性<span class="number">2</span>：属性值<span class="number">2</span>；</span><br><span class="line">    属性<span class="number">3</span>：属性值<span class="number">3</span>；</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>作用</em></p><p>标签选择器可以把某一类标签全部选择出来，比如所有的<div>标签和所有的<span>标签。</p><p><em>优点</em></p><p>能快速为页面中同类型的标签统一设置样式。</p><p><em>缺点</em></p><p>不能设计差异化样式，只能选择全部的当前标签。</p><p><strong>2.类选择器</strong></p><p>如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用<strong>类选择器</strong>。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.类名&#123;</span><br><span class="line">    属性<span class="number">1</span>:属性值<span class="number">1</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，将所有拥有red类的HTML元素均变为红色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构需要用<strong>class属性</strong>来调用class类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;read&quot;&gt;变红色&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>tips：</p><p>1.类选择器使用 “.” (英文点号)进行标识，后面紧跟类名(自定义，我们自己命名的)。</p><p>2.可以理解为给这个标签起了一个名字，来表示。</p><p>3.长名称或词组可以使用中横线来为选择器命名。</p><p>4.不要使用纯数字、中文等命名，尽量使用英文字母来表示。</p></blockquote><p>多类名使用方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red font20&quot;</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.在标签class属性中写多个类名</p><p>2.多个类名中间必须用空格分开</p><p>3.这个标签就可以分别具有这些类名的样式</p><p><strong>3.id选择器</strong></p><p>id选择器可以为标有特定id的HTML元素指定特定的样式。</p><p>HTML元素以<strong>id属性</strong>来设置id选择器，CSS中id选择器以”<strong>#</strong>“来定义。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>名&#123;</span><br><span class="line">    属性<span class="number">1</span>：属性值<span class="number">1</span>；</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：id选择器只能调用一次，类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素上，经常和JavaScript搭配使用。</p></blockquote><p><strong>4.通配符选择器</strong></p><p>在CSS中，通配符选择器使用 “*****” 定义，它表示选取页面中所有元素(标签)。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    属性<span class="number">1</span>:属性值<span class="number">1</span>；</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通配符选择器不需要调用，自动就给所有的元素使用样式</li><li>特殊情况才使用，例：清除所有的元素标签的内外边距</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210724163533.png" alt="QQ截图20210724163533" style="zoom:67%;" /><hr><h2 id="2-3CSS字体属性"><a href="#2-3CSS字体属性" class="headerlink" title="2.3CSS字体属性"></a>2.3CSS字体属性</h2><p>CSS Fonts(字体)属性用于定义<strong>字体系列</strong>、大小、粗细和文字样式(如斜体)。</p><p><strong>1.CSS使用font-family属性定义文本的字体系列</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>；&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">font-family</span>:Arial,<span class="string">&quot;Microsoft YaHei&quot;</span>,<span class="string">&quot;微软雅黑&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li><li>尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示</li></ul><p><strong>2.CSS使用font-size属性定义字体大小</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>px(像素)大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为16px</li><li>不同的浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小</li><li>可以给body指定整个页面文字的大小</li></ul><p><strong>3.CSS使用font-weight属性设置文本字体的粗细</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bold</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;<span class="comment">/*字体加粗  等价于bold*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;<span class="comment">/*标题不加粗  等价于normal*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性值</p><p>normal                    默认值(不加粗的)</p><p>bold                        定义粗体(加粗的)</p><p>100-900                  400等同于normal，而700等同于bold  注意这个数字后面不跟单位</p><p><strong>4.CSS使用font-style属性设置文本的风格</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性值</p><p>normal                        默认值，浏览器会显示标准的字体样式 </p><p>italic                            浏览器会显示斜体的字体样式</p><blockquote><p>tips：平时我们很少给文字加斜体，更多的是给斜体标签<em></em>或者<i></i>改为不倾斜的字体。</p></blockquote><p><strong>5.字体符合属性</strong></p><p>字体属性可以把以上文字样式综合来写，这样可以更节约代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: font-style font-weight font-size/line-height font-family;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能颠倒顺序！！！</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">16px</span> <span class="string">&quot;Microsoft YaHei&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用font属性时，必须按照上面语法格式中的顺序书写，<strong>不能更换顺序</strong>，并且各个属性间以<strong>空格</strong>隔开</li><li>不需要设置的属性可以省略(取默认值)，但<strong>必须保留font-size和font-family属性</strong>，否则font属性将不起作用</li></ul><p><strong>总结</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210724172015.png" alt="QQ截图20210724172015" style="zoom:67%;" /><hr><h2 id="2-4CSS文本属性"><a href="#2-4CSS文本属性" class="headerlink" title="2.4CSS文本属性"></a>2.4CSS文本属性</h2><p>CSS Text(文本)属性可定义文本的<strong>外观</strong>，比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等。</p><p><strong>1.color属性用于定义文本的颜色</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210724181349.png" alt="QQ截图20210724181349" style="zoom:67%;" /><blockquote><p>tips：开发中最常用的是十六进制</p></blockquote><p><strong>2.text-align属性用于设置元素内文本内容的水平对齐方式</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性：center(居中)        right(右对齐)        left(左对齐)默认值</p><p><strong>3.text-decoration属性规定添加到文本的修饰</strong></p><p>可以给文本添加下划线、删除线、上划线等。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>属性</em></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210724182118.png" alt="QQ截图20210724182118" style="zoom: 67%;" /><p><strong>4.text-indent属性用来指定文本的第一行缩进</strong></p><p>通常是将<strong>段落的首行缩进</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>em</strong>是一个相对单位，就是当前元素(font-size)<strong>1个文字的大小</strong>，如果当前元素没有设置大小，则会按照父元素的1个文字大小。</p><p><strong>5.line-height属性用于设置行间的距离(行高)</strong></p><p>可以控制文字行与行之间的距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210724184015.png" alt="QQ截图20210724184015" style="zoom: 80%;" /><hr><h2 id="2-5CSS的引入方式"><a href="#2-5CSS的引入方式" class="headerlink" title="2.5CSS的引入方式"></a>2.5CSS的引入方式</h2><p><strong>1.CSS的三种样式表</strong></p><p>按照CSS样式书写的位置，CSS样式表可以分为三大类：**行内样式表(行内式)<strong>、</strong>内部样式表(嵌入式)<strong>、</strong>外部样式表(链接式)**。</p><p><strong>内部样式表</strong></p><p>写到HTML页面内部，是将所有的CSS代码抽取出来，单独放到一个<style>标签中。</p><ul><li>&lt; style&gt;标签理论上可以放在HTML文档的任何地方，但一般会放在文档的&lt; head&gt;标签中 </li><li>通过此种方式，可以方便控制当前整个页面中的元素样式设置</li><li>代码结构清晰，但是并没有实现结构与样式完全分离</li><li>使用内部样式表设定CSS，通常也被称为<strong>嵌入式引入</strong>，这种方式是我们练习时常用的方式</li></ul><p><strong>2.行内样式表</strong></p><p>在<strong>元素标签内部的style属性中设定CSS样式</strong>。适合于修改简单样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span>啦啦啦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>style其实就是标签的属性</li><li>在双引号中间，写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li><li>书写麻烦，不推荐大量使用</li><li>使用行内样式表设定CSS，通常也被称为<strong>行内式引入</strong></li></ul><p><strong>3.外部样式表</strong></p><p>实际开发都是外部样式表，核心：样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用。</p><p>两步：</p><ul><li>新建一个后缀名为.css的样式文件，把所有CSS代码都放入此文件中</li><li>在HTML页面中，使用<link>标签引入这个文件(在head中写)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210724190420.png" alt="QQ截图20210724190420"></p><ul><li>使用外部样式表设定CSS，通常也被称为<strong>外链式</strong>或<strong>链接式引入</strong>，这种是开发中常用的方式</li></ul><p><strong>总结</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210724190600.png" alt="QQ截图20210724190600"></p><hr><h2 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h2><p>新闻网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>新闻综合案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;posion&quot;</span>&gt;</span>国家卫健委：截至7月23日全国累计接种新冠病毒疫苗152489.7万剂次<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posion gray&quot;</span>&gt;</span> 2021年07月24日15:18 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.people.com.cn/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>来源：人民网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;width1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入查询条件&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>人民网北京7月24日电 （记者崔元苑）据国家卫生健康委官网消息，截至2021年7月23日，31个省（自治区、直辖市）和新疆生产建设兵团累计报告接种新冠病毒疫苗152489.7万剂次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;posion&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>人民网南京7月24日电（李子佩、顾姝姝）7月24日上午，南京市召开新闻发布会通报新冠肺炎疫情防控最新情况。人民网了解到，从7月24日起，南京市部分区域疫情风险等级再次进行调整，江宁区新增3处中风险地区，为禄口街道铜山社区铜陵新村、陆纲社区翠屏城小区，以及湖熟街道庄上自然村。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>据了解，7月23日0-24时，南京新增本土新冠肺炎确诊病例12例（其中3例为轻型，9例为普通型），新增无症状感染者4例。截至目前，南京共有本土确诊病例35例（其中14例轻型，21例普通型），共有本土无症状感染者18例。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>南京市卫健委副主任杨大锁表示，在新增的16例感染者中，江宁15例，溧水1例，均为机场工作人员和他们的密切接触者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>根据南京市疫情防控工作要求，通过铁路、公路客运站等站场离宁的旅客（不含外地中转旅客），须凭“健康码”绿码，并持有48小时内核酸检测阴性证明（48小时内阴性证明要求自7月21日0时起实施）。对于自驾离宁的人员，南京市交通局副局长郑春发表示，自25日7时起，南京市域边界离宁公路将暂设68个离开南京的查验点。对经公路离宁的驾乘人员开展核酸检测结果和健康码的查验。提倡大家非必要不离宁，但确需出行的，要准备好48小时内核酸检测阴性证明，并且申领健康码。 “此次对经公路自驾离宁人员的查验标准共分三个方面：健康码为绿码，并且持有48小时内核酸检测阴性证明的人员可以自由通行；对于健康码为黄码且不能提供48小时内核酸检测阴性证明的人员将被劝返；对于健康码为红码的人员，将引导至就近的隔离点进行14天隔离观察。”郑春发建议，鉴于近几日依然有新增确诊病例，广大市民应尽量减少不必要的出行。</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text gray&quot;</span>&gt;</span>(责编：耿志超、吴纪攀)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.posion</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">550px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gray</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888888</span>88;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">170px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bit</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Chrome调试工具"><a href="#Chrome调试工具" class="headerlink" title="Chrome调试工具"></a>Chrome调试工具</h2><p><strong>1.打开调试工具</strong></p><p>打开Chrome浏览器，按下<strong>F12键</strong>或<strong>点击页面空白处–&gt;检查</strong>。</p><p><strong>2.使用调试工具</strong></p><ul><li><strong>Ctrl+滚轮</strong>可以放大开发者工具代码大小</li><li>左边是HTML元素结构，右边是CSS样式</li><li>右边CSS样式可以改动数值(左右箭头或者直接输入)和查看颜色</li><li><strong>Ctrl+0</strong>复原浏览器大小</li><li>如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误</li><li>如果有样式，但是样式前面有<strong>黄色叹号提示</strong>，则是样式属性书写错误</li></ul><hr><h2 id="2-6Emmet语法"><a href="#2-6Emmet语法" class="headerlink" title="2.6Emmet语法"></a>2.6Emmet语法</h2><p>Emmet语法的前身是Zen coding，它使用缩写，来提高HTML/css的编写速度，Vscode内部已经集成该语法。</p><p><strong>1.快速生成HTML结构语法</strong></p><ul><li><p>生成标签直接输入标签名按tab键即可</p></li><li><p>如果想要生成多个相同标签，加上 *就可以了</p><p>比如div*3就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用&gt; ，比如ul&gt;li就可以了</p></li><li><p>如果有兄弟关系的标签，用+就可以了，比如div+p</p></li><li><p>如果生成带有类名或者id名字的，直接写.demo或者#two tab键就可以了，.是class，#是id</p></li><li><p>如果生成的div类名是有顺序的，可以用自增符号$，例.demo$*5</p></li><li><p>如果想要在生成的标签内部写内容可以用{ }表示</p></li></ul><p><strong>2.快速生成CSS样式语法</strong></p><p>​     CSS基本采取简写方式即可</p><p>1.比如w200 按tab 可以生成 width : 200px;</p><p>2.比如lh260 按tab 可以生成 line-height : 26px;</p><hr><h2 id="2-7CSS的复合选择器"><a href="#2-7CSS的复合选择器" class="headerlink" title="2.7CSS的复合选择器"></a>2.7CSS的复合选择器</h2><ul><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li><li>常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器等等</li></ul><p><strong>1.后代选择器(重要)</strong></p><p>后代选择器又称包含选择器，可以选择父元素里面的子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span> 元素<span class="number">2</span> &#123;样式声明&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1里面的所有元素2</strong>(元素后代)</p><p>例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;样式声明&#125; <span class="comment">/*选择ul 里面的所有 li标签元素*/</span></span><br></pre></td></tr></table></figure><ul><li>元素1和元素2中间用<strong>空格隔开</strong></li><li>元素1是父级，元素2是子级，最终选择的是<strong>元素2</strong></li><li>只要元素包含在元素1中即可，一层一层嵌套</li><li>元素1和元素2可以是任意基础选择器</li></ul><p><strong>2.子元素选择器(重点)</strong></p><p><strong>子元素选择器</strong>(子选择器)只能选择作为某一元素的最近一级子元素</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span>&gt;元素<span class="number">2</span>&#123;样式声明&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1里面的所有直接后代(子元素)元素2</strong></p><p>例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>&#123;样式声明&#125; <span class="comment">/*选择div 里面所有最近一级p标签元素*/</span></span><br></pre></td></tr></table></figure><ul><li>元素1和元素2中间用<strong>大于号</strong>隔开</li><li>元素1是父级，元素2是子级，<strong>最终选择的是元素2</strong></li><li>元素2必须是<strong>亲儿子</strong></li></ul><p><strong>3.并集选择器(重点)</strong></p><p><strong>并集选择器可以选择多组标签，同时为他们定义相同的样式。</strong>通常用于集体声明</p><p>属性之间用**”,”** 隔开</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span>，元素<span class="number">2</span>&#123;样式声明&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1和元素2。</strong></p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">div</span>&#123;样式声明&#125;<span class="comment">/*选择 ul和div 标签元素*/</span></span><br></pre></td></tr></table></figure><p><strong>4.伪类选择器</strong></p><p><strong>伪类选择器</strong>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p><p>伪类选择器书写最大的特点是<strong>用冒号(:)表示</strong>，比如      :hover、:first-child。</p><p>因为伪类选择器很多，比如有链接伪类、结构伪类等。</p><ul><li><strong>链接伪类选择器</strong></li></ul><p>a:link                    选择所有未被访问的链接</p><p>a:visited               选择所有已被访问的链接</p><p>a:hover                选择鼠标指针位于其上的链接</p><p>a:active                选择活动链接(鼠标按下未弹起的链接)</p><p><strong>注意事项：</strong></p><ul><li>为了确保生效，请按照LVHA的顺序声明:link - :visited - :hover - :cative。</li><li>记忆法：<strong>lv ha</strong>o</li><li>因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式，</li></ul><p><strong>写法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*a是标签选择器 所有的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*:hover是链接伪类选择器 鼠标经过*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;<span class="comment">/* 鼠标经过的时候，由原来的灰色 变成了红色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.:focus选择器</strong></p><p><strong>:focus伪类选择器</strong>用于选取获得焦点的表单元素。</p><p>焦点就是光标，一般情况<input>类表单元素才能获取，因此这个选择器也主要针对于表单元素来说。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210725162450.png" alt="QQ截图20210725162450" style="zoom: 80%;" /><hr><h2 id="2-8CSS的元素显示模式"><a href="#2-8CSS的元素显示模式" class="headerlink" title="2.8CSS的元素显示模式"></a>2.8CSS的元素显示模式</h2><p>元素显示模式就是<strong>元素(标签)以什么方式进行显示</strong>，比如<div>自己占一行，比如一行可以放多个<span>。</p><p>HTML元素一般分为<strong>块元素</strong>和<strong>行内元素</strong>两种类型。</p><p><strong>1.块元素</strong></p><p>常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中**<div><strong>标签是</strong>最经典的块元素**。</p><p><em>特点</em></p><ul><li>自己占一行</li><li>高度、宽度、外边距以及内边距都可以控制</li><li>宽度默认是容器(父级宽度)的100%</li><li>是一个容器及盒子，里面可以放行内或块级元素</li></ul><blockquote><p>tips：</p><ul><li>文字类的元素内不能使用块级元素</li><li>&lt; p&gt;标签主要用于存放文字，因此&lt; p&gt;里面不能放块级元素，特别是不能放<div></li><li>同理，<h1>~<h6>等都是文字类块级标签，里面也不能放其他块级元素。    </li></ul></blockquote><p><strong>2.行内元素</strong></p><p>常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中**<span><strong>标签是</strong>最经典的行内元素<strong>。有的地方也将行内元素称为</strong>内联元素**。</p><p><em>特点</em></p><ul><li>相邻行内元素在一行上，一行可以显示多个</li><li>高、宽直接设置是无效的</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或其他行内元素</li></ul><p>tips：</p><ul><li>链接里面不能再放链接</li><li>特殊情况链接<a>里面可以放块级元素，但是给<a>转换一下块级模式最安全</li></ul><p><strong>3.行内块元素</strong></p><p>在行内元素中有几个特殊的标签——<img/>、<input/>、<td>，它们<strong>同时具有块元素和行内元素的特点</strong>，有些资料称它们为<strong>行内块元素</strong>。</p><p><em>特点</em></p><ul><li>和相邻行内元素(行内块)在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)</li><li>默认宽度就是它本身内容的宽度(行内元素特点)</li><li>高度、行高、外边距以及内边距都可以控制(块级元素特点)</li></ul><p><strong>总结</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210725193651.png" alt="QQ截图20210725193651" style="zoom: 80%;" /><p><strong>4.元素显示模式转换</strong></p><ul><li>转换为块级元素：display: block;</li><li>转换为行内元素：display: inline;</li><li>转换为行内块元素：display: inline-block;</li></ul><p><strong>5.小工具snipaste</strong></p><p>1.F1可以截图，同时测量大小，设置箭头 书写文字等</p><p>2.F3在桌面置顶显示</p><p>3.点击图片，alt可以取色(按下shift可以切换取色模式)</p><p>4.按下esc取消图片显示</p><p><strong>6.单行文字垂直居中</strong></p><p>技巧：让line-height的值=height的值</p><p>line-height&lt;height   文字偏上</p><p>line-height&gt;height   文字偏下</p><hr><h2 id="2-9CSS的背景"><a href="#2-9CSS的背景" class="headerlink" title="2.9CSS的背景"></a>2.9CSS的背景</h2><p>通过CSS背景属性，可以给页面元素添加背景样式</p><p>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图片固定等。</p><p><strong>1.背景颜色</strong></p><p><strong>background-color</strong>属性定义了元素的背景颜色。</p><p>一般情况下元素背景颜色默认值是transparent(透明)</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: 颜色值;</span><br></pre></td></tr></table></figure><p><strong>2.背景图片</strong></p><p><strong>background-image</strong>属性描述了元素的背景图像。实际开发常见于logo或者一些装饰性的小图片或者是超大的背景图片，优点是非常便于控制位置。(精灵图也是一种运用场景)</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : none | <span class="built_in">url</span>(<span class="string">url</span>)</span><br></pre></td></tr></table></figure><p><strong>3.背景平铺</strong></p><p>如果需要在HTML页面上对背景图像进行平铺，可以使用<strong>background-repeat</strong>属性。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure><p>默认情况下是平铺的</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210725204733.png" alt="QQ截图20210725204733" style="zoom:80%;" /><p><strong>4.背景图片位置</strong></p><p>利用<strong>background-position</strong>属性可以改变图片在背景中的位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: x y;</span><br></pre></td></tr></table></figure><p>参数代表的意思是：x坐标和y坐标，可以使用<strong>方位名词</strong>或者<strong>精确单位</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210725205238.png" alt="QQ截图20210725205238" style="zoom:80%;" /><p>1.参数是方位名词</p><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如left top 和 top left 效果一致</li><li>如果只指定了一个方位名词，另一个省略，则第二个值默认居中对齐</li></ul><p>2.参数是精确单位</p><ul><li>如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</li><li>如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</li></ul><p>3.参数是混合单位</p><ul><li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个是y坐标</li></ul><p><strong>5.背景图像固定</strong>(背景附着)</p><p><strong>background-attachment</strong>属性设置背景图像是否固定或者随着页面的其余部分滚动。</p><p>background-attachment后期可以制作视差滚动的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span> : scroll | fixed</span><br></pre></td></tr></table></figure><p>scroll：背景图像是随对象内容滚动</p><p>fixed：背景图像固定</p><p><strong>复合写法</strong></p><p>没有特定的书写顺序，一般习惯：</p><p><strong>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y fixed top;</span><br></pre></td></tr></table></figure><p><strong>6.背景色半透明</strong></p><p>CSS3为我们提供了背景颜色半透明的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><ul><li>最后一个参数是alpha透明度，取值范围在0-1之间</li><li>我们习惯把0.3的0省略掉，写为background: rgba(0，0，0，.3)</li><li>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li></ul><p><strong>总结</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210726105840.png" alt="QQ截图20210726105840" style="zoom:67%;" /><hr><h2 id="2-10CSS的三大特性"><a href="#2-10CSS的三大特性" class="headerlink" title="2.10CSS的三大特性"></a>2.10CSS的三大特性</h2><p>CSS有三个非常重要的三个特性：层叠性、继承性、优先级。</p><p><strong>1.层叠性</strong></p><p>相同选择器给设置相同的样式，此时一个样式就会**覆盖(层叠)**另一个冲突的样式。层叠性主要解决样式冲突问题。</p><p>层叠性原则：</p><ul><li>样式冲突，遵循的原则是<strong>就近原则</strong>，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><p><strong>2.继承性</strong></p><p>CSS中的继承：子标签会继承父标签的某些样式，如文本颜色和字号。</p><ul><li>恰当地使用继承可以简化代码，降低CSS样式的复杂性</li><li>子元素可以继承父元素的样式(text-，font-，line-这些元素开头的可以继承，以及color属性)</li></ul><p><strong>行高的继承</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行高可以跟单位也可以不跟单位</li><li>如果子元素没有设置行高，则会继承父元素的行高为1.5</li><li>此时子元素的行高是：当前子元素的文字大小*1.5</li><li><strong>body行高1.5这样写法最大的优势就是里面的子元素可以根据自己文字的大小自动调整行高</strong></li></ul><p><strong>3.优先级</strong></p><p>当同一个元素指定多个选择器，就会有优先级的产生。</p><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，则根据<strong>选择器权重</strong>执行</li></ul><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210726120912.png" alt="QQ截图20210726120912" style="zoom: 67%;" /><p>优先级注意点：</p><p>1.权重是有4组数字组成，但是不会有进位</p><p>2.可以理解为类选择器永远大于元素选择器，id选择器永远大于类选择器，以此类推</p><p>3.等级判断从左到右，如果某一位数值相同，则判断下一位数值</p><p>4.简单记忆法：通配符和继承权重为0，标签选择器为1，类(伪类)选择器为10，id选择器为100，行内样式表为1000，!important无穷大</p><p>5.<strong>继承的权重是0</strong>，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0。</p><p><strong>权重叠加：</strong>如果是复合选择器，则会有权重叠加，需要计算权重。</p><ul><li>权重虽然会叠加，但是永远不会有进位</li><li>div ul li ——-&gt;  0,0,0,3</li><li>.nav ul li ——-&gt;  0,0,1,2</li><li>a:hover ——-&gt;  0,0,1,1</li><li>.nav a ——-&gt;  0,0,1,1</li></ul><hr><h2 id="2-11盒子模型"><a href="#2-11盒子模型" class="headerlink" title="2.11盒子模型"></a>2.11盒子模型</h2><p>页面布局要学习三大核心：<strong>盒子模型</strong>、<strong>浮动</strong>、<strong>定位</strong>。</p><p>网页布局的过程：</p><p>1.先准备好相关的网页元素，网页元素基本都是盒子Box</p><p>2.利用CSS设置好盒子样式，然后摆放到相应的位置</p><p>3.往盒子里面装内容</p><p>所谓<strong>盒子模型</strong>：就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器</p><p>CSS盒子模型本质上是一个盒子，封装周围的HTML元素，它包括：边框、外边距、内边距和实际内容</p><p><strong>border         边框</strong>                                     <strong>padding      内边距</strong></p><p>**content        内容 **                                   <strong>margin        外边距</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210726163245.png" alt="QQ截图20210726163245"></p><p><strong>1.border边框</strong></p><p>border可以设置元素的边框。边框有三部分组成：<strong>边框宽度(粗细)<strong>、</strong>边框样式</strong>、<strong>边框颜色</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color</span><br></pre></td></tr></table></figure><p>边框的样式：solid  实线边框  dashed  虚线边框  dotted 点线边框</p><p><strong>边框的复合写法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red; <span class="comment">/*没有顺序*/</span></span><br></pre></td></tr></table></figure><p>边框可以分开写</p><p>border-top       border-right        border-left        border-bottom </p><p>​    <strong>border-collapse</strong>属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure><ul><li>collspse单词是合并的意思</li><li>border-collapse:collapse;表示相邻边框合并在一起</li></ul><blockquote><p>tips：1.边框会影响盒子的实际大小</p><p>​          2.测量盒子大小的时候，不量边框</p><p>​          3.如果测量的时候包含了边框，则需要width/height减去边框宽度</p></blockquote><p><strong>2.padding内边距</strong></p><p><strong>padding</strong>属性用于设置内边距，即边框与内容之间的距离。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210726171336.png" alt="QQ截图20210726171336" style="zoom:80%;" /><p>padding属性(简写属性)可以有一到四个值</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210726171520.png" alt="QQ截图20210726171520" style="zoom:80%;" /><p>当我们给盒子指定padding值时：</p><ul><li>内容和边距有了距离，添加了内边距</li><li>padding影响了盒子实际大小</li></ul><p>也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</p><p><strong>解决方案</strong></p><p>如果保证盒子与效果图大小保持一致，则让<strong>width/height减去多出来的内边距大小</strong>即可。</p><p>当我们没有给盒子指定width/height属性，则此时padding不会撑开盒子的大小</p><p><strong>3.margin外边距</strong></p><p><strong>margin</strong>属性用于设置外边距，即控制盒子与盒子之间的距离。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210726185509.png" alt="QQ截图20210726185509" style="zoom: 80%;" /><blockquote><p>tips：margin简写方式代表的意义跟padding完全一致。</p></blockquote><p><em>外边距典型应用：</em></p><p><strong>1.块级盒子水平居中对齐</strong></p><p>满足两个条件：</p><ul><li>盒子必须指定了宽度(width)</li><li>盒子<strong>左右的外边距</strong>都设置为auto</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;<span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auyo;&#125;</span><br></pre></td></tr></table></figure><p>三种写法：</p><ul><li>margin-left:auto; margin-right:auto;</li><li>margin:auto;</li><li>margin:0 auto;</li></ul><blockquote><p>建议用1，3两种写法</p></blockquote><p><strong>2.行内元素和行内块元素水平居中对齐</strong></p><p>行内元素或者行内块元素水平居中给其父元素添加text-align:center即可。</p><p><strong>3.外边距合并</strong></p><p>使用<strong>margin</strong>定义块元素的<strong>垂直外边距</strong>时，可能会出现外边距的合并。</p><p><strong>4.相邻块元素垂直外边距的合并</strong></p><p>当上下相邻的两个块元素(兄弟关系)相遇时，如果上面的元素有下外外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和。取两个值中的较大者这种现象被称为<strong>相邻块元素垂直外边距的合并</strong>。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727093544.png" alt="QQ截图20210727093544" style="zoom:67%;" /><p>解决方案：</p><p><strong>尽量只给一个盒子添加margin值。</strong></p><p><strong>5.嵌套块元素垂直外边距的塌陷</strong></p><p>对于两个嵌套关系的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727100621.png" alt="QQ截图20210727100621" style="zoom:80%;" /><p>解决方案：</p><ul><li>可以为父元素定义边框</li><li>可以为父元素定义内边距</li><li>可以为父元素添加overflow:hidden。</li></ul><p><strong>6.清除内外边距</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p><hr><h2 id="2-12PS基本操作"><a href="#2-12PS基本操作" class="headerlink" title="2.12PS基本操作"></a>2.12PS基本操作</h2><p>因为网页美工大部分效果图都是利用PS(Photoshop)来做的，所以以后我们大部分切图工作都是在<strong>PS</strong>里面完成的。</p><ul><li><strong>文件–&gt;打开：</strong>可以打开我们要测量的图片</li><li><strong>Ctrl+R：</strong>可以打开标尺，或者<strong>视图–&gt;标尺</strong></li><li>右击标尺，把里面的单位改为<strong>像素</strong></li><li>**Ctrl+加号(+)<strong>可以放大视图，</strong>Ctrl+减号(-)**可以缩小视图，按住空格可以移动图片</li><li>用<strong>选区</strong>拖动，可以测量大小，<strong>Ctrl+D</strong>可以取消选区，或者在<strong>旁边空白处点击一下</strong>也可以取消选区</li><li>吸色工具<strong>取色</strong></li></ul><hr><h2 id="2-13综合案例"><a href="#2-13综合案例" class="headerlink" title="2.13综合案例"></a>2.13综合案例</h2><p><strong>小米盒子</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727192728.png" alt="QQ截图20210727192728"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小米<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">260px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">65%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-left</span>: <span class="number">44px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-class">.rewive</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#333333</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-family</span>: Helvetica Neue;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">214px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">20.8px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">10px</span> <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-family</span>: Helvetica Neue;</span></span><br><span class="line"><span class="css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;Helvetica-Neue-2.ttf&quot;</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/*这里是字体文件路径*/</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-class">.p1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#b0b0b0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-left</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-bottom</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-class">.p2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#FF6700</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-family</span>: Helvetica Neue;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-left</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-class">.p3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-family</span>: Helvetica Neue;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#B0B0B0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mi.com/buy/detail?product_id=14206&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;01.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;rewive&quot;</span>&gt;</span>Note 10 Pro<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>天玑1100年度旗舰芯，VC液冷散热</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>1599元起<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;p3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">del</span>&gt;</span>1699元<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-14圆角边框"><a href="#2-14圆角边框" class="headerlink" title="2.14圆角边框"></a>2.14圆角边框</h2><p>在CSS3中，新增了圆角边框</p><p><strong>border-radius</strong>属性用于设置元素的外边框圆角。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: length;</span><br></pre></td></tr></table></figure><p><strong>radius半径(圆的半径)原理</strong>：(椭)圆与边框的交集形成圆角效果</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727200054.png" alt="QQ截图20210727200054"></p><ul><li>参数值可以为<strong>数值</strong>或<strong>百分比</strong>的形式</li><li>如果是<strong>正方形</strong>，想要设置一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为50%</li><li>如果是个矩形，设置为高度的一半就可以做<img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727202845.png" alt="QQ截图20210727202845"></li><li>该属性是一个<strong>简写属性</strong>，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>：<span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span><br></pre></td></tr></table></figure><ul><li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius、border-bottom-left-radius</li></ul><hr><h2 id="2-15盒子阴影"><a href="#2-15盒子阴影" class="headerlink" title="2.15盒子阴影"></a>2.15盒子阴影</h2><p>CSS3中新增了盒子阴影。使用<strong>box-shadow</strong>属性为盒子添加阴影。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727203719.png" alt="QQ截图20210727203719" style="zoom:67%;" /><p><strong>注意：</strong></p><p>1.默认的是外阴影(outset)，但是不可以写这个单词，否则导致阴影无效</p><p>2.盒子阴影不占用空间，不会影响其他盒子排列</p><hr><h2 id="2-16文字阴影"><a href="#2-16文字阴影" class="headerlink" title="2.16文字阴影"></a>2.16文字阴影</h2><p>在CSS3中，我们可以使用<strong>text-shadow</strong>属性将阴影应用于文本。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727205216.png" alt="QQ截图20210727205216" style="zoom:67%;" /><hr><h2 id="2-17浮动"><a href="#2-17浮动" class="headerlink" title="2.17浮动"></a>2.17浮动</h2><p><strong>传统网页布局的三种方式</strong></p><p>网页布局的本质——用CSS来摆放盒子。把盒子摆放到相应位置。</p><p>CSS提供了三种传统布局方式：</p><ul><li>普通流(标准流)</li><li>浮动</li><li>定位</li></ul><p><strong>1.标准流</strong></p><p>所谓的标准流：就是标签按照规定好的默认方式排列</p><p>1.块级元素会独占一行，从上向下顺序排列。</p><ul><li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li></ul><p>2.行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。</p><ul><li>常用元素：span、a、i、em等</li></ul><p>以上都是标准流布局，标准流是最基本的布局方式。</p><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p><p>注意：实际开发中，一个页面基本都包含了这三种布局方式(后面移动端学习新的布局方式)。</p><p><strong>2.浮动(float)</strong></p><p>有很多的布局效果，标准流是没有办法完成的，此时就可以利用浮动完成布局。因为浮动可以改变元素标签默认的排列方式。</p><p>典型应用：可以让多个块级元素一行内排列显示。</p><p><strong>网页布局的第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</p><p><strong>float</strong>属性用于创建浮动框，将其移动到另一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">float</span>: 属性值;&#125;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727211915.png" alt="QQ截图20210727211915" style="zoom:67%;" /><p><strong>浮动特性(重难点)</strong></p><p>1.**浮动元素会脱离标准流(脱标)**，浮动的盒子不再保留原先的位置</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727212645.png" alt="QQ截图20210727212645"></p><p>2.浮动的元素会一行内显示并且元素顶部对齐</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727212824.png" alt="QQ截图20210727212824"></p><p>注意：浮动的元素是相互贴靠在一起的(不会有缝隙)，如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p><p>3.浮动的元素会具有行内块元素的特性</p><p>任何元素都可以浮动，不管原先是什么模式的元素，添加浮动之后会具有<strong>行内块元素</strong>相似的特性。</p><ul><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li><li>行内元素同理</li></ul><p><strong>浮动元素经常和标准流父级搭配使用</strong></p><p>伪类约束浮动元素位置，我们网页布局一般采取的策略是：</p><p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置，符合网页布局第一准则。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210727213839.png" alt="QQ截图20210727213839" style="zoom:67%;" /><p><strong>网页布局第二准则：先设置盒子大小，之后设置盒子的位置</strong></p><hr><h2 id="2-18常见网页布局"><a href="#2-18常见网页布局" class="headerlink" title="2.18常见网页布局"></a>2.18常见网页布局</h2><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210728102750.png" alt="QQ截图20210728102750" style="zoom:67%;" /><p>​                                                               <strong>标准流</strong>                                                                    <strong>浮动</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210728102801.png" alt="QQ截图20210728102801" style="zoom:67%;" /><p>​                                                                                                    <strong>小米</strong></p><p><strong>浮动布局注意点</strong></p><p>1.浮动和标准流的父盒子搭配</p><p><strong>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</strong></p><p>2.一个元素浮动了，理论上其余的兄弟元素也要浮动</p><p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题</p><p><strong>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</strong></p><hr><h2 id="2-19清除浮动"><a href="#2-19清除浮动" class="headerlink" title="2.19清除浮动"></a>2.19清除浮动</h2><p><strong>1.Why？</strong></p><p>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210728104119.png" alt="QQ截图20210728104119" style="zoom: 67%;" /><ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li></ul><p><strong>2.清除浮动的本质</strong></p><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li><strong>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></li></ul><p><strong>3.清除浮动</strong></p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">clear</span>: 属性值;&#125;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210728105258.png" alt="QQ截图20210728105258" style="zoom:80%;" /><p>我们实际工作中，几乎只用<strong>clear: both;</strong></p><p><strong>清除浮动的策略是：闭合浮动</strong></p><p><strong>方法</strong></p><p><strong>1.额外标签法也称隔墙法，是W3C推荐的做法(了解)</strong></p><p><strong>额外标签法</strong>会在浮动元素末尾添加一个空的标签。例如<div style="clear:both"></div>，或者其他标签(如<br/>等)。</p><ul><li>优点：通俗易懂，书写方便</li><li>缺点：添加许多无意义的标签，结构化较差，实际工作可能会遇到，但是不常用</li></ul><blockquote><p>tips：要求添加的这个新标签必须是块级元素。</p></blockquote><p><strong>2.父级添加overflow属性</strong></p><p>可以给父元素添加<strong>overflow</strong>属性，将其属性值设置为<strong>hidden</strong>、<strong>auto</strong>或者<strong>scroll</strong>。</p><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li></ul><p><strong>3.父级添加after伪元素</strong></p><p><strong>:after</strong>方式是额外标签法的升级版。也是给父元素添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">    content : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;<span class="comment">/* IE6、7专有*/</span></span><br><span class="line">   *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：低版本浏览器无法使用</li><li>代表网站：百度、淘宝、网易等</li></ul><p><strong>4.父级添加双伪元素</strong></p><p>也是给父元素添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:before,.clearfix:after &#123;</span><br><span class="line">    content : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">    clear :both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：代码更简洁</li><li>缺点：低版本浏览器无法使用</li><li>代表网站：小米、腾讯等</li></ul><p><strong>总结</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210728122502.png" alt="QQ截图20210728122502" style="zoom:80%;" /><hr><h2 id="2-20PS切图"><a href="#2-20PS切图" class="headerlink" title="2.20PS切图"></a>2.20PS切图</h2><p><strong>1.常见的图片格式</strong></p><p>jpg图像格式                                     gif图像格式                                    png图像格式                                    PSD图像格式</p><p><strong>2.PS切图的方式</strong></p><ul><li><strong>图层切图</strong></li></ul><p>最简单的切图方式：右击图层→快速导出为PNG</p><p>很多情况下，我们需要合并图层再导出：</p><p>1.选中需要的图层：图层菜单→合并图层(ctrl+e)</p><p>2.右击→快速导出为PNG</p><ul><li>切片切图</li></ul><p>1.利用切片选中图片</p><ul><li>利用切片工具手动划出</li></ul><p>2.导出选中的图片</p><p>文件菜单→导出→存储为web设备所用格式→选择我们要的图片格式→存储</p><ul><li>PS插件切图</li></ul><p><strong>Cutterman</strong>插件</p><hr><h2 id="2-21学成在线案例"><a href="#2-21学成在线案例" class="headerlink" title="2.21学成在线案例"></a>2.21学成在线案例</h2><p><strong>1.CSS属性书写顺序(重点)</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210728163850.png" alt="QQ截图20210728163850"></p><p><strong>2.网页布局整体思路</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210728164220.png" alt="QQ截图20210728164220"></p><p>导航栏注意点：</p><p><strong>实际开发中，我们不会直接用链接a而是用li包含链接(li+a)的做法</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210728171924.png" alt="QQ截图20210728171924"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学成在线首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head w&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/logo-s.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>职业规划<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sou1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;i1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入关键字&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sou2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;i2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/btn.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headphoto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>qq-qinfei<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- banner区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;heihe&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>前端开发<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>后端开发<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>移动开发<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>人工智能<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商业预测<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>云计算&amp;大数据<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>运维&amp;从测试<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>UI设计<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>产品<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 精品推荐1区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text w&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;t1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jingpin&quot;</span>&gt;</span>精品推荐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>JQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Spark<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>JavaWeb<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;t2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xingqu&quot;</span>&gt;</span>修改兴趣<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- box区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box w&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-hd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>精品推荐<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>查看全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-bd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/icon1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Think PHP 5.0 博客系统实战项目演练<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> .1125人在学习</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- footer区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/logo-s.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>学成在线致力于普及中国最好的教育它与中国一流大学和机构合作提供在线课程。<span class="tag">&lt;<span class="name">br</span>&gt;</span> 2017年XTCG Inc.保留所有权利。-沪ICP备15025210<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span>下载app<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关于学生网<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>管理团队<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>工作机会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>客户服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>帮助<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关于学生网<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>管理团队<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>工作机会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>客户服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>帮助<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关于学生网<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>管理团队<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>工作机会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>客户服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>帮助<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f3f5f7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">198px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head1</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">294px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head1</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft YaHei&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#050505</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head1</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head1</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head1</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#47aaff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#47aaff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head2</span> <span class="selector-class">.i1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">345px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#bfbfcd</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head</span> <span class="selector-class">.head2</span> <span class="selector-class">.i1</span> &#123;</span><br><span class="line">    <span class="attribute">border-right</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head2</span> <span class="selector-class">.i2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sou1</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sou2</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head3</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">99.95px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/tou_03.png</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head3</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666666</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft YaHei&#x27;</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">410px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1c036c</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/banner_03.png</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: center top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.heihe</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">410px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">132px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.heihe</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.heihe</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft YaHei&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2.3em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.heihe</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.heihe</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0aa4ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> -<span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> <span class="selector-class">.t1</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> <span class="selector-class">.t1</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16.5px</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16.5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> <span class="selector-class">.t1</span> <span class="selector-class">.jingpin</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.t2</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.t2</span> <span class="selector-class">.xingqu</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00b8ff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-hd</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-hd</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#494949</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-hd</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a5a5a5</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1225px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">228px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">270px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#050505</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-class">.info</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-class">.info</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7c2d</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">415px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-class">.app</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">118px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#00a4ff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">33px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.links</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.links</span> <span class="selector-tag">dl</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.links</span> <span class="selector-tag">dl</span> <span class="selector-tag">dt</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.links</span> <span class="selector-tag">dl</span> <span class="selector-tag">dd</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-22定位"><a href="#2-22定位" class="headerlink" title="2.22定位"></a>2.22定位</h2><p><strong>定位</strong>：将盒子定在某一位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。</p><p>定位可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p><p>定位由两部分组成：<strong>定位模式</strong>和<strong>边偏移</strong></p><ul><li>定位模式用于指定一个元素在文档中的定位方式。</li><li>边偏移决定了该元素的最终位置。</li></ul><p><strong>1.定位模式</strong></p><p>定位模式决定元素的定位方式，它通过CSS的<strong>position</strong>属性来设置，其值可以分为四个。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210729163614.png" alt="QQ截图20210729163614" style="zoom:80%;" /><p><strong>2.边偏移</strong></p><p>边偏移就是定位的盒子移动到的最终位置。有top、bottom、left和right 4个属性。</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210729164033.png" alt="QQ截图20210729164033" style="zoom:80%;" /><p><strong>1.静态定位static(了解)</strong></p><p>静态定位是元素的默认定位方式，<strong>无定位的意思</strong></p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span>: static; &#125;</span><br></pre></td></tr></table></figure><ul><li>静态定位按照标准流特性摆放位置，它没有边偏移</li><li>静态定位在布局时很少用到</li></ul><p><strong>2.相对定位relative(重要)</strong></p><p><strong>相对定位</strong>是元素在移动位置的时候，是相对于它<strong>原来的位置</strong>来说的。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span>: relative; &#125;</span><br></pre></td></tr></table></figure><p><em>特点</em></p><ul><li>它是相对于自己原来的位置移动的(<strong>移动位置的时候参照点是自己原来的位置</strong>)</li><li>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它(<strong>不脱标，继续保留原来的位置</strong>)</li></ul><p><strong>3.绝对定位absolut(重要)</strong></p><p><strong>绝对定位</strong>是元素在移动位置时，是相对于它<strong>祖先元素</strong>来说的。</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span>: absolute; &#125;</span><br></pre></td></tr></table></figure><p><em>特点</em></p><ul><li>如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器为准定位(Document文档)</li><li>如果祖先元素有定位(相对、绝对、固定定位)，则以最近一级是有定位的祖先元素为参考点移动位置</li><li>绝对定位<strong>不再占有原先的位置</strong>(脱标)</li></ul><p><strong>子绝父相</strong></p><p>子级使用绝对定位(absolute)，父级则需要相对定位(relative)</p><ul><li>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子</li><li>父盒子需要加定位限制子盒子在父盒子内显示</li><li>父盒子布局时，需要占有位置，因此父盒子只能是相对定位</li></ul><p>所以相对定位经常用来作为绝对定位的父级</p><p>总结：<strong>因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位</strong></p><p>不绝对，如果父元素不需要占有位置，子绝父绝也会遇到</p><p><strong>4.固定定位fixed(重要)</strong></p><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span>: fixed; &#125;</span><br></pre></td></tr></table></figure><p><em>特点</em></p><p>1.以浏览器的可视窗口为参照点移动元素</p><ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li></ul><p>2.固定定位<strong>不再占有原先的位置</strong></p><p>固定定位也是脱标的，其实固定定位也可以看做一种特殊的绝对定位。</p><p><strong>3.固定定位小技巧：固定在版心右侧位置</strong></p><p>小算法：</p><ul><li>让固定定位的盒子left:50%，走到浏览器可视区(也可以看做版心)的一半位置。</li><li>让固定定位的盒子margin-left:版心宽度的一半距离。多走  版心宽度的一半位置</li></ul><p>就可以让固定定位的盒子贴着版心右侧对齐了</p><p><strong>5.粘性定位sticky</strong></p><p>粘性定位可以被认为是相对定位和固定定位的混合</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span>: sticky; <span class="attribute">top</span>: <span class="number">10px</span> &#125;</span><br></pre></td></tr></table></figure><p><em>特点</em></p><ul><li>以浏览器的可视窗口为参照点移动元素(固定定位特点)</li><li>粘性定位<strong>占有原先的位置</strong>(相对定位特点)</li><li>必须添加top、left、right、bottom其中一个才有效</li></ul><p><strong>定位总结</strong></p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210729190858.png" alt="QQ截图20210729190858" style="zoom:80%;" /><p><strong>6.定位叠放次序z-index</strong></p><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用<strong>z-index</strong>来控制盒子的前后次序(z轴)</p><p><em>语法</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;<span class="attribute">z-index</span>: <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li>数值可以是正整数、负整数或者0，默认是auto，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来者居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才有z-index属性</li></ul><p><strong>7.绝对定位的盒子居中</strong></p><p>加了绝对定位的盒子不能通过**margin:0 auto;**水平居中，但是可以通过以下计算方法实现水平和垂直居中。</p><ul><li>left:50%;    让盒子的左侧移动到父级元素的水平中心位置</li><li>margin-left:-100px;   让盒子向左移动自身宽度的一半</li></ul><p><strong>8.定位特殊特性</strong></p><p>绝对定位和固定定位也和浮动类似</p><ul><li>行内元素添加绝对或固定定位，可以直接设置高度和宽度</li><li>块级元素添加绝对或固定定位，如果不给宽度和高度，默认大小是内容的大小</li></ul><p><strong>9.脱标的盒子不会触发外边距塌陷</strong></p><p>浮动元素、绝对定位或固定定位的元素都不会触发外边距合并的问题。</p><p><strong>10.绝对定位或者固定定位会完全压住盒子</strong></p><p>浮动元素不同，只会压住它下面的标准流盒子，但是不会压住下面标准流盒子里面的文字或者图片。</p><p>但是绝对定位或者固定定位会压住下面标准流所有的内容。</p><p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。文字会围绕浮动元素。</p><hr><h2 id="2-23综合案例"><a href="#2-23综合案例" class="headerlink" title="2.23综合案例"></a>2.23综合案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        * &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.tb-promo</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.tb-promo</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.prev</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: -<span class="number">15px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.prev</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-top-right-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom-right-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-top-left-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom-left-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.promo-nav</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: -<span class="number">35px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.promo-nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">2px</span> <span class="number">3px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.promo-nav</span> <span class="selector-class">.chengse</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ff5000</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tb-promo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./O1CN016VwHel1dQqPXjgJIt_!!6000000003731-0-octopus.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;promo-nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;chengse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-24网页布局总结"><a href="#2-24网页布局总结" class="headerlink" title="2.24网页布局总结"></a>2.24网页布局总结</h2><p>通过盒子模型，清楚知道大部分html标签是一个盒子。</p><p>通过CSS浮动、定位可以让每个盒子排列成网页。</p><p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。</p><p>1.标准流</p><p>可以让盒子上下排列或者左右排列，<strong>垂直的块级盒子显示就用标准流布局</strong>。</p><p>2.浮动</p><p>可以让多个块级元素一行显示或者左右对齐盒子，<strong>多个块级盒子水平显示就用浮动布局</strong>。</p><p>3.定位</p><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。<strong>如果元素自由在某个盒子内移动就用定位布局</strong>。</p><hr><h2 id="2-25元素的显示与隐藏"><a href="#2-25元素的显示与隐藏" class="headerlink" title="2.25元素的显示与隐藏"></a>2.25元素的显示与隐藏</h2><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p><p>本质：<strong>让一个元素在页面中隐藏或者显示出来</strong>。</p><ul><li><p>display显示隐藏                   但是不保留位置</p></li><li><p>visbility显示隐藏                   但是保留原来的位置</p></li><li><p>overflow溢出显示隐藏          但是只是对于溢出的部分处理</p></li></ul><p><strong>1.display属性</strong></p><p>display属性用于设置一个元素应如何显示</p><ul><li>display:none; 隐藏对象</li><li>display:block; 除了转换为块级元素之外，同时还有显示元素的意思</li></ul><p>display隐藏元素后，不再占有原来的位置。</p><p>后面应用及其广泛，搭配JS可以做很多的网页特效。</p><p><strong>2.visbility可见性</strong></p><p>visbility属性用于指定一个元素应可见还是隐藏。</p><ul><li>visbility: visible; 元素可视</li><li>visbility: hidden; 元素隐藏</li></ul><p><strong>visbility隐藏元素后，继续占有原来的位置。</strong></p><p>如果隐藏元素想要原来的位置，就用visbility: hidden;</p><p>如果隐藏元素不想要原来的位置，就用display: none;(用处更多 重点)</p><p><strong>3.overflow溢出</strong></p><p>overflow属性指定了如果内容溢出一个元素的框(超过其指定高度及宽度)时，会发生什么。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210730100343.png" alt="QQ截图20210730100343"></p><p>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</p><p>但是如果有定位的盒子，请慎用overflow:hidden;因为它会隐藏多余的部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-Html-5&quot;&gt;&lt;a href=&quot;#第一章-Html-5&quot; class=&quot;headerlink&quot; title=&quot;第一章   Html 5&quot;&gt;&lt;/a&gt;第一章   Html 5&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1网页&quot;&gt;&lt;a href=&quot;#1-1网页&quot; </summary>
      
    
    
    
    <category term="前端" scheme="https://www.stq555.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML、CSS" scheme="https://www.stq555.com/tags/HTML%E3%80%81CSS/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="https://www.stq555.com/2022/01/14/JDBC/"/>
    <id>https://www.stq555.com/2022/01/14/JDBC/</id>
    <published>2022-01-14T05:26:23.000Z</published>
    <updated>2022-01-14T05:31:41.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-JDBC简介"><a href="#第一章-JDBC简介" class="headerlink" title="第一章  JDBC简介"></a>第一章  JDBC简介</h1><hr><h2 id="1-1概念"><a href="#1-1概念" class="headerlink" title="1.1概念"></a>1.1概念</h2><ul><li>概念：Java DataBase Connectivity   Java 数据库连接  Java语言操作数据库</li><li>JDBC本质：其实是官方(SUN公司)定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</li></ul><hr><h2 id="1-2步骤"><a href="#1-2步骤" class="headerlink" title="1.2步骤"></a>1.2步骤</h2><p>1.导入驱动jar包</p><ul><li>复制jar包到项目的libs目录下</li><li>右键–&gt;Add As Library</li></ul><p>2.注册驱动</p><p>3.获取数据库连接对象Connection</p><p>4.定义sql</p><p>5.获取执行sql语句的对象 Statement</p><p>6.执行sql，接受返回结果</p><p>7.处理结果</p><p>8.释放资源</p><hr><h2 id="1-3代码实现"><a href="#1-3代码实现" class="headerlink" title="1.3代码实现"></a>1.3代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.导入驱动jar包</span></span><br><span class="line">        <span class="comment">// 2.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取数据库连接对象Connection</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/students&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;填自己的密码&quot;</span>);</span><br><span class="line">        <span class="comment">//4.定义sql</span></span><br><span class="line">        String sql=<span class="string">&quot;update account set balance=500 where username=&#x27;张无忌&#x27;&quot;</span>;</span><br><span class="line">        <span class="comment">//5.获取执行sql语句的对象 Statement</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//6.执行sql，接受返回结果</span></span><br><span class="line">        <span class="keyword">int</span> i = statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//7.处理结果</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//8.释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20211001181141.png" alt="QQ截图20211001181141"></p><hr><h1 id="第二章-详解各个对象"><a href="#第二章-详解各个对象" class="headerlink" title="第二章  详解各个对象"></a>第二章  详解各个对象</h1><hr><h2 id="2-1DriverManager"><a href="#2-1DriverManager" class="headerlink" title="2.1DriverManager"></a>2.1DriverManager</h2><p><strong>驱动管理对象</strong></p><p><strong>1.功能</strong></p><ul><li>注册驱动：告诉程序该使用哪一个数据库驱动jar</li></ul><p>** <code>static void registerDriver(Driver driver)</code>：**注册与给定的驱动程序 DriverManager </p><p>写代码使用:class.forName( “com.mysql.jdbc.Driver” );</p><p>通过查看源码发现:在com.mysql.jdbc.Driver类中存在静态代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">     &#125; <span class="keyword">catch</span> (sQLException E) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( <span class="string">&quot;can&#x27;t register driver!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：mysql5之后的驱动jar包可以忽略注册驱动的步骤。</p></blockquote><ul><li>获取数据库连接</li></ul><p><strong>方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url,String user,String password)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p>1.url：指定连接的路径</p><ul><li>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</li><li>例子：jdbc:mysql://localhost:3306/students</li><li>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</li></ul><p>2.user：用户名</p><p>3.password：密码</p><hr><h2 id="2-2Connection"><a href="#2-2Connection" class="headerlink" title="2.2Connection"></a>2.2Connection</h2><p><strong>数据库连接对象</strong></p><p><strong>一.功能</strong></p><p><strong>1.获取执行sql的对象</strong></p><ul><li>** <code> Statement createStatement()</code>**</li><li>** <code> PreparedStatement prepareStatement(String sql)</code>**</li></ul><p><strong>2.管理事务</strong></p><ul><li>开启事务：** <code> setAutoCommit(boolean autoCommit)</code>**：调用该方法设置参数为false，即开启事务</li><li>提交事务：** <code> commit()</code>**</li><li>回滚事务：** <code> rollback()</code>**</li></ul><hr><h2 id="2-3Statement"><a href="#2-3Statement" class="headerlink" title="2.3Statement"></a>2.3Statement</h2><p><strong>执行sql的对象</strong></p><p>1.执行sql</p><ul><li>** <code> boolean execute(String sql)</code>**：可以执行任意的sql(了解)</li><li>** <code> int executeUpdate(String sql)</code>**：执行DML(insert、update、delete)语句、DDL(create、alter、drop)语句</li></ul><p>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</p><ul><li>** <code> ResultSet executeQuery(String sql)</code>**：执行DQL(select)语句</li></ul><hr><h2 id="2-4ResultSet"><a href="#2-4ResultSet" class="headerlink" title="2.4ResultSet"></a>2.4ResultSet</h2><p><strong>结果集对象</strong></p><p>ResultSet：结果集对象，封装查询结果</p><ul><li>next()：游标向下移动一行</li><li>getXXX(参数)：获取数据</li></ul><p>Xxx：代表数据类型   如：int getInt()       String getString()</p><ul><li>参数：</li></ul><p>1.int：代表列的编号，从1开始     如：getString(1)</p><p>2.String：代表列名称。 如：getDouble(“balance”)</p><ul><li><p>** <code> boolean next()</code>**：游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</p></li><li><p>注意：</p></li></ul><p>1.游标向下移动一行</p><p>2.判断是否有数据</p><p>3.获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行DQL语言</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM account&quot;</span>;</span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///students&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;填自己的密码&quot;</span>);</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> anInt = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">                String username = resultSet.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> aDouble = resultSet.getDouble(<span class="number">3</span>);</span><br><span class="line">                System.out.println(anInt+<span class="string">&quot;---&quot;</span>+username+<span class="string">&quot;---&quot;</span>+aDouble);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-5PreparedStatement"><a href="#2-5PreparedStatement" class="headerlink" title="2.5PreparedStatement"></a>2.5PreparedStatement</h2><p><strong>执行sql的对象</strong></p><p>1.SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</p><ul><li>输入用户随便，输入密码：a’ or ‘a’=’a</li><li>sql：SELECT * FROM USER  WHERE username=’fhjjhishaid’and password=’a’ or ‘a’=’a’</li></ul><p>2.解决sql注入问题：使用PreparedStatement对象来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.priv.demo03util.Demo01JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        String username = scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password = scanner.nextLine();</span><br><span class="line">        <span class="keyword">boolean</span> login = <span class="keyword">new</span> Demo08JDBC().login(username, password);</span><br><span class="line">        <span class="keyword">if</span>(login)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;******用户名或密码错误！******&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(username==<span class="keyword">null</span>||password==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = Demo01JDBCUtils.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM USER  WHERE username= ? and password= ? &quot;</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,username);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>,password);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">return</span> resultSet.next();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            Demo01JDBCUtils.close(resultSet,preparedStatement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：后期都会使用preparedStatement来完成增删改查的所有操作</p><ul><li>可以防止SQL注入</li><li>效率更高</li></ul></blockquote><hr><h1 id="第三章-JDBC练习"><a href="#第三章-JDBC练习" class="headerlink" title="第三章  JDBC练习"></a>第三章  JDBC练习</h1><hr><h2 id="3-1insert语句"><a href="#3-1insert语句" class="headerlink" title="3.1insert语句"></a>3.1insert语句</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * account表 添加一条记录 insert语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection =<span class="keyword">null</span>;</span><br><span class="line">        Statement  statement =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            String sql=<span class="string">&quot;insert into account values(NULL,&#x27;张三&#x27;,1800)&quot;</span>;</span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///students&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;填自己的密码&quot;</span>);</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="keyword">int</span> count = statement.executeUpdate(sql);</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//避免空指针异常</span></span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2update语句"><a href="#3-2update语句" class="headerlink" title="3.2update语句"></a>3.2update语句</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * account表 修改一条记录 update语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection =<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            String sql=<span class="string">&quot;update account set balance=500 where username=&#x27;张三&#x27;&quot;</span>;</span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///students&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;填自己的密码&quot;</span>);</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="keyword">int</span> i = statement.executeUpdate(sql);</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3delete语句"><a href="#3-3delete语句" class="headerlink" title="3.3delete语句"></a>3.3delete语句</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * account表 删除一条记录 delete语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            String sql=<span class="string">&quot;DELETE FROM ACCOUNT WHERE USERNAME=&#x27;张三&#x27;&quot;</span>;</span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///students&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;填自己的密码&quot;</span>);</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="keyword">int</span> count = statement.executeUpdate(sql);</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：返回的count值是受影响的行数</p></blockquote><hr><h2 id="3-4select语句"><a href="#3-4select语句" class="headerlink" title="3.4select语句"></a>3.4select语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">employees</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> employee_id;</span><br><span class="line">    <span class="keyword">private</span> String first_name;</span><br><span class="line">    <span class="keyword">private</span> String last_name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phone_number;</span><br><span class="line">    <span class="keyword">private</span> String job_id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> commission_pct;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> manager_id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> department_id;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">employees</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmployee_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employee_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmployee_id</span><span class="params">(<span class="keyword">int</span> employee_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.employee_id = employee_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirst_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirst_name</span><span class="params">(String first_name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first_name = first_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLast_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLast_name</span><span class="params">(String last_name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.last_name = last_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone_number</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone_number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone_number</span><span class="params">(String phone_number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone_number = phone_number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob_id</span><span class="params">(String job_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job_id = job_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCommission_pct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commission_pct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommission_pct</span><span class="params">(<span class="keyword">double</span> commission_pct)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.commission_pct = commission_pct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getManager_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setManager_id</span><span class="params">(<span class="keyword">int</span> manager_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manager_id = manager_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDepartment_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> department_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartment_id</span><span class="params">(<span class="keyword">int</span> department_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.department_id = department_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(Date hiredate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Demo01List&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;employee_id=&quot;</span> + employee_id +</span><br><span class="line">                <span class="string">&quot;, first_name=&#x27;&quot;</span> + first_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, last_name=&#x27;&quot;</span> + last_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, emile=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, phone_number=&#x27;&quot;</span> + phone_number + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, job_id=&#x27;&quot;</span> + job_id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&quot;, commission_pct=&quot;</span> + commission_pct +</span><br><span class="line">                <span class="string">&quot;, manager_id=&quot;</span> + manager_id +</span><br><span class="line">                <span class="string">&quot;, department_id=&quot;</span> + department_id +</span><br><span class="line">                <span class="string">&quot;, hiredate=&#x27;&quot;</span> + hiredate + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">employees</span><span class="params">(<span class="keyword">int</span> employee_id, String first_name, String last_name, String emile, String phone_number, String job_id, <span class="keyword">float</span> salary, <span class="keyword">float</span> commission_pct, <span class="keyword">int</span> manager_id, <span class="keyword">int</span> department_id, Date hiredate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.employee_id = employee_id;</span><br><span class="line">        <span class="keyword">this</span>.first_name = first_name;</span><br><span class="line">        <span class="keyword">this</span>.last_name = last_name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.phone_number = phone_number;</span><br><span class="line">        <span class="keyword">this</span>.job_id = job_id;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.commission_pct = commission_pct;</span><br><span class="line">        <span class="keyword">this</span>.manager_id = manager_id;</span><br><span class="line">        <span class="keyword">this</span>.department_id = department_id;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.priv.demo02JDBC.employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;employees&gt; all = <span class="keyword">new</span> Demo06JDBC().findAll();</span><br><span class="line">        Iterator&lt;employees&gt; iterator=all.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *查询所有employees对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;employees&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line">        List&lt;employees&gt; list=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM EMPLOYEES&quot;</span>;</span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///myemployees&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;填自己的密码&quot;</span>);</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            employees employees=<span class="keyword">null</span>;</span><br><span class="line">            list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> employee_id = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">                String first_name = resultSet.getString(<span class="string">&quot;first_name&quot;</span>);</span><br><span class="line">                String last_name = resultSet.getString(<span class="string">&quot;last_name&quot;</span>);</span><br><span class="line">                String email = resultSet.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">                String phone_number = resultSet.getString(<span class="string">&quot;phone_number&quot;</span>);</span><br><span class="line">                String job_id = resultSet.getString(<span class="string">&quot;job_id&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> salary = resultSet.getDouble(<span class="number">7</span>);</span><br><span class="line">                <span class="keyword">double</span> commission_pct = resultSet.getDouble(<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">int</span> manager_id = resultSet.getInt(<span class="number">9</span>);</span><br><span class="line">                <span class="keyword">int</span> department_id = resultSet.getInt(<span class="number">10</span>);</span><br><span class="line">                Date hiredate = resultSet.getDate(<span class="string">&quot;hiredate&quot;</span>);</span><br><span class="line">                employees=<span class="keyword">new</span> employees();</span><br><span class="line">                employees.setEmployee_id(employee_id);</span><br><span class="line">                employees.setFirst_name(first_name);</span><br><span class="line">                employees.setLast_name(last_name);</span><br><span class="line">                employees.setEmail(email);</span><br><span class="line">                employees.setPhone_number(phone_number);</span><br><span class="line">                employees.setJob_id(job_id);</span><br><span class="line">                employees.setSalary(salary);</span><br><span class="line">                employees.setCommission_pct(commission_pct);</span><br><span class="line">                employees.setManager_id(manager_id);</span><br><span class="line">                employees.setDepartment_id(department_id);</span><br><span class="line">                employees.setHiredate(hiredate);</span><br><span class="line">                list.add(employees);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第四章-JDBC工具类"><a href="#第四章-JDBC工具类" class="headerlink" title="第四章  JDBC工具类"></a>第四章  JDBC工具类</h1><hr><h2 id="4-1工具类实现"><a href="#4-1工具类实现" class="headerlink" title="4.1工具类实现"></a>4.1工具类实现</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///students</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">密码指定是不能说~</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            ClassLoader classLoader = Demo01JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL resource = classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            String path = resource.getPath();</span><br><span class="line">            properties.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">            url=properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user=properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password=properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver=properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet,Statement statement, Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.priv.demo02JDBC.employees;</span><br><span class="line"><span class="keyword">import</span> com.priv.demo03util.Demo01JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;employees&gt; all = <span class="keyword">new</span> Demo06JDBC().findAll();</span><br><span class="line">        Iterator&lt;employees&gt; iterator=all.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *演示JDBC工具类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;employees&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line">        List&lt;employees&gt; list=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection connection1 = Demo01JDBCUtils.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM EMPLOYEES&quot;</span>;</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            employees employees=<span class="keyword">null</span>;</span><br><span class="line">            list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> employee_id = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">                String first_name = resultSet.getString(<span class="string">&quot;first_name&quot;</span>);</span><br><span class="line">                String last_name = resultSet.getString(<span class="string">&quot;last_name&quot;</span>);</span><br><span class="line">                String email = resultSet.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">                String phone_number = resultSet.getString(<span class="string">&quot;phone_number&quot;</span>);</span><br><span class="line">                String job_id = resultSet.getString(<span class="string">&quot;job_id&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> salary = resultSet.getDouble(<span class="number">7</span>);</span><br><span class="line">                <span class="keyword">double</span> commission_pct = resultSet.getDouble(<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">int</span> manager_id = resultSet.getInt(<span class="number">9</span>);</span><br><span class="line">                <span class="keyword">int</span> department_id = resultSet.getInt(<span class="number">10</span>);</span><br><span class="line">                Date hiredate = resultSet.getDate(<span class="string">&quot;hiredate&quot;</span>);</span><br><span class="line">                employees=<span class="keyword">new</span> employees();</span><br><span class="line">                employees.setEmployee_id(employee_id);</span><br><span class="line">                employees.setFirst_name(first_name);</span><br><span class="line">                employees.setLast_name(last_name);</span><br><span class="line">                employees.setEmail(email);</span><br><span class="line">                employees.setPhone_number(phone_number);</span><br><span class="line">                employees.setJob_id(job_id);</span><br><span class="line">                employees.setSalary(salary);</span><br><span class="line">                employees.setCommission_pct(commission_pct);</span><br><span class="line">                employees.setManager_id(manager_id);</span><br><span class="line">                employees.setDepartment_id(department_id);</span><br><span class="line">                employees.setHiredate(hiredate);</span><br><span class="line">                list.add(employees);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Demo01JDBCUtils.close(resultSet,statement,connection);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-2登录案例"><a href="#4-2登录案例" class="headerlink" title="4.2登录案例"></a>4.2登录案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.priv.demo03util.Demo01JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        String username = scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password = scanner.nextLine();</span><br><span class="line">        <span class="keyword">boolean</span> login = <span class="keyword">new</span> Demo08JDBC().login(username, password);</span><br><span class="line">        <span class="keyword">if</span>(login)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;******用户名或密码错误！******&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(username==<span class="keyword">null</span>||password==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = Demo01JDBCUtils.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM USER  WHERE username=&#x27;&quot;</span>+username+<span class="string">&quot;&#x27;and password=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">return</span> resultSet.next();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            Demo01JDBCUtils.close(resultSet,statement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第五章-JDBC控制事务"><a href="#第五章-JDBC控制事务" class="headerlink" title="第五章  JDBC控制事务"></a>第五章  JDBC控制事务</h1><hr><h2 id="5-1概述"><a href="#5-1概述" class="headerlink" title="5.1概述"></a>5.1概述</h2><hr><p>1.事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p><p>2.操作：</p><ul><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ul><p>3.使用Connection对象来管理事务</p><ul><li><p>开启事务：** <code> setAutoCommit(boolean autoCommit)</code>**：调用该方法设置参数为false，即开启事务</p><p><code>在执行sql之前开启事务</code></p></li><li><p>提交事务：** <code> commit()</code>**</p><p><code>当所有sql都执行完提交事务</code></p></li><li><p>回滚事务：** <code> rollback()</code>**</p><p><code>在catch中回滚事务</code></p></li></ul><hr><h2 id="5-2实现案例"><a href="#5-2实现案例" class="headerlink" title="5.2实现案例"></a>5.2实现案例</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.priv.demo03util.Demo01JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *事务操作：转账</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10JDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement1=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement2=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = Demo01JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            String sql1=<span class="string">&quot;update account set balance=balance-? where id=?&quot;</span>;</span><br><span class="line">            String sql2=<span class="string">&quot;update account set balance=balance+? where id=?&quot;</span>;</span><br><span class="line">            preparedStatement1 = connection.prepareStatement(sql1);</span><br><span class="line">            preparedStatement2 = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement1.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            preparedStatement1.setInt(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            preparedStatement2.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            preparedStatement2.setInt(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            preparedStatement1.executeUpdate();</span><br><span class="line">            <span class="comment">//手动制造异常</span></span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">            preparedStatement2.executeUpdate();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(connection!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    connection.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            Demo01JDBCUtils.close(preparedStatement1,connection);</span><br><span class="line">            Demo01JDBCUtils.close(preparedStatement2,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第六章-数据库连接池"><a href="#第六章-数据库连接池" class="headerlink" title="第六章  数据库连接池"></a>第六章  数据库连接池</h1><hr><h2 id="6-1概述"><a href="#6-1概述" class="headerlink" title="6.1概述"></a>6.1概述</h2><hr><p><strong>1.概念：</strong>其实就是一个容器(集合)，存放数据库连接的容器。当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p><p><strong>2.好处：</strong></p><ul><li>节约资源</li><li>用户访问高效</li></ul><p><strong>3.实现</strong></p><p>1.标准接口：DataSource   javax.sql包下</p><p>​          1.方法：</p><p>​           获取连接：getConnection()</p><p>​           归还连接：Connection.close() 如果连接对象Connection时从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</p><p>2.一般我们不去实现它，由数据库厂商来实现</p><ul><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供</li></ul><hr><h2 id="6-2C3P0"><a href="#6-2C3P0" class="headerlink" title="6.2C3P0"></a>6.2C3P0</h2><hr><p><strong>步骤：</strong></p><p>1.导入jar包：两个 c3p0-0.9.5.5.jar和mchange-commons-java-0.2.19.jar</p><p>2.定义配置文件：</p><ul><li>名称：c3p0.properties或者c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul><p>3.创建核心对象 数据库连接池对象  ComboPooledDataSource</p><p>4.获取连接：getConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04JDBCTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C3P0的演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01C3P0</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据库连接池对象</span></span><br><span class="line">        DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        Connection connection = ds.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-3Druid"><a href="#6-3Druid" class="headerlink" title="6.3Druid"></a>6.3Druid</h2><hr><p><strong>步骤：</strong></p><p>1.导入jar包：druid-1.0.9.jar</p><p>2.定义配置文件</p><ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul><p>3.获取数据库连接池对象：通过工厂类来获取  DruidDataSourceFactory</p><p>4.获取连接：getConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04JDBCTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Druid</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.定义配置文件</span></span><br><span class="line">        <span class="comment">//3.加载配置文件</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        ClassLoader classLoader = Demo02Druid.class.getClassLoader();</span><br><span class="line">        InputStream resourceAsStream = classLoader.getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        properties.load(resourceAsStream);</span><br><span class="line">        <span class="comment">//4.获取连接池对象</span></span><br><span class="line">        DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        <span class="comment">//5.获取连接</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>工具类</strong></p><p>1.定义一个类 JDBCUtils</p><p>2.提供静态代码块加载配置文件，初始化连接池对象</p><p>3.提供方法</p><ul><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04JDBCTemplate;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties=<span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(JDBCUtils.class.getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            dataSource= DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet,Statement statement, Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        close(statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04JDBCTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用新的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Druid</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection =<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;insert into account value(null,?,?) &quot;</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>,<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">int</span> count = preparedStatement.executeUpdate();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(preparedStatement,connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第七章-Spring-JDBC"><a href="#第七章-Spring-JDBC" class="headerlink" title="第七章   Spring JDBC"></a>第七章   Spring JDBC</h1><hr><h2 id="7-1JDBCTemplate简介"><a href="#7-1JDBCTemplate简介" class="headerlink" title="7.1JDBCTemplate简介"></a>7.1JDBCTemplate简介</h2><hr><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p><p><strong>步骤：</strong></p><p>1.导入jar包</p><p>2.创建JDBCTemplate对象。依赖于数据源DataSource</p><ul><li>```java<br>JdbcTemplate jdbcTemplate=new JdbcTemplate(ds);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.调用JDBCTemplate的方法来完成CRUD的操作</span><br><span class="line"></span><br><span class="line">* ** `update():`**执行DML语句。增、删、改语句</span><br><span class="line">* ** `queryForMap():`**查询结果将结果集封装为Map集合</span><br><span class="line"></span><br><span class="line">注意：这个方法查询的结果集长度只能是1</span><br><span class="line"></span><br><span class="line">* ** `queryForList():`**查询结果将结果集封装为List集合</span><br><span class="line"></span><br><span class="line">注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</span><br><span class="line"></span><br><span class="line">* ** `query():`**查询结果将结果集封装为JavaBean集合</span><br><span class="line"></span><br><span class="line">query的参数：RowMapper</span><br><span class="line"></span><br><span class="line">一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</span><br><span class="line"></span><br><span class="line">new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</span><br><span class="line"></span><br><span class="line">* ** `queryForObject():`**查询结果将结果集封装为对象</span><br><span class="line"></span><br><span class="line">一般用于聚合函数的查询</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.priv.demo04JDBCTemplate;</span><br><span class="line"></span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * JDBCTemplate入门</span><br><span class="line"> */</span><br><span class="line">public class Demo04JDBCTemplate &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //导入jar包</span><br><span class="line">        //创建JdbcTemplate对象</span><br><span class="line">        JdbcTemplate jdbcTemplate=new JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">        String sql=&quot;update account set balance=5000 where id=?&quot;;</span><br><span class="line">        //调用方法</span><br><span class="line">        int count = jdbcTemplate.update(sql,3);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="7-2JDBCTemplate执行DML语句"><a href="#7-2JDBCTemplate执行DML语句" class="headerlink" title="7.2JDBCTemplate执行DML语句"></a>7.2JDBCTemplate执行DML语句</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04JDBCTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例一：修改1号数据的balance为5000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05JDBCTemplateP</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">        String sql=<span class="string">&quot;update account set balance=5000 where id=?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> update = jdbcTemplate.update(sql, <span class="number">1</span>);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例二：添加一条记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">        String sql=<span class="string">&quot;insert into account value(null ,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = jdbcTemplate.update(sql, <span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例三：删除刚才添加的记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">        String sql=<span class="string">&quot;delete from account where id=?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = jdbcTemplate.update(sql, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-3JDBCTemplate执行DQL语句"><a href="#7-3JDBCTemplate执行DQL语句" class="headerlink" title="7.3JDBCTemplate执行DQL语句"></a>7.3JDBCTemplate执行DQL语句</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04JDBCTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06JDBCTemplateP2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 案例一：查询id为1的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">        String sql=<span class="string">&quot;select * from account where id=?&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; stringObjectMap = jdbcTemplate.queryForMap(sql, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        System.out.println(stringObjectMap);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例二：查询所有记录，将其封装为List集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql=<span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">    <span class="keyword">for</span>(Map&lt;String, Object&gt; stringObjectMap:maps)&#123;</span><br><span class="line">        System.out.println(stringObjectMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *案例三：查询所有记录，将其封装为account对象的List集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql=<span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    List&lt;account&gt; list=jdbcTemplate.query(sql, <span class="keyword">new</span> RowMapper&lt;account&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> account <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            account account=<span class="keyword">new</span> account();</span><br><span class="line">            <span class="keyword">int</span> id = account.getId(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            String username = account.getUsername();</span><br><span class="line">            <span class="keyword">int</span> balance = account.getBalance();</span><br><span class="line"></span><br><span class="line">            account.setId(id);</span><br><span class="line">            account.setUsername(username);</span><br><span class="line">            account.setBalance(balance);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(account account:list)&#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql=<span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">    List&lt;account&gt; query = jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;account&gt;(account.class));</span><br><span class="line">    <span class="keyword">for</span>(account account:query)&#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *案例四：查询总记录数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql=<span class="string">&quot;select count(id) from account&quot;</span>;</span><br><span class="line">    Long aLong = jdbcTemplate.queryForObject(sql, <span class="keyword">long</span>.class);</span><br><span class="line">    System.out.println(aLong);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-JDBC简介&quot;&gt;&lt;a href=&quot;#第一章-JDBC简介&quot; class=&quot;headerlink&quot; title=&quot;第一章  JDBC简介&quot;&gt;&lt;/a&gt;第一章  JDBC简介&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1概念&quot;&gt;&lt;a href=&quot;#1-1概念&quot; cl</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础</title>
    <link href="https://www.stq555.com/2022/01/13/MySQL%E5%9F%BA%E7%A1%80/"/>
    <id>https://www.stq555.com/2022/01/13/MySQL%E5%9F%BA%E7%A1%80/</id>
    <published>2022-01-13T05:47:13.000Z</published>
    <updated>2022-01-13T05:58:09.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-初识MySQL"><a href="#第一章-初识MySQL" class="headerlink" title="第一章    初识MySQL"></a>第一章    初识MySQL</h1><hr><h2 id="1-1相关概念"><a href="#1-1相关概念" class="headerlink" title="1.1相关概念"></a>1.1相关概念</h2><p>保存数据的容器：<code>数组</code>、<code>集合</code>、<code>文件</code></p><p><strong>使用数据库的好处：</strong></p><ul><li>实现数据持久化</li><li>使用完整的管理系统统一管理，易于查询</li></ul><p><strong>1.DB</strong></p><p>数据库(database)：存储数据的”仓库”。它保存了一系列有组织的数据。</p><p><strong>2.DBMS</strong></p><p>数据库管理系统(Database Management System)。数据库是通过DBMS创建和操作的容器。</p><p>常见的DBMS：MySQL、Oracle、DB2、SqlServer等</p><p><strong>3.SQL</strong></p><p>结构化查询语言(Structure Query Language)：专门用来与数据库通信的语言。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210821171708.png" alt="QQ截图20210821171708"></p><p>优点：</p><ul><li>不是某个特定数据库供应商专有的语言，几乎所有DBMS都支持SQL</li><li>简单易学</li><li>虽然简单，但实际上是一种强有力的语言，灵活使用其语言元素，可以进行非常复杂和高级的数据库操作。</li></ul><hr><h2 id="1-2数据库存储数据的特点"><a href="#1-2数据库存储数据的特点" class="headerlink" title="1.2数据库存储数据的特点"></a>1.2数据库存储数据的特点</h2><p>1.将数据放到表中，表再放到库中</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210821182429.png" alt="QQ截图20210821182429"></p><p>2.一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</p><p>3.表具有一些特性，这些特性定义了数据再表中如何存储，类似java中”类”的设计。</p><p>4.表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java中的”属性”。</p><p>5.表中的数据是按行存储的，每一行类似于java中的”对象”。</p><hr><h1 id="第二章-初始MySQL"><a href="#第二章-初始MySQL" class="headerlink" title="第二章    初始MySQL"></a>第二章    初始MySQL</h1><hr><h2 id="2-1MySQL产品的介绍"><a href="#2-1MySQL产品的介绍" class="headerlink" title="2.1MySQL产品的介绍"></a>2.1MySQL产品的介绍</h2><p>MySQL数据库隶属于MySQLAB公司，总部位于瑞典，后被oracle收购。</p><p>创始人：Monty</p><p>优点：</p><ul><li>成本低：开放源代码，一般可以免费试用</li><li>性能高：执行很快</li><li>简单：很容易安装和使用</li></ul><hr><h2 id="2-2MySQL产品的安装"><a href="#2-2MySQL产品的安装" class="headerlink" title="2.2MySQL产品的安装"></a>2.2MySQL产品的安装</h2><p>DBMS分为两类：</p><ul><li>基于共享文件系统的DBMS(Access)微软的</li><li>基于客户机——服务器的DBMS，比如MySQL、Oracle、SqlServer</li></ul><hr><h2 id="2-3MySQL服务的启动和停止"><a href="#2-3MySQL服务的启动和停止" class="headerlink" title="2.3MySQL服务的启动和停止"></a>2.3MySQL服务的启动和停止</h2><p>第一种方法：WIN+R   输入  services.msc，找到MySQL右键启动或停止服务</p><p>第二种方法：以管理员身份打开cmd </p><ul><li>启动  <code>net start mysql</code></li><li>关闭  <code>net stop mysql</code></li></ul><hr><h2 id="2-4MySQL服务的登录与退出"><a href="#2-4MySQL服务的登录与退出" class="headerlink" title="2.4MySQL服务的登录与退出"></a>2.4MySQL服务的登录与退出</h2><p>登录：在dos窗口中输入命令<code>mysql -h localhost -P 3306 -u root -p</code></p><p>本机简写：<code>mysql -u root -p密码</code></p><ul><li>最前面的mysql你可以理解成一个关键字或者理解成一个固定的命令，是固定写法，类似于java、jdk中的javac命令或java命令</li><li>-h表示host,即主机的ip地址</li><li>-P表示port，端口，mysql数据库的默认端口是3306，当然啦，你可以自己改端口号，我这里没改端口号(注意：这是大写的字母P)</li><li>-u表示user用户名</li><li>-p表示password密码(注意：这是小写的字母p)</li></ul><blockquote><p><strong>大写的P表示端口号，小写的p表示密码</strong></p></blockquote><p>退出：<strong>exit</strong></p><hr><h2 id="2-5MySQL的常见命令和语法规范"><a href="#2-5MySQL的常见命令和语法规范" class="headerlink" title="2.5MySQL的常见命令和语法规范"></a>2.5MySQL的常见命令和语法规范</h2><p><strong>常见命令：</strong></p><p>1.查看当前所有的数据库</p><p><code>show databases;</code></p><p>2.打开指定的库</p><p><code>use 库名;</code></p><p>3.查看当前库的所有表</p><p><code>show tables;</code></p><p>4.查看其他库的所有表</p><p><code>show tables from 库名;</code></p><p>5.创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE table 表名&#123;</span><br><span class="line">     列名  列类型，</span><br><span class="line">     列名  列类型，</span><br><span class="line">     ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>6.查看表结构</p><p><code>desc 表名;</code></p><p>7.查看服务器的版本</p><p>方式一：登录到mysql服务端</p><p><code>select version();</code></p><p>方式二：没有登录到mysql服务端</p><p><code>mysql --version</code>或者<code>mysql --V</code></p><p><strong>语法规范</strong>：</p><p>1.不区分大小写。但建议关键字大写，表名、列名小写</p><p>2.每条命令最好用分号结尾</p><p>3.每条命令根据需要，可以进行缩进或换行</p><p>4.注释</p><p>​     单行注释：#注释文字</p><p>​     单行注释：– 注释文字</p><p>​      多行注释：/* 注释文字 */</p><hr><h1 id="第三章-DQL语言"><a href="#第三章-DQL语言" class="headerlink" title="第三章    DQL语言"></a>第三章    DQL语言</h1><hr><p><strong>数据查询语言</strong></p><h2 id="3-1基础查询"><a href="#3-1基础查询" class="headerlink" title="3.1基础查询"></a>3.1基础查询</h2><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT     查询列表     </span><br><span class="line">FROM      表名;</span><br></pre></td></tr></table></figure><p>类似于：System.out.println(打印东西);</p><p><strong>特点：</strong></p><p>1.查询列表可以是：表中的字段、常量值、表达式、函数</p><p>2.查询的结果是一个虚拟的表格</p><p><strong>1.查询表中的单个字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name </span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p><strong>2.查询表中的多个字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,job_id </span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p><strong>3.查询表中的所有字段</strong></p><p>第一种方式：哪里不会点哪里(双击)（<del>坏笑</del>）</p><p>第二种方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure><blockquote><p>tips：</p><ul><li>查询前：<strong>USE   库名;</strong>         #进入指定的数据库</li><li>当表名和关键字重复时，表名用着重号包裹，如<code>name</code></li></ul></blockquote><p><strong>4.查询常量值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100;</span><br><span class="line">SELECT &#x27;john&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>tips：字符型和日期型的常量值必须用单引号引起来，数值型不需要。</p></blockquote><p><strong>5.查询表达式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100*98;</span><br><span class="line">SELECT 100%98;</span><br></pre></td></tr></table></figure><p><strong>6.查询函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION(实参列表);</span><br></pre></td></tr></table></figure><p><strong>7.起别名</strong></p><ul><li>便于理解</li><li>如果要查询的字段有重名的情况，使用别名可以区分开来</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方式一：使用AS</span><br><span class="line">SELECT 100*98 AS 结果(别名);</span><br><span class="line">方式二：使用空格</span><br><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br><span class="line">#案例：查询salary，显示结果为 out put</span><br><span class="line">SELECT salary AS &#x27;out put&#x27; FROM employess;</span><br></pre></td></tr></table></figure><p><strong>8.去重</strong></p><p>关键字：<strong>DISTINCT</strong></p><p><strong>去掉重复的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT department_id FROM employees;</span><br></pre></td></tr></table></figure><p><strong>9.+号的作用</strong></p><p>Java中的+</p><ul><li>运算符：两个操作数都为数值型</li><li>连接符：只要有一个操作数为字符串</li></ul><p>MySQL中的+</p><ul><li>仅仅只有一个功能：运算符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100+90;#两个操作数都为数值型，则做加法运算</span><br><span class="line">SELECT &#x27;123&#x27;+90;#其中一方为字符型，则试图将字符型数值转换成数值型，如果转换成功，则继续做加法运算，</span><br><span class="line">SELECT &#x27;john&#x27;+90;</span><br><span class="line">#如果转换失败，则将字符型数值转换成0</span><br><span class="line">SELECT null+10;#只要一方为null，结果肯定为null</span><br></pre></td></tr></table></figure><p>案例：查询员工名和姓连接成一个字段，并显示 姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;) AS 结果</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(last_name,first_name) AS 姓名</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p><strong>附加：</strong></p><ul><li><strong>IFNULL函数</strong></li></ul><p>MySQL <code>IFNULL</code>函数是MySQL控制流函数之一，它接受两个参数，如果不是<code>NULL</code>，则返回第一个参数。 否则，<code>IFNULL</code>函数返回第二个参数。</p><p>两个参数可以是文字值或表达式。</p><p>以下说明了<code>IFNULL</code>函数的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFNULL(expression_1,expression_2);</span><br></pre></td></tr></table></figure><p>如果<code>expression_1</code>不为<code>NULL</code>，则<code>IFNULL</code>函数返回<code>expression_1</code>; 否则返回<code>expression_2</code>的结果。</p><p><code>IFNULL</code>函数根据使用的上下文返回字符串或数字。</p><p>如果要返回基于<code>TRUE</code>或<code>FALSE</code>条件的值，而不是<code>NULL</code>，则应使用IF函数。</p><ul><li><strong>ISNULL函数</strong></li></ul><p>返回 <strong>一个布尔值</strong> ，该值指示一个 表达式 是否不包含 Null (数据) 。</p><p><strong>语法</strong></p><p>所需的 <strong>表达式参数</strong>包含一个或多个 数值表达式 变量 字符串表达式 。</p><p><strong>备注</strong></p><p><strong>如果表达式为</strong> <strong>Null，</strong>则 IsNull<strong>返回\True;<strong>否则</strong>，IsNull</strong>返回<strong>False。如果表达式由多个表达式 变量 ，则任何构成变量中的</strong>Null都会导致为整个表达式返回 True。</p><p>Null 值表示<strong>变体不包含</strong>任何有效数据。 <strong>Null</strong> 与 空 不同，它表示变量尚未初始化。 它也不与零长度字符串 (“) ，有时称为 null 字符串。</p><p><strong>重要:</strong> 使用 <strong>IsNull</strong> 函数确定表达式是否包含 <strong>Null</strong> 值。 在某些情况下，预期计算结果为<strong>True</strong>的表达式（例如 If Var = Null 和 If Var &lt;&gt; Null）始终<strong>为 False。</strong> 这是因为包含NULL<strong>的任何表达式本身为</strong>Null，<strong>因此为</strong>False。</p><hr><h2 id="3-2条件查询"><a href="#3-2条件查询" class="headerlink" title="3.2条件查询"></a>3.2条件查询</h2><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM   表名</span><br><span class="line">WHERE 筛选条件;#类似于if语句</span><br><span class="line">#执行语句顺序 2、3、1</span><br></pre></td></tr></table></figure><p><strong>分类：</strong></p><p><strong>1.按条件表达式筛选</strong></p><ul><li>简单条件运算符：&gt;  &lt;  =  !=或&lt;&gt;(建议这个)  &gt;=  &lt;=</li></ul><p>案例一：查询工资&gt;12000的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;12000;</span><br></pre></td></tr></table></figure><p>案例二：查询部门编号不等于90号的员工名和部门编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  department_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id &lt;&gt; 90 ;</span><br></pre></td></tr></table></figure><p><strong>2.按逻辑表达式筛选</strong></p><p>作用：用于连接条件表达式</p><ul><li>逻辑运算符 &amp;&amp;  ||  ！</li></ul><p>​       建议使用MySQL里自带的 and  or  not</p><p>案例一：查询工资在10000到20000之间的员工名、工资、以及奖金</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  commission_pct </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE salary &gt;= 10000 </span><br><span class="line">  AND salary &lt;= 20000 ;</span><br></pre></td></tr></table></figure><p>案例二：查询部门编号不是在90到110之间，或者工资高于15000的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id &lt;= 90 </span><br><span class="line">  OR department_id &gt;= 110 </span><br><span class="line">  OR salary &gt;= 15000 ;</span><br></pre></td></tr></table></figure><p><strong>3.模糊查询</strong></p><p><strong>like</strong></p><p>特点：一般和通配符搭配使用</p><ul><li><p>%任意多个字符，包含0个字符</p></li><li><p>任意单个字符</p></li></ul><p>案例一：查询员工名中包含字符a的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE last_name LIKE &#x27;%a%&#x27; ;</span><br></pre></td></tr></table></figure><p>案例二：查询员工名中第三个字符为e，第五个字符为a的员工名和工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name LIKE &#x27;__n_l%&#x27;;</span><br></pre></td></tr></table></figure><p>案例三：查询员工名中第二个字符为_的员工名</p><p><strong>ESCAPE转译</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">last_name</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name LIKE &#x27;_\_%&#x27;;</span><br><span class="line">#或者last_name LIKE &#x27;_$_%&#x27; ESCAPE &#x27;$&#x27;;</span><br></pre></td></tr></table></figure><p><strong>between and</strong></p><p>特点：</p><ul><li>使用between and可以提高语句的简洁度</li><li>包含临界值</li><li>两个临界值不要调换顺序</li></ul><p>案例一：查询员工编号在100到120之间的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE manager_id BETWEEN 100 </span><br><span class="line">  AND 120 ;</span><br></pre></td></tr></table></figure><p><strong>in</strong></p><p>含义：判断某字段的值是否属于in列表中的某一项</p><p>特点：</p><ul><li>使用in提高语句简洁度</li><li>in列表的值类型必须一致或兼容</li><li>不支持通配符</li></ul><p>案例一：查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  job_id </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE job_id IN (&#x27;IT_PROG&#x27;, &#x27;AD_VP&#x27;, &#x27;AD_PRES&#x27;) ;</span><br></pre></td></tr></table></figure><p><strong>is  null</strong></p><p>特点：</p><ul><li>=或&lt;&gt;不能用于判断null值</li><li>is null或者is not null 可以判断null值</li><li>is不能判断数值(不能当=来用)</li></ul><p>案例一：查询没有奖金的员工名和奖金率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct IS NULL ;</span><br></pre></td></tr></table></figure><p><strong>附加：安全等于&lt;=&gt;</strong></p><ul><li>可以判断null值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct &lt;=&gt; NULL ;</span><br></pre></td></tr></table></figure><ul><li>也可以判断数值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &lt;=&gt; 12000;</span><br></pre></td></tr></table></figure><blockquote><p>tips：</p><ul><li>IS NULL：仅仅可以判断NULL值，可读性较高，建议使用</li><li>&lt;=&gt;：既可以判断NULL值，又可以判断普通的数值，可读性较低</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) AS 年薪</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3排序查询"><a href="#3-3排序查询" class="headerlink" title="3.3排序查询"></a>3.3排序查询</h2><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表</span><br><span class="line">【WHERE 筛选条件】</span><br><span class="line">ORDER BY 排序列表  【ASC|DESC】</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><p>1.ASC：升序，DESC：降序，如果不写默认是升序</p><p>2.ORDER BY字句中可以支持单个字段、多个字段、表达式、函数、别名</p><p>3.ORDER BY字句一般是放再查询语句的最后面，limit字句除外</p><p>案例一：查询员工信息，要求工资从高到低排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY salary DESC ;</span><br></pre></td></tr></table></figure><p>案例二：查询部门编号&gt;=90的员工信息，按入职信息先后进行排序【添加筛选条件】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE department_id &gt;= 90 </span><br><span class="line">ORDER BY hiredate ASC ;</span><br></pre></td></tr></table></figure><p>案例三：按年薪的高低显示员工的信息和 年薪【按表达式排序】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  *,</span><br><span class="line">  salary * 12 * (1+ IFNULL(commission_pct, 0)) AS 年薪 </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY salary * 12 * (1+ IFNULL(commission_pct, 0)) DESC ;</span><br></pre></td></tr></table></figure><p>案例四：按年薪的高低显示员工的信息和 年薪【按别名排序】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  *,</span><br><span class="line">  salary * 12 * (1+ IFNULL(commission_pct, 0)) AS 年薪 </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY 年薪 DESC ;</span><br></pre></td></tr></table></figure><p>案例五：按姓名的长度显示员工的姓名和工资【按函数排序】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  LENGTH(last_name) 字节长度,</span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY LENGTH(last_name) DESC ;</span><br></pre></td></tr></table></figure><p>案例6：查询员工信息，要求先按工资升序排序，再按员工编号降序排序【按多个字段排序】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">ORDER BY salary ASC,</span><br><span class="line">  employee_id DESC ;</span><br></pre></td></tr></table></figure><hr><h2 id="3-4常见函数"><a href="#3-4常见函数" class="headerlink" title="3.4常见函数"></a>3.4常见函数</h2><hr><p><strong>概念：</strong></p><p>类似于java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名。</p><p><strong>好处：</strong></p><ul><li>隐藏了实现细节</li><li>提高代码的重用性</li></ul><p><strong>调用：</strong></p><p>SECLET 函数名(实参列表) 【from表】;</p><p><strong>特点：</strong></p><ul><li>叫什么(函数名)</li><li>干什么(函数功能)</li></ul><p><strong>分类：</strong></p><ul><li>单行函数</li></ul><p>如concat、length、ifnull等</p><ul><li>分组函数</li></ul><p>做统计使用，又称为统计函数、聚合函数、组函数</p><p><strong>单行函数：</strong></p><p><strong>1.字符函数</strong></p><ul><li><p><strong>length</strong></p><p>获取参数值的字节个数</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(&#x27;joho&#x27;);</span><br><span class="line">SELECT LENGTH(&#x27;数据库MySQL&#x27;);</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#x27;%char%&#x27;</span><br></pre></td></tr></table></figure><ul><li><p><strong>conact</strong></p><p>拼接字符串</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(last_name,&#x27;_&#x27;,first_name) 姓名</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><ul><li><strong>upper(大写)、lower(小写)</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT UPPER(&#x27;john&#x27;);</span><br><span class="line">SELECT LOWER(&#x27;john&#x27;);</span><br><span class="line">SELECT LOWER(&#x27;JOHN&#x27;);</span><br></pre></td></tr></table></figure><p>案例一：将姓变大写，名变小写，然后拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  CONCAT(</span><br><span class="line">    UPPER(last_name),</span><br><span class="line">    &#x27;_&#x27;,</span><br><span class="line">    LOWER(first_name)</span><br><span class="line">  ) AS 姓名 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure><ul><li><p><strong>substr、substring</strong></p><p>截取字符串</p></li></ul><blockquote><p>注意：索引从1开始</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#截取从指定索引处后面所有的字符</span><br><span class="line">SELECT SUBSTR(&#x27;罗密欧与朱丽叶&#x27;,5) out_put;#朱丽叶</span><br><span class="line">#截取从指定索引处指定字符长度的字符</span><br><span class="line">SELECT SUBSTR(&#x27;罗密欧与朱丽叶&#x27;,1,3(截几位)) out_put;#罗密欧</span><br></pre></td></tr></table></figure><p>案例一：姓名中首字符大写，其他字符小写，然后用_拼接显示出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  CONCAT(</span><br><span class="line">    UPPER(SUBSTR(last_name, 1, 1)),</span><br><span class="line">    &#x27;_&#x27;,</span><br><span class="line">    LOWER(SUBSTR(last_name, 2))</span><br><span class="line">  ) AS 姓名 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure><ul><li><p><strong>instr</strong></p><p>返回字符串中子字符串第一次出现的位置。如果在<code>str</code>中找不到子字符串，则<code>INSTR()</code>函数返回零(<code>0</code>)。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&#x27;罗密欧与朱丽叶&#x27;,&#x27;朱&#x27;);#5</span><br></pre></td></tr></table></figure><ul><li><strong>trim</strong></li></ul><p>除掉一个字串中的字头或字尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(TRIM(&#x27;     张翠山     &#x27;) ) As out_put;</span><br><span class="line">#张翠山</span><br><span class="line">SELECT TRIM (&#x27;a&#x27; FROM &#x27;aaaaaaaa张aaaaaaaaaaaa翠山aaaaaaaaaaaaaaaa8aaaaaaaaaaaaaaaaaaa &#x27;) AS out_put;</span><br><span class="line">#张aaaaaaaaaaaa翠山</span><br></pre></td></tr></table></figure><ul><li><strong>lpad</strong></li></ul><p>用指定的字符实现左填充指定长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT LPAD(&#x27;拉姆达&#x27;,10,&#x27;*&#x27;) </span><br><span class="line">AS out_put;</span><br><span class="line">#out_put</span><br><span class="line">#*******拉姆达</span><br><span class="line">SELECT LPAD(&#x27;拉姆达&#x27;,2,&#x27;*&#x27;) </span><br><span class="line">AS out_put;</span><br><span class="line">#out_put</span><br><span class="line">#拉姆  从右边截断</span><br></pre></td></tr></table></figure><ul><li><strong>rpad</strong></li></ul><p>用指定的字符实现右填充指定长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT RPAD(&#x27;拉姆达&#x27;,10,&#x27;ab&#x27;) </span><br><span class="line">AS out_put;</span><br><span class="line">#out_put</span><br><span class="line">#拉姆达abababa</span><br></pre></td></tr></table></figure><ul><li><strong>replace</strong></li></ul><p>替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE(&#x27;JAVA与MyAQL&#x27;,&#x27;MyAQL&#x27;,&#x27;JS&#x27;) AS out_put;</span><br><span class="line">#JAVA与JS  </span><br><span class="line">SELECT REPLACE(&#x27;MyAQL与JAVA与MyAQL&#x27;,&#x27;MyAQL&#x27;,&#x27;JS&#x27;) AS out_put;</span><br><span class="line">#JS与JAVA与JS  全部替换</span><br></pre></td></tr></table></figure><p><strong>2.数学函数</strong></p><ul><li><strong>round</strong></li></ul><p>四舍五入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ROUND(1.65);#2</span><br><span class="line">SELECT ROUND(-1.65);#-2</span><br><span class="line">SELECT ROUND(1.567，2);#1.57</span><br></pre></td></tr></table></figure><ul><li><strong>ceil</strong></li></ul><p>向上取整，返回&gt;=该参数的最小整数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CEIL(1.001);#2</span><br><span class="line">SELECT CEIL(-1.001);#-1</span><br></pre></td></tr></table></figure><ul><li><strong>floor</strong></li></ul><p>向下取整，返回&lt;=该参数的最大整数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CEIL(9.99);#9</span><br><span class="line">SELECT CEIL(-9.99);#-10</span><br></pre></td></tr></table></figure><ul><li><strong>truncate</strong></li></ul><p>截断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRUNCATE(1.65,1);#1.6</span><br></pre></td></tr></table></figure><ul><li><strong>mod</strong></li></ul><p>取余</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT MOD(10,3);#1</span><br><span class="line">SELECT MOD(-10,-3);#-1</span><br><span class="line">#被除数为正结果为正，若为负，结果为负</span><br><span class="line">#相当于</span><br><span class="line">SELECT 10%3;</span><br></pre></td></tr></table></figure><p>MOD(a,b)：a-a/b*b;</p><p><strong>3.日期函数</strong></p><ul><li><strong>now</strong></li></ul><p>返回当前系统日期+时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br><span class="line">#now</span><br><span class="line">#2021-08-25 17:49:07</span><br></pre></td></tr></table></figure><ul><li><strong>curdate</strong></li></ul><p>返回当前系统日期，不包含时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURDATE();</span><br></pre></td></tr></table></figure><ul><li><strong>curtime</strong></li></ul><p>返回当前时间，不包含日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURTIME();</span><br></pre></td></tr></table></figure><ul><li>可以获取指定的部分，年、月、日、小时、分钟、秒</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT YEAR(NOW()) 年;</span><br><span class="line">SELECT YEAR(hiredate) 年 FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT MONTH(NOW()) 月;</span><br><span class="line">#英文</span><br><span class="line">SELECT MONTHNAME(NOW()) 月; #August</span><br></pre></td></tr></table></figure><ul><li><strong>str_to_date</strong></li></ul><p>将日期格式的字符转换成指定格式的日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">STR_TO_DATE(&#x27;13-9-1999&#x27;,&#x27;%d-%m-%y&#x27;);</span><br><span class="line">#1999-9-13</span><br></pre></td></tr></table></figure><ul><li><strong>date_format</strong></li></ul><p>将日期转换成字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">DATE_FORMAT(&#x27;2018/6/6&#x27;,&#x27;%Y年%m月%d日&#x27;);</span><br><span class="line">#2018年6月6日</span><br></pre></td></tr></table></figure><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210826113850.png" alt="QQ截图20210826113850" style="zoom:80%;" /><p>案例一：查询有奖金的员工名和入职日期(xx月/xx日 xx年)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  DATE_FORMAT(hiredate, &#x27;%m月/%d日 %y年&#x27;) 入职日期 </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE commission_pct IS NOT NULL ;</span><br></pre></td></tr></table></figure><p><strong>4.其他函数</strong></p><ul><li> <strong>version</strong></li></ul><p>版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();</span><br></pre></td></tr></table></figure><ul><li><strong>database</strong></li></ul><p>查看当前数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><ul><li><strong>user</strong></li></ul><p>查询当前用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT USER();</span><br></pre></td></tr></table></figure><p><strong>5.流程控制函数</strong></p><ul><li><strong>if函数</strong></li></ul><p>if else的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">IF(&#x27;10&gt;5&#x27;,&#x27;大&#x27;,&#x27;小&#x27;);#大</span><br></pre></td></tr></table></figure><ul><li><strong>case函数</strong></li></ul><p>使用一：类似switch case 的效果</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE 要判断的字段或表达式</span><br><span class="line">WHEN 常量1 THEN 要显示的值1或语句1;#值不用加分号</span><br><span class="line">WHEN 常量2 THEN 要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">ELSE 要显示的值n或语句n;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>案例一：查询员工的工资，要求</p><p>部门号=30，显示的工资为1.1倍</p><p>部门号=40，显示的工资为1.2倍</p><p>部门号=50，显示的工资为1.3倍</p><p>其他部门，显示的工资为原工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary 原始工资,department_id,</span><br><span class="line">CASE department_id</span><br><span class="line">WHEN 30 THEN salary*1.1</span><br><span class="line">WHEN 40 THEN salary*1.2</span><br><span class="line">WHEN 50 THEN salary*1.3</span><br><span class="line">ELSE salary</span><br><span class="line">END AS 新工资</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><p>使用二：类似 多重if</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE </span><br><span class="line">WHEN 条件一 THEN 要显示的值1或语句1</span><br><span class="line">WHEN 条件一 THEN 要显示的值1或语句1</span><br><span class="line">...</span><br><span class="line">ELSE 要显示的值n或语句n</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>案例一：查询员工的工资的情况</p><p>如果工资&gt;20000，显示A级别</p><p>如果工资&gt;15000，显示B级别</p><p>如果工资&gt;10000，显示C级别</p><p>否则显示D级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  salary,</span><br><span class="line">  CASE</span><br><span class="line">    WHEN salary &gt; 20000 </span><br><span class="line">    THEN &#x27;A&#x27; </span><br><span class="line">    WHEN salary &gt; 15000 </span><br><span class="line">    THEN &#x27;B&#x27; </span><br><span class="line">    WHEN salary &gt; 10000 </span><br><span class="line">    THEN &#x27;C&#x27; </span><br><span class="line">    ELSE &#x27;D&#x27; </span><br><span class="line">  END AS 工资级别 </span><br><span class="line">FROM</span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5分组函数"><a href="#3-5分组函数" class="headerlink" title="3.5分组函数"></a>3.5分组函数</h2><p>功能：用作统计使用，又称为聚合函数、统计函数、组函数</p><p>分类：sum求和、avg平均值、max最大值、min最小值、count计算个数</p><p>1.简单使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#sum</span><br><span class="line">SELECT SUM(salary)</span><br><span class="line">FROM employees;</span><br><span class="line">#avg</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees;</span><br><span class="line">#max</span><br><span class="line">SELECT MAX(salary)</span><br><span class="line">FROM employees;</span><br><span class="line">#min</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees;</span><br><span class="line">#count</span><br><span class="line">SELECT COUNT(salary)</span><br><span class="line">FROM employees;</span><br><span class="line">#一起查询</span><br><span class="line">SELECT SUM(salary)  和,AVG(salary)  平均值,MAX(salary)  最大值,MIN(salary)  最小值,COUNT(salary)  个数</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p>特点：</p><p>2.参数支持哪些类型</p><ul><li>sum、avg一般用于处理数值型</li><li>max、min、count可以处理任何类型</li></ul><p>3.是否忽略null值</p><p>以上分组函数都忽略nll值</p><p>3.可以和distinct搭配实现去重的运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(DISTINCT salary),SUM(salary) </span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(DISTINCT salary),COUNT(salary)</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p>4.count函数单独介绍</p><p>一般用<code>COUNT(*)</code>统计行数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(salary)</span><br><span class="line">FROM employees;</span><br><span class="line">#统计行数</span><br><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM employees;</span><br><span class="line">#插入一列1，查看行数</span><br><span class="line">SELECT COUNT(1)</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p>效率：</p><p>MYISAM存储引擎下，<code>COUNT(*)</code>的效率高</p><p>INNODB存储引擎下，<code>COUNT(*)</code>和<code>COUNT(*)</code>的效率差不多，比<code>COUNT(字段)</code>要高一些。</p><p>6.和分组函数一同查询的字段有限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),employee_id</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p><code>AVG()</code>查询完是一个表格，而employee_id是107个但是只能显示出一个。</p><blockquote><p>tips：和分组函数一同查询的字段要求是group by后的字段</p></blockquote><p>7.<strong>DATEDIFF函数</strong></p><p>计算日期差</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATEDIFF(&#x27;2017-10-1&#x27;,&#x27;2017-9-29&#x27;)</span><br><span class="line">#2</span><br></pre></td></tr></table></figure><hr><h2 id="3-6分组查询"><a href="#3-6分组查询" class="headerlink" title="3.6分组查询"></a>3.6分组查询</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT 分组函数,列(要求出现在group by的后面)</span><br><span class="line">FROM 表</span><br><span class="line">【WHERE 筛选条件】</span><br><span class="line">GROUP BY 分组的列表</span><br><span class="line">【ORDER BY 字句】</span><br></pre></td></tr></table></figure><blockquote><p>tips：查询列表比较特殊，要求是分组函数和group by后面出现的字段</p></blockquote><p>特点：</p><p>1.分组查询中的筛选条件分两类</p><table><thead><tr><th></th><th>数据源</th><th>位置</th><th>关键字</th></tr></thead><tbody><tr><td>分组前筛选</td><td>原始表</td><td>group by字句的前面</td><td>WHERE</td></tr><tr><td>分组后筛选</td><td>分组后的结果集</td><td>group by字句的后面</td><td>HAVING</td></tr></tbody></table><ul><li>分组函数分组函数做条件肯定是放在having字句中</li><li>能用分组前筛选的尽量用分组前筛选</li></ul><p>2.group by字句支持单个字段分组，多个字段分组(多个字段之间用逗号隔开没有顺序要求)，表达式或函数(用的较少)</p><p>3.也可以添加排序(排序放在整个分组查询的最后)</p><p><strong>1.添加分组前筛选</strong></p><p>简单的分组查询：</p><p>案例一：查询每个工种的最高工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">GROUP BY job_id;</span><br></pre></td></tr></table></figure><p>案例二：查询每个位置上的部门个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">COUNT(*),location_id</span><br><span class="line">FROM</span><br><span class="line">departments</span><br><span class="line">GROUP BY location_id;</span><br></pre></td></tr></table></figure><p>添加筛选条件：</p><p>案例一：查询邮箱中包含a字符的，每个部门的平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">email LIKE &#x27;%a%&#x27;</span><br><span class="line">GROUP BY department_id;</span><br></pre></td></tr></table></figure><p>案例二：查询有奖金的每个领导手下员工的最高工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">email LIKE &#x27;%a%&#x27;</span><br><span class="line">GROUP BY department_id;</span><br></pre></td></tr></table></figure><p><strong>2.添加分组后筛选</strong></p><p>添加复杂的筛选条件</p><p>案例一：查询哪个部门的员工个数&gt;2</p><ul><li>查询每个部门的员工个数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br></pre></td></tr></table></figure><ul><li>根据Ⅰ的结果进行筛选，查询哪个部门的员工数&gt;2</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING COUNT(*)&gt;2;</span><br></pre></td></tr></table></figure><p>案例二：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct IS NOT NULL</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING MAX(salary)&gt;12000;</span><br></pre></td></tr></table></figure><p>案例三：查询领导编号&gt;102的，最低工资&gt;5000的领导的编号是哪个，及其最低工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(salary),manager_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">manager_id&gt;102</span><br><span class="line">GROUP BY </span><br><span class="line">manager_id</span><br><span class="line">HAVING</span><br><span class="line">MIN(salary)&gt;5000;</span><br></pre></td></tr></table></figure><p><strong>3.按表达式或函数分组</strong></p><p>案例一：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数&gt;5的有哪些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*),LENGTH(last_name)</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">GROUP BY </span><br><span class="line">LENGTH(last_name)</span><br><span class="line">HAVING </span><br><span class="line">COUNT(*)&gt;5;</span><br></pre></td></tr></table></figure><p><strong>4.按多个字段分组</strong></p><p>案例一：查询每个部门每个工种的员工的平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">GROUP BY department_id,job_id;</span><br></pre></td></tr></table></figure><p><strong>5.添加排序</strong></p><p>案例一：查询每个部门每个工种的员工的平均工资，并且按平均工资的高低显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">GROUP BY department_id,job_id</span><br><span class="line">ORDER BY AVG(salary) DESC;</span><br></pre></td></tr></table></figure><hr><h2 id="3-7连接查询"><a href="#3-7连接查询" class="headerlink" title="3.7连接查询"></a>3.7连接查询</h2><p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p><p>笛卡尔乘积现象：表1 有m行 ，表2 有n行 ，结果=m*n行</p><ul><li>发生原因：没有有效的连接条件</li><li>如何避免：添加有效的连接条件</li></ul><p>分类：</p><p>1.按年代分类</p><ul><li>sql192标准：仅仅支持内连接</li><li>sql199标准【推荐】：支持内连接+外连接(左外和右外)+交叉连接</li></ul><p>2.按功能分类</p><ul><li>内连接：等值连接、非等值连接、自连接</li><li>外连接：左外连接、右外连接、全外连接</li><li>交叉连接</li></ul><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210830112023.png" alt="QQ截图20210830112023" style="zoom:80%;" /><p><strong>一.sql192标准</strong></p><p><strong>1.等值连接</strong></p><ul><li>多表等值连接的结果为多表的交集部分</li><li>n表连接，至少需要n-1个连接条件</li><li>多表的顺序没有要求</li><li>一般需要为表起别名</li><li>可以搭配前面介绍的所有字句使用，比如排序、分组、筛选</li></ul><p>案例一：查询男女对应的名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT NAME,boyname</span><br><span class="line">FROM</span><br><span class="line">boys,beauty</span><br><span class="line">WHERE beauty.boyfriend_id=boys.id;</span><br></pre></td></tr></table></figure><p>案例二：查询员工名和对应的部门名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM</span><br><span class="line">departments,employees</span><br><span class="line">WHERE</span><br><span class="line">departments.`department_id`=employees.`department_id`;</span><br></pre></td></tr></table></figure><p>为表起别名：</p><p>案例一：查询员工名、工种号、工种名</p><ul><li>提高语句的简洁度</li><li>区分多个重名的字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,e.`job_id`,job_title</span><br><span class="line">FROM employees e,jobs j</span><br><span class="line">WHERE e.`job_id`=j.`job_id`;</span><br></pre></td></tr></table></figure><blockquote><p>tips：如果为表起了别名，则查询的字段就不能使用原来的表名去限定</p><p>两个表的顺序是可以调换的</p></blockquote><p>加筛选：</p><p>案例一：查询有奖金的员工名、部门名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM</span><br><span class="line">departments,employees</span><br><span class="line">WHERE</span><br><span class="line">departments.`department_id`=employees.`department_id`</span><br><span class="line">AND</span><br><span class="line">commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure><p>案例二：查询城市名中第二个字符为o的部门名和城市名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">department_name,city</span><br><span class="line">FROM</span><br><span class="line">departments d,locations l</span><br><span class="line">WHERE</span><br><span class="line">d.`location_id`=l.`location_id`</span><br><span class="line">AND</span><br><span class="line">city LIKE &#x27;_o%&#x27;;</span><br></pre></td></tr></table></figure><p>加分组：</p><p>案例一：查询每个城市的部门个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">COUNT(*) 个数,city</span><br><span class="line">FROM</span><br><span class="line">departments d,locations l</span><br><span class="line">WHERE</span><br><span class="line">d.`location_id`=l.`location_id`</span><br><span class="line">GROUP BY city;</span><br></pre></td></tr></table></figure><p>案例二：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">department_name,d.manager_id,MIN(salary)</span><br><span class="line">FROM</span><br><span class="line">departments d,employees e</span><br><span class="line">WHERE </span><br><span class="line">d.`department_id`=e.`department_id`</span><br><span class="line">AND commission_pct IS NOT NULL</span><br><span class="line">GROUP BY department_name,d.manager_id;</span><br></pre></td></tr></table></figure><p>加排序：</p><p>案例一：查询每个工种的工种名和员工的个数，并且按员工个数降序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT job_title,COUNT(*) 员工个数</span><br><span class="line">FROM employees e,jobs j</span><br><span class="line">WHERE</span><br><span class="line">e.`job_id`=j.`job_id`</span><br><span class="line">GROUP BY job_title</span><br><span class="line">ORDER BY COUNT(*) DESC;</span><br></pre></td></tr></table></figure><p>三表连接：</p><p>案例一：查询员工名、部门名和所在的城市</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">last_name,department_name,city</span><br><span class="line">FROM</span><br><span class="line">employees e,departments d,locations l</span><br><span class="line">WHERE</span><br><span class="line">e.`department_id`=d.`department_id`</span><br><span class="line">AND</span><br><span class="line">d.`location_id`=l.`location_id`;</span><br></pre></td></tr></table></figure><p><strong>2.非等值连接</strong></p><p>案例一：查询员工的工资和工资级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e,job_grades j</span><br><span class="line">WHERE salary BETWEEN j.iowest_sal AND j.highest_sal;</span><br></pre></td></tr></table></figure><p><strong>3.自连接</strong></p><p>案例一：查询员工名和上级的名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.employee_id,e.last_name,m.last_name,m.employee_id</span><br><span class="line">FROM employees e,employees m</span><br><span class="line">WHERE e.`manager_id`=m.`employee_id`;</span><br></pre></td></tr></table></figure><p><strong>二.sql199标准</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表1 别名 【连接类型】</span><br><span class="line">JOIN 表2 别名</span><br><span class="line">ON 连接条件</span><br><span class="line">【WHERE 筛选条件】</span><br><span class="line">【GROUP BY 分组】</span><br><span class="line">【HAVING 筛选条件】</span><br><span class="line">【ORDER BY 排序列表】</span><br></pre></td></tr></table></figure><p><strong>1.内连接</strong></p><p>连接类型：inner</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表1 别名</span><br><span class="line">INNER JOIN 表2 别名</span><br><span class="line">ON 连接条件;</span><br></pre></td></tr></table></figure><p>分类：</p><p><strong>1.等值连接</strong></p><p>特点：</p><ul><li>可以添加排序、分组、筛选</li><li>inner可以省略</li><li>筛选条件放在where的后面，连接条件放在on后面，提高分离性，便于阅读</li><li>inner join 连接和sql192语法中的等值连接效果是一样的，都是查询多表的交集</li></ul><p>案例一：查询员工名、部门名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM</span><br><span class="line">employees e</span><br><span class="line">INNER JOIN departments d</span><br><span class="line">ON e.`department_id`=d.`department_id`;</span><br></pre></td></tr></table></figure><p>案例二：查询名字中包含e的员工名和工种名(加筛选)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,job_title</span><br><span class="line">FROM</span><br><span class="line">employees e</span><br><span class="line">INNER JOIN jobs j</span><br><span class="line">ON e.`job_id`=j.`job_id`</span><br><span class="line">WHERE e.`last_name` LIKE &#x27;%e%&#x27;;</span><br></pre></td></tr></table></figure><p>案例三：查询部门个数&gt;3的城市名和部门个数(分组+筛选)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) 部门个数,city</span><br><span class="line">FROM</span><br><span class="line">departments d</span><br><span class="line">INNER JOIN locations l</span><br><span class="line">ON d.`location_id`=l.`location_id`</span><br><span class="line">GROUP BY city</span><br><span class="line">HAVING 部门个数&gt;3;</span><br></pre></td></tr></table></figure><p>案例四：查询部门员工个数&gt;3的部门名和员工个数，并按个数降序(排序)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) 个数,department_name</span><br><span class="line">FROM</span><br><span class="line">employees e</span><br><span class="line">INNER JOIN departments d</span><br><span class="line">ON e.`department_id`=d.`department_id`</span><br><span class="line">GROUP BY department_name</span><br><span class="line">HAVING COUNT(*)&gt;3</span><br><span class="line">ORDER BY COUNT(*) DESC;</span><br></pre></td></tr></table></figure><p>案例五：查询员工名、部门名、工种名，并按部门名降序(三表连接)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_name,job_title</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN departments d ON e.`department_id`=d.`department_id`</span><br><span class="line">INNER JOIN jobs j ON e.`job_id`=j.`job_id`</span><br><span class="line">ORDER BY department_name DESC;</span><br></pre></td></tr></table></figure><p><strong>2.非等值连接</strong></p><p>案例一：查询员工的工资级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN job_grades j</span><br><span class="line">ON e.`salary` BETWEEN j.`iowest_sal` AND j.`highest_sal`;</span><br></pre></td></tr></table></figure><p>案例二：查询每个工资级别的个数&gt;20的个数，并且按工资级别降序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) 个数,grade_level</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN job_grades j</span><br><span class="line">ON e.`salary` BETWEEN j.`iowest_sal` AND j.`highest_sal`</span><br><span class="line">GROUP BY grade_level</span><br><span class="line">HAVING COUNT(*)&gt;20</span><br><span class="line">ORDER BY grade_level DESC;</span><br></pre></td></tr></table></figure><p><strong>3.自连接</strong></p><p>案例一：查询姓名中包含字符k的员工的名字、上级的名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name,m.last_name</span><br><span class="line">FROM</span><br><span class="line">employees e</span><br><span class="line">JOIN employees m</span><br><span class="line">ON e.`manager_id`=m.`employee_id`</span><br><span class="line">WHERE e.`last_name` LIKE &#x27;%k%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>2.外连接</strong></p><p>应用场景：用于查询一个表中有，另一个表没有的记录</p><p><strong>特点：</strong></p><p>1.外连接的查询结果为主表中的所有记录</p><ul><li>如果从表中有和它匹配的，则显示匹配的值</li><li>如果从表中没有和它匹配的，则显示null</li><li>外连接查询结果=内连接查询结果+主表中有而从表中没有的记录</li></ul><p>2.左外连接，left join左边的是主表</p><p>3.右外连接，right join右边的是主表</p><p>4.左外和右外交换两个表的顺序，可以实现同样的效果</p><p>5.全外连接=内连接的结果+表1中有但是表2中没有的+表2中有但是表1中没有的</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表1 别名</span><br><span class="line">LEFT|RIGHT|FULL【OUTER】 JOIN 表2 别名 ON 连接条件</span><br><span class="line">WHERE 筛选条件</span><br><span class="line">GROUP BY 分组条件</span><br><span class="line">HAVING 分组后的筛选</span><br><span class="line">ORDER BY 排序列表</span><br><span class="line">LIMIT 字句</span><br></pre></td></tr></table></figure><hr><ul><li><strong>左外连接</strong></li></ul><p>连接类型：left 【outer】</p><p>案例一：查询没有男朋友的女神名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.name</span><br><span class="line">FROM beauty b</span><br><span class="line">LEFT OUTER JOIN boys bo</span><br><span class="line">ON  b.`boyfriend_id`=bo.`id`</span><br><span class="line">WHERE bo.`id` IS NULL;</span><br></pre></td></tr></table></figure><p>案例二：查询哪个部门没有员工(左外连接)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.*,e.employee_id</span><br><span class="line">FROM departments d</span><br><span class="line">LEFT OUTER JOIN employees e</span><br><span class="line">ON d.`department_id`=e.`department_id`</span><br><span class="line">WHERE e.`employee_id` IS NULL;</span><br></pre></td></tr></table></figure><ul><li><strong>右外连接</strong></li></ul><p>连接类型：right 【outer】</p><p>案例一：查询没有男朋友的女神名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.name</span><br><span class="line">FROM boys bo</span><br><span class="line">RIGHT OUTER JOIN beauty b</span><br><span class="line">ON  b.`boyfriend_id`=bo.`id`</span><br><span class="line">WHERE bo.`id` IS NULL;</span><br></pre></td></tr></table></figure><p>案例二：查询哪个部门没有员工(右外连接)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.*,e.employee_id</span><br><span class="line">FROM employees e</span><br><span class="line">LEFT OUTER JOIN departments d</span><br><span class="line">ON d.`department_id`=e.`department_id`</span><br><span class="line">WHERE e.`employee_id` IS NULL;</span><br></pre></td></tr></table></figure><ul><li><strong>全外连接</strong></li></ul><p>连接类型：full 【outer】</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE girls;</span><br><span class="line">SELECT b.*,bo.*</span><br><span class="line">FROM beauty b</span><br><span class="line">FULL OUTER JOIN boys bo</span><br><span class="line">ON b.`boyfriend_id`=bo.id;</span><br></pre></td></tr></table></figure><p><strong>3.交叉连接</strong></p><p>连接类型：cross</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.*,bo.*</span><br><span class="line">FROM beauty b</span><br><span class="line">CROSS JOIN boys bo;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>sql192和sql199<strong>PK</strong></p><p>功能：sql支持的较多</p><p>可读性：sql199实现连接条件和筛选条件分离，可读性较高</p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210904174554.png" alt="QQ截图20210904174554" style="zoom:67%;" /><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210904174652.png" alt="QQ截图20210904174652" style="zoom:67%;" /><p>案例一：查询编号&gt;3的女神的男朋友信息，如果有则列出信息，如果没有，则用null填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.id,b.name,bo.*</span><br><span class="line">FROM beauty b</span><br><span class="line">LEFT OUTER JOIN boys bo</span><br><span class="line">ON b.`boyfriend_id`=bo.`id`</span><br><span class="line">WHERE b.`id`&gt;3;</span><br></pre></td></tr></table></figure><p>案例二：查询哪个城市没有部门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT city</span><br><span class="line">FROM departments d</span><br><span class="line">RIGHT OUTER JOIN locations l</span><br><span class="line">ON d.`location_id`=l.`location_id`</span><br><span class="line">WHERE d.`department_id` IS NULL;</span><br></pre></td></tr></table></figure><p>案例三：查询部门名为SAL或IT的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.*,d.department_name,d.department_id</span><br><span class="line">FROM departments d</span><br><span class="line">LEFT OUTER JOIN employees e</span><br><span class="line">ON d.`department_id`=e.`department_id`</span><br><span class="line">WHERE d.`department_name` IN (&#x27;SAL&#x27;,&#x27;IT&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210904181727.png" alt="QQ截图20210904181727"></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210904181736.png" alt="QQ截图20210904181736"></p><blockquote><p>tips：一个名字但是id不一样</p></blockquote><hr><h2 id="3-8子查询"><a href="#3-8子查询" class="headerlink" title="3.8子查询"></a>3.8子查询</h2><hr><p><strong>含义：</strong></p><p>出现在其他语句内部的<code>SELECT</code>语句，称为子查询或内查询。</p><p>外部的<code>SELECT</code>语句，称为主查询或外查询。</p><p><strong>分类：</strong></p><p>1.按子查询出现的位置分类</p><ul><li><code>SELECT</code>后面</li></ul><p>仅仅支持标量子查询</p><ul><li><code>FROM</code>后面</li></ul><p>支持表子查询</p><ul><li><code>WHERE</code>或<code>HAVING</code>后面(重点)</li></ul><p>支持标量子查询(单行)(重点)、列子查询(多行)(重点)、行子查询</p><ul><li><code>EXISTS</code>后面(相关子查询)</li></ul><p>支持表子查询</p><p>2.按结果集的行列数不同分类</p><ul><li>标量子查询(结果集只有一行一列)</li><li>列子查询(结果集有一列多行)</li><li>行子查询(结果集有一行多列)</li><li>表子查询(结果集为一般为多行多列)</li></ul><p><strong>一.<code>WHERE</code>或<code>HAVING</code>后面</strong></p><p><strong>特点：</strong></p><ul><li>子查询放在小括号内</li><li>子查询一般放在条件的右侧</li><li>标量子查询，一般搭配着单行操作符使用</li></ul><p><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>=</code> <code>&lt;&gt;</code></p><ul><li>列子查询，一般搭配着多行操作符使用</li></ul><p>IN、ANY/SOME、ALL</p><ul><li>子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</li></ul><p><strong>1.标量子查询(单行子查询)</strong></p><p><em>一列一行</em></p><p>案例一：谁的工资比Abel高？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;(</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name=&#x27;Abel&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>案例二：查询<code>job_id</code>与141号员工相同，<code>salary</code>比143号员工多的员工的姓名、<code>job_id</code>和工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id=(</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHEREemployee_id=141</span><br><span class="line">)</span><br><span class="line">AND salary&gt;(</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id=143</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>案例三：返回公司工资最少的员工的<code>last_name</code>、<code>job_id</code>、<code>salary</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHEREsalary=(</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>案例四：查询最低工资大于50号部门最低工资的部门id和其最低工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id=50</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>非法使用标量子查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id=50</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id=250</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>2.列子查询(多行子查询)</strong></p><p><em>一列多行</em></p><ul><li>返回多行</li><li>使用多行比较操作符</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210906184307.png" alt="QQ截图20210906184307"></p><p>案例一：返回<code>location_id</code>是1400或1700的部门中的所有员工姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN(</span><br><span class="line">SELECT DISTINCT department_id</span><br><span class="line">FROM departments</span><br><span class="line">WHERE location_id IN(1400,1700)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id =ANY(</span><br><span class="line">SELECT DISTINCT department_id</span><br><span class="line">FROM departments</span><br><span class="line">WHERE location_id IN(1400,1700)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><ul><li>IN等价于=ALL</li><li>NOT IN等价于&lt;&gt;ALL</li></ul></blockquote><p>案例二：返回其它工种中比<code>job_id</code>为<code>IT_PROG</code>工种任一工资低的员工的员工号、姓名、<code>job id</code> 以及<code>salary</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;ANY(</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id=&#x27;IT_PROG&#x27;</span><br><span class="line">)</span><br><span class="line">AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;(</span><br><span class="line">SELECT MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id=&#x27;IT_PROG&#x27;</span><br><span class="line">)</span><br><span class="line">AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br></pre></td></tr></table></figure><p>案例三：返回其它工种中比<code>job_id</code>为<code>IT_PROG</code>工种所有工资低的员工的员工号、姓名、<code>job id</code> 以及<code>salary</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;ALL(</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id=&#x27;IT_PROG&#x27;</span><br><span class="line">)</span><br><span class="line">AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;(</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id=&#x27;IT_PROG&#x27;</span><br><span class="line">)</span><br><span class="line">AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br></pre></td></tr></table></figure><p><strong>3.行子查询(多列多行)</strong></p><p><em>一行多列或者多行多列</em>     主要为一行多列</p><p>案例一：查询员工编号最小并且工资最高的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id=(</span><br><span class="line">SELECT MIN(employee_id)</span><br><span class="line">FROM employees</span><br><span class="line">)</span><br><span class="line">AND salary=(</span><br><span class="line">SELECT MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM employees</span><br><span class="line">WHERE (employee_id,salary)=(</span><br><span class="line">SELECT MIN(employee_id),MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>二.<code>SELECT</code>后面</strong></p><ul><li><strong>仅仅支持标量子查询</strong></li></ul><p>案例一：查询每个部门的员工个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.*,(</span><br><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM employees e</span><br><span class="line">WHERE d.`department_id`=e.department_id</span><br><span class="line">) 个数</span><br><span class="line">FROM departments d;</span><br></pre></td></tr></table></figure><p>案例二：查询员工号=102的部门名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT (</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">INNER JOIN employees e</span><br><span class="line">ON d.department_id=e.department_id</span><br><span class="line">WHERE  e.employee_id=102</span><br><span class="line">) 部门名;</span><br></pre></td></tr></table></figure><p><strong>三.<code>FROM</code>后面</strong></p><p><strong>仅仅支持表子查询</strong></p><blockquote><p>tips：将子查询结果充当一张表，要求必须起别名</p></blockquote><p>案例一：查询每个部门的平均工资的工资等级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT ag_dep.*,j.`grade_level`</span><br><span class="line">FROM (</span><br><span class="line">SELECT AVG(salary) ag,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">) ag_dep</span><br><span class="line">INNER JOIN job_grades j</span><br><span class="line">ON ag_dep.ag BETWEEN j.`iowest_sal` AND j.`highest_sal`;</span><br></pre></td></tr></table></figure><p><strong>四.<code>EXISTS</code>后面(相关子查询)</strong></p><p><strong>仅仅支持表子查询</strong></p><p>exists 布尔类型</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXISTS(完整的查询语句)</span><br></pre></td></tr></table></figure><p>结果：1或0</p><p>案例一：查询有员工的部门名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#用EXISTS</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE EXISTS(</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees e</span><br><span class="line">WHERE e.`department_id`=d.`department_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#用IN</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE d.`department_id` IN(</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>案例二：查询没有女朋友的男神信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#IN</span><br><span class="line">SELECT bo.*</span><br><span class="line">FROM boys bo</span><br><span class="line">WHERE bo.`id` NOT IN(</span><br><span class="line">SELECT boyfriend_id</span><br><span class="line">FROM beauty</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#EXISTS</span><br><span class="line">SELECT bo.*</span><br><span class="line">FROM boys bo</span><br><span class="line">WHERE NOT EXISTS(</span><br><span class="line">SELECT boyfriend_id</span><br><span class="line">FROM beauty b</span><br><span class="line">WHERE bo.`id`=b.`boyfriend_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="3-9分页查询"><a href="#3-9分页查询" class="headerlink" title="3.9分页查询"></a>3.9分页查询</h2><ul><li>应用场景： 当要显示的数据，一页显示不全，需要分页提交sql请求</li><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表</span><br><span class="line">【JOIN TYPE JOIN 表2</span><br><span class="line">ON 连接条件</span><br><span class="line">WHERE 筛选条件</span><br><span class="line">GROUP BY 分组字段</span><br><span class="line">HAVING 分组后的筛选</span><br><span class="line">ORDER BY 排序的字段】</span><br><span class="line">LIMIT offset,size;</span><br></pre></td></tr></table></figure><ul><li><code>offset</code>：要显示条目的起始索引(起始索引从0开始)</li><li><code>size</code>：要显示的条目个数</li></ul><p>特点：</p><ul><li><p><code>LIMIT</code>语句放在查询语句的最后</p></li><li><p>公式</p><p>要显示的页数  page     每页的条目数   size</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表</span><br><span class="line">LIMIT (page-1)*size,size;</span><br></pre></td></tr></table></figure></li></ul><p>案例一：查询前五条员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">LIMIT 0,5;</span><br></pre></td></tr></table></figure><p>案例二：查询第11条——第25条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">LIMIT 10,15;</span><br></pre></td></tr></table></figure><p>案例三：有奖金的员工信息，并且工资较高的前10名显示出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL</span><br><span class="line">ORDER BY salary DESC</span><br><span class="line">LIMIT 0,10;</span><br></pre></td></tr></table></figure><hr><h2 id="3-10union联合查询"><a href="#3-10union联合查询" class="headerlink" title="3.10union联合查询"></a>3.10union联合查询</h2><p>关键字：<strong>UNION</strong> 联合 合并 ：将多条查询语句的结果合并成一个结果</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询语句1</span><br><span class="line">UNION</span><br><span class="line">查询语句2</span><br><span class="line">UNION</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>应用场景：要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时，一般用联合查询。</p><p>特点：</p><ul><li>要求多条查询语句的查询列数是一致的</li><li>要求多条查询语句查询的每一列的类型和顺序最好一致</li><li>UNION关键字默认去重，如果使用UNION ALL可以包含重复项 </li></ul><p>案例一：查询部门编号大于90或者邮箱包含a的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE email LIKE &#x27;%a%&#x27;</span><br><span class="line">OR department_id&gt;90 ;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE email LIKE &#x27;%a%&#x27;</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM employees WHERE department_id&gt;90;</span><br></pre></td></tr></table></figure><hr><h1 id="第四章-DML语言"><a href="#第四章-DML语言" class="headerlink" title="第四章    DML语言"></a>第四章    DML语言</h1><hr><p><strong>数据操纵语言</strong></p><h2 id="4-1插入语言"><a href="#4-1插入语言" class="headerlink" title="4.1插入语言"></a>4.1插入语言</h2><p><strong>INSERT</strong></p><p><strong>方式一：经典的插入</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名(列名,...) VALUES(值1,...)</span><br></pre></td></tr></table></figure><p>1.插入的值的类型要与列的类型一致或兼容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">VALUE(13,&#x27;唐艺昕&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;18988888888&#x27;,NULL,2);</span><br></pre></td></tr></table></figure><p>2.不可以为null的列必须插入值，可以为null的列如何插入值？</p><p>方式一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">VALUE(13,&#x27;唐艺昕&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;18988888888&#x27;,NULL,2);</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,boyfriend_id)</span><br><span class="line">VALUE(14,&#x27;金星&#x27;,&#x27;女&#x27;,&#x27;1980-4-13&#x27;,&#x27;18988888888&#x27;,9);</span><br></pre></td></tr></table></figure><p>3.列的顺序是否可以调换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(NAME,sex,id,phone)</span><br><span class="line">VALUE(&#x27;蒋欣&#x27;,&#x27;女&#x27;,15,&#x27;18988588888&#x27;);</span><br></pre></td></tr></table></figure><p>可以调换</p><p>4.列数和值的个数必须一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(NAME,sex,id,phone)</span><br><span class="line">VALUE(&#x27;蒋欣&#x27;,&#x27;女&#x27;,15,&#x27;18988588888&#x27;);</span><br></pre></td></tr></table></figure><p>5.可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES(18,&#x27;张飞&#x27;,&#x27;男&#x27;,NULL,&#x27;119&#x27;,NULL,NULL);</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名</span><br><span class="line">SET 列名=值,列名=值,...</span><br></pre></td></tr></table></figure><p>案例一：插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty</span><br><span class="line">SET id=19,NAME=&#x27;刘涛&#x27;,phone=&#x27;999&#x27;;</span><br></pre></td></tr></table></figure><p><strong>两种方式进行比较</strong></p><p>1.方式一：支持插入多行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">VALUE(13,&#x27;唐艺昕&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;18988888888&#x27;,NULL,2),</span><br><span class="line">(14,&#x27;唐艺昕&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;18988888888&#x27;,NULL,2),</span><br><span class="line">(15,&#x27;唐艺昕&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;18988888888&#x27;,NULL,2);</span><br></pre></td></tr></table></figure><p>2.方式一：支持子查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(id,NAME,phone)</span><br><span class="line">SELECT id,boyname,&#x27;11809866&#x27;</span><br><span class="line">FROM boys </span><br><span class="line">WHERE id&lt;3;</span><br></pre></td></tr></table></figure><hr><h2 id="4-2修改语句"><a href="#4-2修改语句" class="headerlink" title="4.2修改语句"></a>4.2修改语句</h2><p><strong>UPDATE</strong></p><p><strong>1.修改单表的记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名#1</span><br><span class="line">SET 列=新值,列=新值,...#2</span><br><span class="line">WHERE 筛选条件;#3</span><br><span class="line">#执行顺序132</span><br></pre></td></tr></table></figure><p>案例一：修改beauty表中姓唐的电话为13899889999</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE beauty</span><br><span class="line">SET phone=&#x27;13899889999&#x27;</span><br><span class="line">WHERE NAME LIKE &#x27;唐%&#x27;;</span><br></pre></td></tr></table></figure><p>案例二：修改boys表中id号为2的名称为张飞，魅力值1000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE boys</span><br><span class="line">SET boyName=&#x27;张飞&#x27;,userCP=1000</span><br><span class="line">WHERE id=2;</span><br></pre></td></tr></table></figure><p><strong>2.修改多表的记录(级联更新)</strong></p><p>语法：</p><p>sql192语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表1 别名,表2 别名</span><br><span class="line">SET 列=值,...</span><br><span class="line">WHERE 连接条件</span><br><span class="line">AND 筛选条件;</span><br></pre></td></tr></table></figure><p>sql199语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表1 别名</span><br><span class="line">INNER|LEFT|RIGHT JOIN 表2 别名</span><br><span class="line">ON 连接条件</span><br><span class="line">SET 列=值</span><br><span class="line">WHERE 筛选条件;</span><br></pre></td></tr></table></figure><p>案例一：修改张无忌女朋友的手机号为114</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE boys bo</span><br><span class="line">INNER JOIN beauty b</span><br><span class="line">ON bo.`id`=b.`boyfriend_id`</span><br><span class="line">SET phone=114</span><br><span class="line">WHERE boyName=&#x27;张无忌&#x27;;</span><br></pre></td></tr></table></figure><p>案例二：修改没有男朋友的女神的男朋友编号都为2号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE boys bo</span><br><span class="line">RIGHT JOIN beauty b</span><br><span class="line">ON bo.`id`=b.`boyfriend_id`</span><br><span class="line">SET boyfriend_id=2</span><br><span class="line">WHERE b.`boyfriend_id` IS NULL;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3删除语句"><a href="#4-3删除语句" class="headerlink" title="4.3删除语句"></a>4.3删除语句</h2><p><strong>DELETE</strong></p><p><strong>1.单表的删除</strong></p><p>方式一：<strong>DELETE</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE </span><br><span class="line">FROM 表名 </span><br><span class="line">【WHERE 筛选条件】</span><br><span class="line">【LIMIT 条目数】 </span><br></pre></td></tr></table></figure><p>案例：删除一条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE</span><br><span class="line">FROM beauty</span><br><span class="line">WHERE boyfriend_id=4</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><p>案例一：删除手机号以9结尾的女神信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE </span><br><span class="line">FROM beauty b</span><br><span class="line">WHERE phone LIKE &#x27;%9&#x27;;</span><br></pre></td></tr></table></figure><p>方式二：<strong>TRUNCATE语句</strong></p><ul><li>不允许加WHERE语句</li><li>删除表中全部数据</li></ul><p>案例二：将魅力值&gt;100的男神的信息删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#不允许筛选，全部删除</span><br></pre></td></tr></table></figure><p><strong>2.多表的删除(级联删除)</strong></p><p>方式一：<strong>DELETE</strong></p><p>语法：</p><p>sql192语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE 表1的别名，表2的别名#删除哪个表写哪个表</span><br><span class="line">FROM 表1 别名,表2 别名</span><br><span class="line">WHERE 连接条件</span><br><span class="line">AND 筛选条件;</span><br></pre></td></tr></table></figure><p>sql199语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE 表1的别名，表2的别名</span><br><span class="line">FROM 表1 别名</span><br><span class="line">INNER|LEFT|RIGHT JOIN 表2 别名 </span><br><span class="line">ON 连接条件</span><br><span class="line">WHERE 筛选条件;</span><br></pre></td></tr></table></figure><p>案例一：删除张无忌的女朋友的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE b</span><br><span class="line">FROM boys bo</span><br><span class="line">JOIN beauty b</span><br><span class="line">ON bo.`id`=b.`boyfriend_id`</span><br><span class="line">WHERE boyName=&#x27;张无忌&#x27;;</span><br></pre></td></tr></table></figure><p>案例二：删除黄晓明的信息以及他女朋友的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE b,bo</span><br><span class="line">FROM boys bo</span><br><span class="line">RIGHT JOIN beauty b</span><br><span class="line">ON bo.`id`=b.`boyfriend_id`</span><br><span class="line">WHERE boyName=&#x27;黄晓明&#x27;;</span><br></pre></td></tr></table></figure><p><strong>DELETE</strong>和<strong>TRUNCATE</strong> 比较：(<strong>面试题</strong>)</p><p>1.delete可以加<code>WHERE</code>条件,<code>TRUNCATE</code>不能加</p><p>2.<code>TRUNCATE</code>删除，效率高一点</p><p>3.加入要删除表中有自增长列，如果用delete删除后，再插入数据，自增长列从断点开始，而truncate删除后，再插入数据，自增长列的值从1开始</p><p>4.truncate删除，没有返回值，delete删除，有返回值</p><p>5.truncate删除，不能回滚，delete删除，可以回滚</p><hr><h1 id="第五章-DDL语言"><a href="#第五章-DDL语言" class="headerlink" title="第五章    DDL语言"></a>第五章    DDL语言</h1><hr><p><strong>数据定义语言</strong></p><h2 id="5-1库和表的管理"><a href="#5-1库和表的管理" class="headerlink" title="5.1库和表的管理"></a>5.1库和表的管理</h2><hr><ul><li><strong>创建：<code>CREATE</code></strong></li><li><strong>修改：<code>ALTER</code></strong></li><li><strong>删除：<code>DROP</code></strong></li></ul><p><strong>一.库的管理</strong></p><p><strong>1.库的创建</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 【IF NOT EXISTS】库名;#容错性处理</span><br></pre></td></tr></table></figure><p>案例一：创建数据库Books</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS Books;</span><br></pre></td></tr></table></figure><p><strong>2.库的修改</strong>    <del>啥用都没有</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME DATABASE Books TO 新库名;#已经不能使用了</span><br></pre></td></tr></table></figure><p>想改的话在文件夹data里面直接改文件夹名称</p><p><strong>更改库的字符集</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE Books CHARACTER SET gbk;</span><br></pre></td></tr></table></figure><p><strong>3.库的删除</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS Books;#容错性处理</span><br></pre></td></tr></table></figure><p><strong>二.表的管理</strong></p><p><strong>1.表的创建</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">          列名 列的类型 【(长度) 约束】,</span><br><span class="line">          列名 列的类型 【(长度) 约束】,</span><br><span class="line">          列名 列的类型 【(长度) 约束】,</span><br><span class="line">          ...</span><br><span class="line">          列名 列的类型 【(长度) 约束】</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>案例一：创建表Book</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Book(</span><br><span class="line">         id INT,#编号</span><br><span class="line">         bName VARCHAR(20),#图书名</span><br><span class="line">         price DOUBLE,#价格</span><br><span class="line">         authorID INT(20),#作者编号</span><br><span class="line">         publishDate DATETIME#出版日期    </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>案例二：创建表author</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS author(</span><br><span class="line">          id INT,</span><br><span class="line">          au_name VARCHAR(20),</span><br><span class="line">          nation VARCHAR(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>2.表的修改</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD|DROP|MODIFY|CHANGE COLUMN 列名 【列类型 约束】;</span><br></pre></td></tr></table></figure><ul><li>修改列名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE book CHANGE COLUMN publishDate pubDate DATETIME;</span><br></pre></td></tr></table></figure><blockquote><p>tips：<code>COLUMN</code>可以省略</p></blockquote><ul><li>修改列的类型和约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE book MODIFY COLUMN pubDate TIMESTAMP;</span><br></pre></td></tr></table></figure><ul><li>添加新列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE author ADD COLUMN annual DOUBLE;</span><br></pre></td></tr></table></figure><ul><li>删除列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE author DROP COLUMN annual;</span><br></pre></td></tr></table></figure><ul><li>修改表名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE author RENAME TO book_author;</span><br></pre></td></tr></table></figure><p><strong>3.表的删除</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS book_author;</span><br></pre></td></tr></table></figure><p><strong>通用的写法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS 旧库名;</span><br><span class="line">CREATE DATABASE 新库名;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS 旧表名;</span><br><span class="line">CREATE TABLE 新表名();</span><br></pre></td></tr></table></figure><p><strong>4.表的复制</strong></p><p><strong>1.仅复制表的结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE author LIKE book_author;</span><br></pre></td></tr></table></figure><p><strong>2.复制表的结构和数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE copytwo</span><br><span class="line">SELECT * FROM book_author;</span><br></pre></td></tr></table></figure><p><strong>3.只复制部分结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE copythree</span><br><span class="line">SELECT id,au_name</span><br><span class="line">FROM book_author</span><br><span class="line">WHERE 1=0;#恒不成立</span><br></pre></td></tr></table></figure><p><strong>4.只复制部分数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE copyfour</span><br><span class="line">SELECT id,au_name</span><br><span class="line">FEOM book_author</span><br><span class="line">WHERE nation=&#x27;中国&#x27;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-2常见数据类型介绍"><a href="#5-2常见数据类型介绍" class="headerlink" title="5.2常见数据类型介绍"></a>5.2常见数据类型介绍</h2><p><strong>数值型：</strong></p><ul><li>整型</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210915215236.png" alt="QQ截图20210915215236"></p><p>分类：tinyint、smallint、mediumint、int/integer、bigint</p><p>​             1            2                 3                  4                8   </p><p>特点：</p><ul><li>如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加unsigned</li><li>如果插入的数值超出了整型的范围，会报out of range异常，并且插入失败(新版本)，5的话插入临界值</li><li>如果不设置长度，会有默认的长度</li></ul><p>长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配** <code>ZEROFILL</code>**使用。</p><p>1.如何设置无符号和有符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tab_int(</span><br><span class="line">t1 INT,</span><br><span class="line">t2 INT UNSIGNED</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESC tab_int;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_int VALUE(-123456,-123456);#无符号范围0~4294967295</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_int;</span><br></pre></td></tr></table></figure><ul><li>小数</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210916211328.png" alt="QQ截图20210916211328"></p><p>特点：</p><ul><li>M：整数部分+小数部分     D：小数部分。如果超出范围，则插入临界值</li><li>M和D都可以省略</li></ul><p>如果是** <code>decimal(M,D)</code>**，则M默认为10，D默认为0</p><p>如果是** <code>float(M,D)</code><strong>和</strong> <code>double(M,D)</code>**，则会根据插入的数值的精度来决定精度</p><ul><li>定点型的精确度较高，如果要求插入数值的精度较高如货币运算等则考虑使用</li></ul><p>原则：所选择的类型越简单越好，能保存数值的类型越小越好</p><p>分类：</p><p>1.浮点型</p><ul><li><p>** <code>float(M,D)</code>**</p></li><li><p>** <code>double(M,D)</code>**</p></li></ul><p>2.定点型</p><ul><li>** <code>decimal(M,D)</code>**</li></ul><p><strong>字符型：</strong></p><p>1.较短的文本：</p><ul><li>** <code>char(M)</code>**</li><li>** <code>varchar(M)</code>**</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210917092411.png" alt="QQ截图20210917092411"></p><p>特点：</p><p>​                        特点                            空间的耗费             效率                     M的意思</p><p>char           固定长度的字符               比较耗费                  高             最大的字符数，可以省略，默认为1</p><p>varchar      可变长度的字符               比较节省                  低             最大的字符数，不可以省略</p><p><strong>位类型</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210917094843.png" alt="QQ截图20210917094843"></p><p><strong>binary和varbinary类型</strong></p><p>用于保存较短的二进制</p><p>说明：类似于char和varchar，不同的是他们包含二进制字符串而不包含非二进制字符串。</p><p><strong>Enum类型</strong></p><p>用于保存枚举</p><p>说明：又称枚举类型，要求插入的值必须属于列表中指定的值之一。</p><p><strong>Set类型</strong></p><p>用于保存集合</p><p>说明：和Enum类型类似，里面可以保存0~64个成员。和Enum类型最大的区别是：Set类型一次可以选取多个成员，而Enum只能选一个，根据成员个数不同，存储所占的字节也不同。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210919111952.png" alt="QQ截图20210919111952"></p><p>2.较长的文本：</p><ul><li>text</li><li>blob(较长的二进制数据)</li></ul><p><strong>日期型：</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210919112335.png" alt="QQ截图20210919112335"></p><p>分类：</p><ul><li>date只保存日期</li><li>time只保存时间</li><li>year只保存年</li><li>datetime保存日期+时间</li><li>timestamp保存日期+时间</li></ul><p>特点：</p><p>​                                             字节                             范围                           时区等的影响</p><p>datetime                                 8                             1000-9999                            不受</p><p>timestamp                              4                             1970-2038                              受</p><hr><h2 id="5-3常见约束"><a href="#5-3常见约束" class="headerlink" title="5.3常见约束"></a>5.3常见约束</h2><p><strong>含义：</strong>一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性</p><p><strong>分类：</strong>六大约束</p><ul><li>** <code>NOT NULL</code>**：非空约束，用于保证该字段的值不能为空。比如姓名、学号等</li><li>** <code>DEFAULT</code>**：默认约束，用于保证该字段有默认值。比如性别</li><li>** <code>PRIMARY KEY</code>**：主键约束，用于保证该字段的值具有唯一性，并且非空。比如学号、员工编号等</li><li>** <code>UNIQUE</code>**：唯一约束，用于保证该字段的值具有唯一性，可以为空。比如座位号</li><li>** <code>CHECK</code>**：检查约束【mysql中不支持】(不报错，但是没有效果)。比如年龄、性别</li><li>** <code>FOREIGN KEY</code>**：外键约束，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值。在从表添加外键约束，用于引用主表中某列的值。比如学生表的专业编号，员工表的部门编号，员工表的工种编号</li></ul><p><strong>添加约束的时机：</strong></p><p>1.创建表时</p><p>2.修改表时</p><p><strong>约束的添加分类</strong></p><ul><li>列级约束</li></ul><p>​           六大约束语法上都支持，但外键约束没有效果</p><ul><li>表级约束</li></ul><p>​           除了非空、默认，其他的都支持</p><p><strong>一、创建表时添加约束</strong></p><p>1.添加列级约束</p><p>语法：</p><p>直接在字段名和类型后面追加 约束类型即可。</p><p>只支持：默认、非空、主键、唯一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE students;</span><br><span class="line"></span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">id INT PRIMARY KEY,#主键</span><br><span class="line">stuName VARCHAR(20) NOT NULL,#非空</span><br><span class="line">gender CHAR(1) CHECK(gender=&#x27;男&#x27; OR gender=&#x27;女&#x27;),#检查 不报错，但是没有效果</span><br><span class="line">seat INT UNIQUE,#唯一</span><br><span class="line">age INT DEFAULT  18,#默认约束</span><br><span class="line">majorId INT REFERENCES major(id)#外键  无效果</span><br><span class="line">);</span><br><span class="line">CREATE TABLE major(</span><br><span class="line">        id INT PRIMARY KEY,</span><br><span class="line">        majorName VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESC stuinfo;</span><br><span class="line">#查看stuinfo中的所有索引，包括主键、外键、唯一</span><br><span class="line">SHOW INDEX FROM stuinfo;</span><br></pre></td></tr></table></figure><p>2.添加表级约束</p><p><strong>语法：</strong></p><p>在各个字段的最下面</p><p>【constraint 约束名】 约束类型(字段名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS stuinfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">id INT,</span><br><span class="line">stuname VARCHAR(20),</span><br><span class="line">gender CHAR(1),</span><br><span class="line">seat INT,</span><br><span class="line">age INT,</span><br><span class="line">majorid INT,</span><br><span class="line"></span><br><span class="line">CONSTRAINT pk PRIMARY KEY(id),#主键  （默认名为PRIMARY pk没有效果）</span><br><span class="line">CONSTRAINT uq UNIQUE(seat),#唯一键</span><br><span class="line">CONSTRAINT ck CHECK(gender=&#x27;男&#x27; OR gender=&#x27;女&#x27;),#检查</span><br><span class="line">CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOW INDEX FROM stuinfo;</span><br></pre></td></tr></table></figure><p><strong>通用的写法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS stuinfo(</span><br><span class="line">id INT PRIMARY KEY,</span><br><span class="line">stuname VARCHAR(20) NOT NULL,</span><br><span class="line">sex CHAR(1),</span><br><span class="line">age INT DEFAULT 18,</span><br><span class="line">seat INT UNIQUE,</span><br><span class="line">majorid INT,</span><br><span class="line">CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>二.修改表时添加约束</strong></p><p>1.添加列级约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY COLUMN 字段名 字段类型 新约束;</span><br></pre></td></tr></table></figure><p>2.添加表级约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 【CONSTRAINT 约束名】 约束类型(字段名) 【外键的引用】;</span><br></pre></td></tr></table></figure><ul><li>添加非空约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS stuinfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">id INT,</span><br><span class="line">stuname VARCHAR(20),</span><br><span class="line">gender CHAR(1),</span><br><span class="line">seat INT,</span><br><span class="line">age INT,</span><br><span class="line">majorid INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#添加非空约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NOT NULL;</span><br></pre></td></tr></table></figure><ul><li>添加默认约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;</span><br></pre></td></tr></table></figure><ul><li>添加主键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#列级约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;</span><br><span class="line">#表级约束</span><br><span class="line">ALTER TABLE stuinfo ADD PRIMARY KEY(id);</span><br></pre></td></tr></table></figure><ul><li>添加外键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id);</span><br></pre></td></tr></table></figure><p><strong>二.修改表时删除约束</strong></p><ul><li>删除非空约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除非空约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;</span><br></pre></td></tr></table></figure><ul><li>删除默认约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stuinfo MODIFY COLUMN age INT;</span><br></pre></td></tr></table></figure><ul><li>删除主键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stuinfo DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><ul><li>删除唯一</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stuinfo DROP INDEX seat;</span><br></pre></td></tr></table></figure><ul><li>删除外键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;</span><br></pre></td></tr></table></figure><p><strong>三.对比</strong></p><p><strong>1.主键和唯一</strong></p><p>​                保正唯一性       是否允许为空        一个表中可以有多少个             是否允许组合</p><p>主键              √                          ×                            至多有一个                       √，但不推荐</p><p>唯一              √                          ×                            可以有多个                       √，但不推荐</p><p>组合主键，组合唯一键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRIMARY KEY(id,stuname)#当id与stuname都相同时，会报错</span><br></pre></td></tr></table></figure><p><strong>2.外键的特点</strong></p><ul><li>要求在从表设置外键关系</li><li>从表的外键列的类型和主表的关联列的类型要求一致或兼容</li><li>主表的关联列必须是一个Key(一般是主键或唯一)</li><li>插入数据时，先插入主表，再插入从表。删除数据时，先删除从表，再删除主表</li></ul><p><strong>3.列级约束和表级约束</strong></p><p>​                              位置                          支持的约束类型                                 是否可以起约束名</p><p>列级约束：       列的后面                 语法都支持，但是外键没有效果                   不可以</p><p>表级约束：       所有列的下面          默认和非空不支持，其他支持                       可以(主键没有效果)</p><p><strong>标识列</strong></p><p>又称为自增长列</p><p><strong>含义：</strong>可以不用手动的插入值，系统提供默认的序列值</p><p><strong>特点：</strong></p><ul><li>标识列必须和主键搭配吗？不一定，但要求是一个Key</li><li>一个表可以有几个标识列？至多一个！</li><li>标识列的类型 只能是数值型</li><li>标识列可以通过SET auto_increment_increment=3;设置步长，可以通过 手动插入值，设置起始值</li></ul><p><strong>一.创建表时设置标识列</strong></p><p>关键字：** <code>AUTO_INCREMENT</code>**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS tab_indentity;</span><br><span class="line">CREATE TABLE tab_indentity(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,#标识列</span><br><span class="line">NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_indentity VALUE(NULL,&#x27;join&#x27;);</span><br><span class="line">SELECT *</span><br><span class="line">FROM tab_indentity;</span><br></pre></td></tr></table></figure><p><strong>1.MySQL中起始值永远是1，设置其他值也没有效果，但是步程可以设置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;%AUTO_INCREMENT%&#x27;;</span><br><span class="line">SET auto_increment_increment=3;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210926165712.png" alt="QQ截图20210926165712"></p><p><strong>2.设置起始值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS tab_indentity;</span><br><span class="line">CREATE TABLE tab_indentity(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,#标识列</span><br><span class="line">NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">INSERT INTO tab_indentity VALUE(10,&#x27;join&#x27;);</span><br><span class="line">INSERT INTO tab_indentity VALUE(NULL,&#x27;join&#x27;);</span><br><span class="line">SELECT *</span><br><span class="line">FROM tab_indentity;#起始值就为10了</span><br></pre></td></tr></table></figure><p><strong>二.修改表时设置标识列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tab_indentity MODIFY COLUMN id INT PRIMARY KEY AUTO_INCREMENT;</span><br></pre></td></tr></table></figure><p><strong>三.修改表时删除标识列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tab_indentity MODIFY COLUMN id INT;</span><br></pre></td></tr></table></figure><hr><h1 id="第六章-DCL语言"><a href="#第六章-DCL语言" class="headerlink" title="第六章    DCL语言"></a>第六章    DCL语言</h1><hr><p><strong>数据控制语言</strong></p><h2 id="6-1管理用户"><a href="#6-1管理用户" class="headerlink" title="6.1管理用户"></a>6.1管理用户</h2><hr><p><strong>一.添加用户</strong></p><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><p><strong>二.删除用户</strong></p><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p><strong>三.修改用户密码</strong></p><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE USER SET PASSWORD = PASSWORD(&#x27;新密码&#x27;)</span><br><span class="line">WHERE USER = &#x27;用户名&#x27;;</span><br><span class="line"></span><br><span class="line">SET PASSWORD FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; = PASSWORD(&#x27;新密码&#x27;);</span><br></pre></td></tr></table></figure><ul><li>MySQL中忘记了root用户的密码？</li></ul><p>1.cmd - - &gt; net stop mysql     停止mysql服务（需要以管理员身份运行cmd）</p><p>2.使用无验证方式启动mysql服务：mysqld –skip-grant-tables</p><p>3.打开新的cmd窗口，直接输入mysql命令，敲回车就可以登录成功</p><p>4.use mysql</p><p>5.update user set password = password(‘新密码’) where user=’root’;</p><p>6.关闭两个窗口</p><p>7.打开任务管理器，手动结束mysql.exe进程</p><p>8.启动mysql服务</p><p>9.使用新密码登录</p><p><strong>四.查询用户</strong></p><ul><li>切换到mysql数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br></pre></td></tr></table></figure><ul><li>查询user表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM USER;</span><br></pre></td></tr></table></figure><ul><li>通配符：%表示可以在任意主机使用用户登录数据库</li></ul><hr><h2 id="6-2权限管理"><a href="#6-2权限管理" class="headerlink" title="6.2权限管理"></a>6.2权限管理</h2><p><strong>一.查询权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p><strong>二.授予权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line"></span><br><span class="line">GRANT ALL ON *.* TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;#授予所有的权限</span><br></pre></td></tr></table></figure><p><strong>三.撤销权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE 权限列表 ON 数据库.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><hr><h1 id="第七章-TCL语言"><a href="#第七章-TCL语言" class="headerlink" title="第七章    TCL语言"></a>第七章    TCL语言</h1><hr><p><strong>事务控制语言(Transaction Control Language)</strong></p><h2 id="7-1事务和事务处理"><a href="#7-1事务和事务处理" class="headerlink" title="7.1事务和事务处理"></a>7.1事务和事务处理</h2><p><strong>事务：</strong>一个或一组sql语句组成的一个执行单元，这个执行单元要么全部执行，要么全部不执行。</p><p><strong>MySQL中的存储引擎</strong></p><p>1.概念：在MySQL中的数据用各种不同的技术存储在文件(或内存)中。</p><p>2.通过show engines，来查看MySQL支持的存储引擎。</p><p>3.在MySQL中用的最多存储引擎有：innodb、myisam、memory等。其中innodb支持事务，而myisam、memory等不支持事务。</p><p><strong>一.事务的ACID属性</strong></p><p><strong>1.原子性</strong>(Atomicity)</p><p>原子性是指事务是一个不可分隔的工作单位，事务中的操作要么都发生，要么都不发生。</p><p><strong>2.一致性</strong>(Consistency)</p><p>事务必须使数据库从一个一致性状态变换到另一个一致性状态。</p><p><strong>3.隔离性</strong>(Isolation)</p><p>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能相互干扰。</p><p><strong>4.持久性</strong>(Durability)</p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p><p><strong>二.事务的创建</strong></p><ul><li><strong>隐式事务：</strong>事务没有明显的开启和结束的标记。比如：INSERT、UPDATE、DELETE语句。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表 WHERE id=1;</span><br></pre></td></tr></table></figure><ul><li><strong>显式事务：</strong>事务具有明显的开启和结束的标记。前提：必须先设置自动提交功能为禁用。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET autocommit=0;#设置自动提交功能为禁用</span><br></pre></td></tr></table></figure><p>步骤一：开启事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET autocommit=0;</span><br><span class="line">START transaction;#可选的</span><br></pre></td></tr></table></figure><p>步骤二：编写事务中的sql语句(SELECT  INSERT  UPDATE  DELETE)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语句1;</span><br><span class="line">语句2;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>步骤三：结束事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COMMIT;提交事务</span><br><span class="line">ROLLBACK;回滚事务</span><br><span class="line">SAVEPOINT;节点名,设置保存点</span><br></pre></td></tr></table></figure><p><strong>演示事务的使用步骤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#开启事务</span><br><span class="line">SET autocommit=0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">#编写一组事务语句</span><br><span class="line">UPDATE account SET balance = 1500 WHERE username=&#x27;张无忌&#x27;;</span><br><span class="line">UPDATE account SET balance = 500  WHERE username=&#x27;赵敏&#x27;;</span><br><span class="line">#结束事务</span><br><span class="line">COMMIT;#提交</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#开启事务</span><br><span class="line">SET autocommit=0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">#编写一组事务语句</span><br><span class="line">UPDATE account SET balance = 1000 WHERE username=&#x27;张无忌&#x27;;</span><br><span class="line">UPDATE account SET balance = 1000  WHERE username=&#x27;赵敏&#x27;;</span><br><span class="line">#结束事务</span><br><span class="line">ROLLBACK;#回滚</span><br><span class="line"></span><br><span class="line">#执行成功后，结果查看为 张无忌1500 赵敏500 不变</span><br></pre></td></tr></table></figure><p><strong>事务的并发问题</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210928194246.png" alt="QQ截图20210928194246"></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210928194400.png" alt="QQ截图20210928194400"></p><p><strong>演示事务的隔离级别</strong></p><p>​                                                        脏读                    不可重复读                  幻读</p><ul><li>READ UNCOMMITTED             √                              √                              √ </li><li>READ COMMITTED                  ×                              √                              √</li><li>REPEATABLE READ                 ×                              ×                              √</li><li>SERIALIZABLE                          ×                              ×                              ×</li></ul><p>MySQL中默认 第三个隔离级别 REPEATABLE READ</p><p>Oracle中默认 第二个隔离级别 READ COMMITTED </p><p>查看隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@transaction_isolation;</span><br></pre></td></tr></table></figure><p>设置当前MySQL连接的隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br></pre></td></tr></table></figure><p>设置数据库系统的全局的隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br></pre></td></tr></table></figure><p><strong>演示savepoint的使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SET autocommit=0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM account WHERE id=25;</span><br><span class="line">SAVEPOINT a;#设置保存点</span><br><span class="line">DELETE FROM account WHERE id=28;</span><br><span class="line">ROLLBACK TO a;#回滚到保存点</span><br></pre></td></tr></table></figure><hr><h1 id="第八章-视图的讲解"><a href="#第八章-视图的讲解" class="headerlink" title="第八章    视图的讲解"></a>第八章    视图的讲解</h1><hr><p><strong>含义：</strong>虚拟表，和普通表一样使用</p><p>MySQL5.1版本出现的新特性，是通过表动态生成的数据</p><p><strong>应用场景</strong></p><ul><li>多个地方用到同样的查询结果</li><li>该查询结果使用的sql语句较复杂</li></ul><p><strong>视图的好处</strong></p><ul><li>重用sql语句</li><li>简化复杂的sql操作，不必知道它的查询细节</li><li>保护数据，提高安全性</li></ul><p>案例一：查询姓张的学生名和专业名</p><p>以前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT stuname,majorname</span><br><span class="line">FROM stuinfo s</span><br><span class="line">INNER JOIN major m</span><br><span class="line">ON s.`majorid`=m.`id`</span><br><span class="line">WHERE s.`stuname` LIKE &#x27;张%&#x27;;</span><br></pre></td></tr></table></figure><p>通过视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW v1</span><br><span class="line">AS</span><br><span class="line">SELECT stuname,majorname</span><br><span class="line">FROM stuinfo s</span><br><span class="line">INNER JOIN major m</span><br><span class="line">ON s.`majorid`=m.`id`;#通过视图进行封装</span><br><span class="line"></span><br><span class="line">SELECT * FROM v1 WHERE stuname LIKE &#x27;张%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>一.创建视图</strong></p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW 视图名</span><br><span class="line">AS</span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure><p>案例一：查询姓名中包含a字符的员工名、部门名和工种信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">USE myemployees;</span><br><span class="line">#创建</span><br><span class="line">CREATE VIEW myv1</span><br><span class="line">AS </span><br><span class="line">SELECT last_name,department_name,job_title </span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d</span><br><span class="line">ON e.department_id=d.department_id</span><br><span class="line">JOIN jobs j</span><br><span class="line">ON j.job_id = e.job_id;</span><br><span class="line">#使用</span><br><span class="line">SELECT *</span><br><span class="line">FROM myv1</span><br><span class="line">WHERE last_name LIKE &#x27;%a%&#x27;;</span><br></pre></td></tr></table></figure><p>案例二：查询各部门的平均工资级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#创建</span><br><span class="line">CREATE VIEW myv2</span><br><span class="line">AS</span><br><span class="line">SELECT AVG(salary) ag,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line">#使用</span><br><span class="line">SELECT myv2.`ag`,g.grade_level</span><br><span class="line">FROM myv2</span><br><span class="line">JOIN job_grades g</span><br><span class="line">ON myv2.`ag` BETWEEN g.`iowest_sal` AND g.`highest_sal`;</span><br></pre></td></tr></table></figure><p>案例三：查询平均工资最低的部门的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM myv2 ORDER BY ag LIMIT 1;</span><br></pre></td></tr></table></figure><p>案例四：查询平均工资最低的部门名和工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT *</span><br><span class="line">FROM myv2 ORDER BY ag LIMIT 1;</span><br><span class="line"></span><br><span class="line">SELECT d.*,m.ag</span><br><span class="line">FROM myv3 m</span><br><span class="line">JOIN departments d</span><br><span class="line">ON m.`department_id`=d.`department_id`;</span><br></pre></td></tr></table></figure><p><strong>二.视图的修改</strong></p><p>方式一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW </span><br><span class="line">AS</span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW 视图名</span><br><span class="line">AS</span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure><p><strong>三.删除视图</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW 视图名,视图名,...;</span><br></pre></td></tr></table></figure><p><strong>四.查看视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DESC myv3;</span><br><span class="line"></span><br><span class="line">SHOW CREATE VIEW myv3;</span><br></pre></td></tr></table></figure><p><strong>五.视图的更新</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,email</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT * FROM myv1;</span><br></pre></td></tr></table></figure><blockquote><p>tips：对视图进行更新时，原始表也会进行更新</p></blockquote><p>1.插入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO MYV1 VALUE(&#x27;张飞&#x27;,&#x27;zf@qq.com&#x27;);</span><br></pre></td></tr></table></figure><p>2.修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE myv1 SET last_name=&#x27;张无忌&#x27; WHERE last_name=&#x27;张飞&#x27;;</span><br></pre></td></tr></table></figure><p>3.删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM myv1 WHERE last_name=&#x27;张无忌&#x27;;</span><br></pre></td></tr></table></figure><p>4.具备以下特点的视图不能更新</p><ul><li>包含以下关键字的sql语句:分组函数、distinct、group by、having、union或者union all</li><li>常量视图</li><li>Select中也含子查询</li><li>join</li><li>from—个不能更新的视图</li><li>where子句的子查询引用了from子句中的表</li></ul><p><strong>六.视图与表的对比</strong></p><p>​                                      创建语法的关键字                          是否实际占用物理空间                          使用</p><p>视图                                  create view                                  只是保存了sql逻辑                 增删改查，一般不能增删改</p><p>表                                      create table                                       保存了数据                                   增删改查</p><p><strong>七.delete和truncate在事务使用时的区别</strong></p><p>1.演示delete</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET autocommit=0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM account;</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><p>2.演示truncate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET autocommit=0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">TRUNCATE TABLE account;</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><blockquote><p>delete支持回滚，truncate不支持回滚</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-初识MySQL&quot;&gt;&lt;a href=&quot;#第一章-初识MySQL&quot; class=&quot;headerlink&quot; title=&quot;第一章    初识MySQL&quot;&gt;&lt;/a&gt;第一章    初识MySQL&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1相关概念&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="MySQL" scheme="https://www.stq555.com/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://www.stq555.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式</title>
    <link href="https://www.stq555.com/2022/01/13/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://www.stq555.com/2022/01/13/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-01-13T05:30:56.000Z</published>
    <updated>2022-01-13T05:32:05.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Lambda表达式"><a href="#第一章-Lambda表达式" class="headerlink" title="第一章    Lambda表达式"></a>第一章    Lambda表达式</h1><hr><h2 id="1-1函数式编程思想概述"><a href="#1-1函数式编程思想概述" class="headerlink" title="1.1函数式编程思想概述"></a>1.1函数式编程思想概述</h2><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210811130116.png" alt="QQ截图20210811130116"></p><p>在数学中，<strong>函数</strong>就是有输入量、输出量的一套计算方案，也就是”拿什么东西做什么事情”。相对而言，面向对象过分强调”必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法–<strong>强调做什么，而不是以什么形式做</strong>。</p><p>面向对象的思想：</p><ul><li>做一件事情，找一个能解决这个事情的对象，调用对象的方法，完成事情。</li></ul><p>函数式编程思想：</p><ul><li>只要能获取到结果，谁去做的，怎么做的都不重要，重视的是结果，不重视过程。</li></ul><hr><h2 id="1-2冗余的Runnable代码"><a href="#1-2冗余的Runnable代码" class="headerlink" title="1.2冗余的Runnable代码"></a>1.2冗余的Runnable代码</h2><h3 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h3><p>当需要启动一个线程去完成任务时，通常会通过<code>java.lang.Runnable</code>接口来定义任务内容，并使用<code>java.lang.Thread</code>类来启动该线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo13Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        Runnable task =<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//覆盖重写抽象方法</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;多线程任务执行！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();<span class="comment">//启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“一切皆对象”的思想：首先创建一个<code>Runnable</code>接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>对于<code>Runnable</code>的匿名内部类用法，可以分析出几点内容︰</p><ul><li><code>Thread</code>类需要<code>Runnable</code>接口作为参数，其中的抽象run方法是用来指定线程任务内容的核心;</li><li>为了指定 <code>run</code>的方法体，<strong>不得不</strong>需要<code>Runnable</code>接口的实现类;</li><li>为了省去定义一个<code>RunnableImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类;</li><li>必须覆盖重写抽象<code>run</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错;</li><li>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</li></ul><hr><h2 id="1-3编程思想转换"><a href="#1-3编程思想转换" class="headerlink" title="1.3编程思想转换"></a>1.3编程思想转换</h2><h3 id="做什么，而不是怎么做"><a href="#做什么，而不是怎么做" class="headerlink" title="做什么，而不是怎么做"></a>做什么，而不是怎么做</h3><p>我们真的希望创建一个匿名内部类对象吗?不。我们只是为了做这件事情而<strong>不得不</strong>创建一个对象。我们真正希望做的事情是︰将<code>run</code>方法体内的代码传递给<code>Thread</code>类知晓。</p><p><strong>传递一段代码</strong>——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那，有没有更加简单的办法?如果我们将关注点从”怎么做”回归到“做什么””的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p><h3 id="生活举例"><a href="#生活举例" class="headerlink" title="生活举例"></a>生活举例</h3><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210811133204.png" alt="QQ截图20210811133204"></p><p>当我们需要从北京到上海时，可以选择高铁、汽车、骑行或是徒步。我们的真正目的是到达上海，而如何才能到达上海的形式并不重要，所以我们一直在探索有没有比高铁更好的方式―一搭乘飞机。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210811133256.png" alt="QQ截图20210811133256"></p><p>而现在这种飞机(甚至是飞船）已经诞生∶2014年3月Oracle所发布的Java 8 ( JDK 1.8)中，加入了<strong>Lambda表达式</strong>这一重量级新特性，为我们打开了新世界的大门。</p><hr><h2 id="1-4体验Lambda的更优写法"><a href="#1-4体验Lambda的更优写法" class="headerlink" title="1.4体验Lambda的更优写法"></a>1.4体验Lambda的更优写法</h2><p>借助Java 8的全新语法，上述<code>Runnable</code>接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效︰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo13Runnable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LambdaRunnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">&quot;新线程创建来&quot;</span>)).start();<span class="comment">//启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码和刚才的执行效果是完全一样的，可以在1.8或更高的编译级别下通过。从代码的语义中可以看出∶我们启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。</p><p>不再有”不得不创建接口对象”的束缚，不再有”抽象方法覆盖重写”的负担，就是这么easy!</p><hr><h2 id="1-5回顾匿名内部类"><a href="#1-5回顾匿名内部类" class="headerlink" title="1.5回顾匿名内部类"></a>1.5回顾匿名内部类</h2><h3 id="使用实现类"><a href="#使用实现类" class="headerlink" title="使用实现类"></a>使用实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo05.Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            RunnableImpl run =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">            Thread t =<span class="keyword">new</span> Thread(run);</span><br><span class="line">            t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用匿名内部类"><a href="#使用匿名内部类" class="headerlink" title="使用匿名内部类"></a>使用匿名内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo05.Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06InnerClassThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//简化接口的方式</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类的好处与弊端"><a href="#匿名内部类的好处与弊端" class="headerlink" title="匿名内部类的好处与弊端"></a>匿名内部类的好处与弊端</h3><p>一方面，匿名内部类可以帮我们<strong>省去实现类的定义</strong>；另一方面，匿名内部类的语法<strong>确实太复杂了</strong>。</p><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>仔细分析代码中的语义，<code>Runnable</code>接口中只有一个<code>run</code>方法的定义：</p><ul><li><code>public abstract void run();</code></li></ul><p>即制定了一种做事情的方案(其实就是一个函数)：</p><ul><li><strong>无参数</strong>：不需要任何条件即可执行方案。</li><li><strong>无返回值</strong>：该方案不产生任何结果。</li><li><strong>代码块</strong>(方法体)：该方案的具体执行步骤。</li></ul><p>同样的语义体现在<code>Lambda</code>语法中，要更加简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()-&gt; System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>前面的一对小括号即<code>run</code>方法的参数(无)，代表不需要任何条件；</li><li>中间的一个箭头代表将前面的参数传递给后面的代码；</li><li>后面的输出语句即业务逻辑代码。</li></ul><hr><h2 id="1-6Lambda标准格式"><a href="#1-6Lambda标准格式" class="headerlink" title="1.6Lambda标准格式"></a>1.6Lambda标准格式</h2><p>Lambda省去面向对象的条条框框，格式由<strong>3个部分</strong>组成：</p><ul><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ul><p>Lambda表达式的<strong>标准格式</strong>为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数类型 参数名称)-&gt;&#123; 代码语句 &#125;</span><br></pre></td></tr></table></figure><p>解释说明格式:</p><ul><li>()：接口中抽象方法的参数列表,没有参数,就空着;有参数就写出参数,多个参数使用逗号分隔</li><li>-&gt;：传递的意思,把参数传递给方法体{}</li><li>{}：重写接口的抽象方法的方法体</li></ul><hr><h2 id="1-7练习：使用Lambda标准格式-无参无返回"><a href="#1-7练习：使用Lambda标准格式-无参无返回" class="headerlink" title="1.7练习：使用Lambda标准格式(无参无返回)"></a>1.7练习：使用Lambda标准格式(无参无返回)</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个厨子<code>Cook</code>接口，内含唯一的抽象方法<code>makeFood</code>，且无参数、无返回值。如下︰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，请使用Lambda的标准格式调用<code>invokeCook</code>方法，打印输出“吃饭啦!”字样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InvokeCook</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// TODO请在此使用Lambda【标准格式】调用invokecook方法</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span> <span class="params">(Cook cook)</span> </span>&#123;</span><br><span class="line">       cook.makeFood(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo14Case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo14Case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InvokeCook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//之前的方法</span></span><br><span class="line"><span class="comment">//       invokeCook(new Cook() &#123;</span></span><br><span class="line"><span class="comment">//           @Override</span></span><br><span class="line"><span class="comment">//           public void makeFood() &#123;</span></span><br><span class="line"><span class="comment">//               System.out.println(&quot;吃饭啦！&quot;);</span></span><br><span class="line"><span class="comment">//           &#125;</span></span><br><span class="line"><span class="comment">//       &#125;);</span></span><br><span class="line">        <span class="comment">//使用Lambda表达式</span></span><br><span class="line">        invokeCook(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;吃饭啦！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span> <span class="params">(Cook cook)</span> </span>&#123;</span><br><span class="line">        cook.makeFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：小括号代表<code>Cook</code> 接口<code>makeFood</code>方法的参数为空，大括号代表<code>makeFood</code>的方法体。</p></blockquote><hr><h2 id="1-8Lambda的参数和返回值"><a href="#1-8Lambda的参数和返回值" class="headerlink" title="1.8Lambda的参数和返回值"></a>1.8Lambda的参数和返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求：</span><br><span class="line">    使用数组储存多个Person对象</span><br><span class="line">    对数组中的Persion对象使用Arrays的sort方法通过年龄进行升序排序</span><br></pre></td></tr></table></figure><p>下面举例演示<code>java.util.Comparator&lt;T&gt;</code>接口的使用场景代码，其中的抽象方法定义为：</p><ul><li><code>public abstract int compare(T o1, T o2);</code></li></ul><p>当需要对一个对象数组进行排序时，<code>Arrays.sort</code>方法需要一个<code>Comparator</code>接口实例来指定排序的规则。假设有一个<code>Person</code>类，含有<code>String name</code>和<code>int age</code>两个成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="传统写法-1"><a href="#传统写法-1" class="headerlink" title="传统写法"></a>传统写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] arr= &#123;</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="number">19</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;小李&quot;</span>,<span class="number">23</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;小林&quot;</span>,<span class="number">18</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Person p : arr) &#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda写法"><a href="#Lambda写法" class="headerlink" title="Lambda写法"></a>Lambda写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] arr= &#123;</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="number">19</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;小李&quot;</span>,<span class="number">23</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;小林&quot;</span>,<span class="number">18</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(arr,(Person o1, Person o2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Person p : arr) &#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-9练习：使用Lambda标准格式-有参有返回"><a href="#1-9练习：使用Lambda标准格式-有参有返回" class="headerlink" title="1.9练习：使用Lambda标准格式(有参有返回)"></a>1.9练习：使用Lambda标准格式(有参有返回)</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给定一个计算器<code>Calculator</code>接口，内含抽象方法<code>calc</code>可以将两个int数字相加得到和值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，请使用Lambda的<strong>标准格式</strong>调用<code>invokeCalc</code>方法，完成120和130的相加计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InvokeCalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO请在此使用Lambda【标准格式】调用invokecalc方法来计算120+130的结果β</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCalc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,Calculator calculator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=calculator.calc(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InvokeCalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO请在此使用Lambda【标准格式】调用invokecalc方法来计算120+130的结果β</span></span><br><span class="line">        <span class="comment">//传统方式</span></span><br><span class="line"><span class="comment">//        invokeCalc(20, 30, new Calculator() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int calc(int a, int b) &#123;</span></span><br><span class="line"><span class="comment">//                return a+b;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        <span class="comment">//Lambda</span></span><br><span class="line">        invokeCalc(<span class="number">120</span>,<span class="number">130</span>,(<span class="keyword">int</span> a,<span class="keyword">int</span> b)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCalc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,Calculator calculator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=calculator.calc(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-10Lambda省略格式"><a href="#1-10Lambda省略格式" class="headerlink" title="1.10Lambda省略格式"></a>1.10Lambda省略格式</h2><h3 id="可推导即可省略"><a href="#可推导即可省略" class="headerlink" title="可推导即可省略"></a>可推导即可省略</h3><p>Lambda强调的是“做什么”而不是“怎么做”，所以凡是可以根据上下文推导得知的信息，都可以省略。例如上例还可以使用Lambda的省略写法∶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   invokecalc(<span class="number">120</span>，<span class="number">130</span>，(a, b) -&gt;a+ b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h3><p>在Lambda标准格式的基础上，使用省略写法的规则为:</p><ul><li>小括号内参数的类型可以省略;</li><li>如果小括号内有且仅有一个参，则小括号可以省略;</li><li>如果大括号内有且仅有一个语句，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li></ul><blockquote><p>备注:掌握这些省略规则后，请对应地回顾本章开头的多线程案例。</p></blockquote><hr><h2 id="1-11练习：使用Lambda省略格式"><a href="#1-11练习：使用Lambda省略格式" class="headerlink" title="1.11练习：使用Lambda省略格式"></a>1.11练习：使用Lambda省略格式</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InvokeCalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        invokeCalc(<span class="number">120</span>,<span class="number">130</span>,(<span class="keyword">int</span> a,<span class="keyword">int</span> b)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCalc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,Calculator calculator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=calculator.calc(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo15Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InvokeCalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        invokeCalc(<span class="number">120</span>,<span class="number">130</span>,(a,b)-&gt;a+b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCalc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,Calculator calculator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=calculator.calc(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-12Lambda的使用前提"><a href="#1-12Lambda的使用前提" class="headerlink" title="1.12Lambda的使用前提"></a>1.12Lambda的使用前提</h2><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意:</p><p>1.使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法</strong>。<br>无论是JDK内置的<code>Runnable</code> 、<code>comparator</code> 接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</p><p>2.使用Lambda必须具有<strong>上下文推断</strong>。<br>也就是方法的参数或局部变星类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</p><blockquote><p>备注:有且仅有一个抽象方法的接口，称为“函数式接口”。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-Lambda表达式&quot;&gt;&lt;a href=&quot;#第一章-Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;第一章    Lambda表达式&quot;&gt;&lt;/a&gt;第一章    Lambda表达式&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1函数式编程思想</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Junit、反射、注解、枚举类</title>
    <link href="https://www.stq555.com/2022/01/12/Junit%E3%80%81%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    <id>https://www.stq555.com/2022/01/12/Junit%E3%80%81%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E6%9E%9A%E4%B8%BE%E7%B1%BB/</id>
    <published>2022-01-12T09:26:20.000Z</published>
    <updated>2022-01-12T09:34:57.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Junit单元测试"><a href="#第一章-Junit单元测试" class="headerlink" title="第一章    Junit单元测试"></a>第一章    Junit单元测试</h1><hr><h2 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h2><ul><li>测试分类：</li></ul><p>1.黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</p><p>2.白盒测试：需要写代码。关注程序具体的执行流程。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820172911.png" alt="QQ截图20210820172911"></p><hr><h2 id="1-2使用步骤"><a href="#1-2使用步骤" class="headerlink" title="1.2使用步骤"></a>1.2使用步骤</h2><p><strong>Junit(白盒测试)</strong></p><p><strong>步骤：</strong></p><p>1.定义一个测试类(测试用例)</p><p>建议：测试类名：被测试的类名Test</p><p>​           包名：xxx.xxx.xx.test</p><p>2.定义测试方法：可以独立运行</p><p>建议：方法名：test+测试的方法名</p><p>​           返回值：void</p><p>​           参数列表：空参</p><p>3.给方法加@Test</p><p>4.导入junit依赖环境</p><p><strong>判定结果：</strong></p><ul><li><p>红色：失败</p></li><li><p>绿色：成功</p></li></ul><p>一般我们会使用断言操作来处理结果</p><ul><li>Assert.assertEquals(期望的结果,运算的结果);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01Junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Junit</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.priv.demo01Junit.Demo01Junit;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01JunitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试add方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Demo01Junit d =<span class="keyword">new</span> Demo01Junit();</span><br><span class="line">        <span class="keyword">int</span> i = d.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Demo01Junit d =<span class="keyword">new</span> Demo01Junit();</span><br><span class="line">        <span class="keyword">int</span> i = d.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        Assert.assertEquals(-<span class="number">1</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-Before-amp-After"><a href="#1-3-Before-amp-After" class="headerlink" title="1.3@Before&amp;@After"></a>1.3@Before&amp;@After</h2><p>1.@Before：</p><ul><li>修饰的方法会在测试方法之前被自动执行</li></ul><p>2.@After：</p><ul><li>修饰的方法会在测试方法之后被自动执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化方法：</span></span><br><span class="line"><span class="comment"> *   用于资源申请，所有测试方法在执行之前都会执行该方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源方法：</span></span><br><span class="line"><span class="comment"> *   在所有测试方法执行完后，都会自动执行该方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;close...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第二章-反射"><a href="#第二章-反射" class="headerlink" title="第二章    反射"></a>第二章    反射</h1><hr><h2 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h2><p><strong>反射：框架设计的灵魂</strong></p><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</p><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820192313.png" alt="QQ截图20210820192313"></p><p>好处：</p><ul><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ul><hr><h2 id="2-2获取Class对象的方式"><a href="#2-2获取Class对象的方式" class="headerlink" title="2.2获取Class对象的方式"></a>2.2获取Class对象的方式</h2><p>1.Class.forName(“全类名”)：将字节码文件加载进内存，返回Class文件。</p><ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul><p>2.类名.class：通过类名的属性class获取。</p><ul><li>多用于参数的传递</li></ul><p>3.对象.getClass()：getClass()方法在Object类中定义着。</p><ul><li>多用于对象的获取字节码的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.Class.forName(&quot;全类名&quot;)：将字节码文件加载进内存，返回Class文件。</span></span><br><span class="line">        Class cls1 = Class.forName(<span class="string">&quot;com.priv.demo02Reflect.Person&quot;</span>);</span><br><span class="line">        System.out.println(cls1);<span class="comment">//class com.priv.demo02Reflect.Person</span></span><br><span class="line">        <span class="comment">//2.类名.class：通过类名的属性class获取。</span></span><br><span class="line">        Class cls2 = Person.class;</span><br><span class="line">        System.out.println(cls2);<span class="comment">//class com.priv.demo02Reflect.Person</span></span><br><span class="line">        <span class="comment">//3.对象.getClass()：getClass()方法在Object类中定义着。</span></span><br><span class="line">        Person person =<span class="keyword">new</span> Person();</span><br><span class="line">        Class cls3 = person.getClass();</span><br><span class="line">        System.out.println(cls3);<span class="comment">//class com.priv.demo02Reflect.Person</span></span><br><span class="line"></span><br><span class="line">        System.out.println(cls1==cls2);<span class="comment">//比较地址值是否相同  true</span></span><br><span class="line">        System.out.println(cls1==cls3);<span class="comment">//true</span></span><br><span class="line">        System.out.println(cls3==cls2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>同一字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li></ul><hr><h2 id="2-3Class对象功能"><a href="#2-3Class对象功能" class="headerlink" title="2.3Class对象功能"></a>2.3Class对象功能</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>1.获取功能：</strong></p><ul><li>获取成员变量们</li><li>获取构造方法们</li><li>获取成员方法们</li><li>获取类名</li></ul><h3 id="获取Field-成员变量"><a href="#获取Field-成员变量" class="headerlink" title="获取Field(成员变量)"></a>获取Field(成员变量)</h3><ul><li><p><code>Field[] getFields()：</code>返回一个包含某些 <code>Field</code> 对象的数组，这些对象反映此 <code>Class</code>  对象所表示的类或接口的所有可访问公共字段。**(获取所有public修饰的成员变量)**</p></li><li><p><code>Field[] getField(String name)：</code>返回一个 <code>Field</code> 对象，它反映此 <code>Class</code> 对象所表示的类或接口的指定公共成员字段。</p></li><li><p><code>Field[] getDeclaredFields()：</code>返回 <code>Field</code> 对象的一个数组，这些对象反映此 <code>Class</code> 对象所表示的类或接口所声明的所有字段。**(获取所有的成员变量，不考虑修饰符)**</p></li><li><p><code>Field[] getDeclaredField(String name)：</code>返回一个 <code>Field</code> 对象，该对象反映此 <code>Class</code> 对象所表示的类或接口的指定已声明字段。</p></li></ul><p><code>Field</code>：成员变量</p><p>操作：</p><p>1.设置值</p><ul><li><code>void set(Object obj,Object value)</code></li></ul><p>2.获取值</p><ul><li><code>get(Object obj)</code></li></ul><p>3.忽略访问权限修饰符的安全检查</p><ul><li>对象名.setAccessible(true)：暴力反射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">//`Field[] getFields()：`返回一个包含某些 `Field` 对象的数组，**(获取所有public修饰的成员变量)**</span></span><br><span class="line">        Field[] fields = personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field:fields) &#123;</span><br><span class="line">            System.out.println(field);<span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.sex</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`Field[] getField(String name)：`返回一个 `Field` 对象，</span></span><br><span class="line">        Field sex = personClass.getField(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        <span class="comment">//获取成员变量sex的值</span></span><br><span class="line">        Person p =<span class="keyword">new</span> Person();</span><br><span class="line">        Object value = sex.get(p);</span><br><span class="line">        System.out.println(value);<span class="comment">//没有初始值的String类型数据默认值为null</span></span><br><span class="line">        <span class="comment">//设置成员变量sex的值</span></span><br><span class="line">        sex.set(p,<span class="string">&quot;man&quot;</span>);</span><br><span class="line">        System.out.println(p);<span class="comment">//Person&#123;name=&#x27;null&#x27;, age=0, sex=&#x27;man&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`Field[] getDeclaredFields()：返回 `Field` 对象的一个数组，**(获取所有的成员变量，不考虑修饰符)**</span></span><br><span class="line">        Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field: declaredFields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">            <span class="comment">//private java.lang.String com.priv.demo02Reflect.Person.name</span></span><br><span class="line">            <span class="comment">//private int com.priv.demo02Reflect.Person.age</span></span><br><span class="line">            <span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.sex</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`Field[] getDeclaredField(String name)：`返回一个 `Field` 对象</span></span><br><span class="line">        Field name = personClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">///忽略访问权限修饰符的安全检查</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        Object value1 = name.get(p);</span><br><span class="line">        System.out.println(value1);<span class="comment">//如果直接打印私有成员变量的值会报错IllegalAccessException</span></span><br><span class="line">        <span class="comment">//null</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取Constructor-构造方法"><a href="#获取Constructor-构造方法" class="headerlink" title="获取Constructor(构造方法)"></a>获取Constructor(构造方法)</h3><ul><li><code>Constructor&lt;?&gt;[] getConstructors()：</code>返回一个包含某些 <code>Constructor</code> 对象的数组，这些对象反映此 <code>Class</code>  对象所表示的类的所有公共构造方法。**(获取所有public修饰的构造方法)**</li><li><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)：</code>返回一个 <code>Constructor</code> 对象，它反映此 <code>Class</code> 对象所表示的类的指定公共构造方法。</li><li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)：</code>返回一个 <code>Constructor</code> 对象，该对象反映此 <code>Class</code> 对象所表示的类或接口的指定构造方法。</li><li><code>Constructor&lt;?&gt; getDeclaredConstructors()：</code>返回 <code>Constructor</code> 对象的一个数组，这些对象反映此 <code>Class</code> 对象表示的类声明的所有构造方法。**(获取所有的构造方法，不考虑修饰符)**</li></ul><p><code>Constructor</code>：构造方法</p><p>创建对象：</p><ul><li><code>T newInstance(Object... initargs)</code></li><li>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</li><li>忽略访问权限修饰符的安全检查，对象名.setAccessible(true)：暴力反射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03ReflectConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">//`Constructor&lt;?&gt;[] getConstructors()：`返回一个包含某些 `Constructor` 对象的数组</span></span><br><span class="line">        Constructor[] constructors = personClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor:constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">            <span class="comment">//public com.priv.demo02Reflect.Person()</span></span><br><span class="line">            <span class="comment">//public com.priv.demo02Reflect.Person(java.lang.String,int,java.lang.String)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)：`返回一个 `Constructor` 对象</span></span><br><span class="line">        <span class="comment">//满参</span></span><br><span class="line">        Constructor constructor = personClass.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">        System.out.println(constructor);<span class="comment">//public com.priv.demo02Reflect.Person(java.lang.String,int,java.lang.String)</span></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object person = constructor.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">24</span>, <span class="string">&quot;man&quot;</span>);</span><br><span class="line">        System.out.println(person);<span class="comment">//Person&#123;name=&#x27;张三&#x27;, age=24, sex=&#x27;man&#x27;&#125;</span></span><br><span class="line">        <span class="comment">//空参</span></span><br><span class="line">        Constructor constructor1 = personClass.getConstructor();</span><br><span class="line">        System.out.println(constructor1);<span class="comment">//public com.priv.demo02Reflect.Person()</span></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object person1 = constructor1.newInstance();</span><br><span class="line">        System.out.println(person1);<span class="comment">//Person&#123;name=&#x27;null&#x27;, age=0, sex=&#x27;null&#x27;&#125;</span></span><br><span class="line">        <span class="comment">//相当于Object o = personClass.newInstance();</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取Method-成员方法"><a href="#获取Method-成员方法" class="headerlink" title="获取Method(成员方法)"></a>获取Method(成员方法)</h3><ul><li><code>Method[] getMethods()：</code>返回一个包含某些 <code>Method</code> 对象的数组，这些对象反映此 <code>Class</code>  对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 <em>member</em> 方法。**(获取所有public修饰的成员方法)**</li><li><code>Method[] getMethod(String name,类&lt;?&gt;... parameterTypes)：</code>返回一个 <code>Method</code> 对象，它反映此 <code>Class</code> 对象所表示的类或接口的指定公共成员方法。</li><li><code>Method[] getDeclaredMethods()：</code>返回 <code>Method</code> 对象的一个数组，这些对象反映此 <code>Class</code>  对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。**(获取所有的成员方法，不考虑修饰符)**</li><li><code>Method[] getDeclaredMethod(String name,类&lt;?&gt;... parameterTypes)：</code>返回一个 <code>Method</code> 对象，该对象反映此 <code>Class</code> 对象所表示的类或接口的指定已声明方法。</li></ul><p>Method：方法对象</p><ul><li>执行方法：<code>Object invoke(Object obj,Object... args)</code></li><li>获取方法名称：<code>String getName</code>：获取方法名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04ReflectMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">        <span class="comment">//`Method[] getMethods()：`返回一个包含某些 `Method` 对象的数组</span></span><br><span class="line">        Method[] methods = personClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method:methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">            String name = method.getName();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.toString()</span></span><br><span class="line">            <span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.getName()</span></span><br><span class="line">            <span class="comment">//public void com.priv.demo02Reflect.Person.setName(java.lang.String)</span></span><br><span class="line">            <span class="comment">//public void com.priv.demo02Reflect.Person.setAge(int)</span></span><br><span class="line">            <span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.getSex()</span></span><br><span class="line">            <span class="comment">//public void com.priv.demo02Reflect.Person.setSex(java.lang.String)</span></span><br><span class="line">            <span class="comment">//public int com.priv.demo02Reflect.Person.getAge()</span></span><br><span class="line">            <span class="comment">//public final void java.lang.Object.wait() throws java.lang.InterruptedException</span></span><br><span class="line">            <span class="comment">//public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span></span><br><span class="line">            <span class="comment">//public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span></span><br><span class="line">            <span class="comment">//public boolean java.lang.Object.equals(java.lang.Object)</span></span><br><span class="line">            <span class="comment">//public native int java.lang.Object.hashCode()</span></span><br><span class="line">            <span class="comment">//public final native java.lang.Class java.lang.Object.getClass()</span></span><br><span class="line">            <span class="comment">//public final native void java.lang.Object.notify()</span></span><br><span class="line">            <span class="comment">//public final native void java.lang.Object.notifyAll()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//`Method[] getMethod(String name,类&lt;?&gt;... parameterTypes)：`返回一个 `Method` 对象</span></span><br><span class="line">            Method eat = personClass.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">            System.out.println(eat);<span class="comment">//public void com.priv.demo02Reflect.Person.eat()</span></span><br><span class="line">            Person p =<span class="keyword">new</span> Person();</span><br><span class="line">            <span class="comment">//执行方法</span></span><br><span class="line">            eat.invoke(p);</span><br><span class="line"></span><br><span class="line">            Method eat1 = personClass.getMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">            eat1.invoke(p,<span class="string">&quot;饭&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="获取类名"><a href="#获取类名" class="headerlink" title="获取类名"></a>获取类名</h3><ul><li><code>String getName()：</code>以 <code>String</code> 的形式返回此 <code>Class</code> 对象所表示的实体（类、接口、数组类、基本类型或 void）名称。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05ReflectClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        String name = personClass.getName();</span><br><span class="line">        System.out.println(name);<span class="comment">//com.priv.demo02Reflect.Person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4案例"><a href="#2-4案例" class="headerlink" title="2.4案例"></a>2.4案例</h2><p>需求：写一个”框架”，不能改变该类任何代码的前提下，可以帮助我们创建任意类的对象，并且执行其中任意方法。</p><p><strong>1.实现：</strong></p><ul><li><p>配置对象</p></li><li><p>反射</p></li></ul><p><strong>2.步骤：</strong></p><ul><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">className=com.priv.demo02Reflect.Person</span><br><span class="line">methodName=eat</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//在程序中加载读取配置文件</span></span><br><span class="line">        Properties properties =<span class="keyword">new</span> Properties();</span><br><span class="line">        ClassLoader classLoader = Demo06ReflectTest.class.getClassLoader();</span><br><span class="line">        InputStream resourceAsStream = classLoader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line">        properties.load(resourceAsStream);</span><br><span class="line">        <span class="comment">//获取配置文件中的数据</span></span><br><span class="line">        String className = properties.getProperty(<span class="string">&quot;className&quot;</span>);<span class="comment">//获取全类名</span></span><br><span class="line">        String methodName = properties.getProperty(<span class="string">&quot;methodName&quot;</span>);<span class="comment">//获取方法名</span></span><br><span class="line">        <span class="comment">//使用反射技术来加载类文件进内存</span></span><br><span class="line">        Class aClass = Class.forName(className);<span class="comment">//获取Class对象aClass</span></span><br><span class="line">        Object obj = aClass.newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method = aClass.getMethod(methodName);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第三章-注解"><a href="#第三章-注解" class="headerlink" title="第三章    注解"></a>第三章    注解</h1><hr><h2 id="3-1概念"><a href="#3-1概念" class="headerlink" title="3.1概念"></a>3.1概念</h2><ul><li><p>注解：说明程序的。给计算机看</p></li><li><p>注释：用文字描述程序的。给程序员看</p></li></ul><p><strong>定义：</strong>注解(Annotation)，也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p><p><strong>概念描述：</strong></p><ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ul><p><strong>作用分类：</strong></p><ul><li><p>编写文档:通过代码里标识的注解生成文档【生成文档doc文档】javadoc命令生成文档</p></li><li><p>代码分析:通过代码里标识的注解对代码进行分析【使用反射】</p></li><li><p>编译检查:通过代码里标识的注解让编译器能够实现基本的编译检查【override】</p></li></ul><hr><h2 id="3-2JDK内置注解"><a href="#3-2JDK内置注解" class="headerlink" title="3.2JDK内置注解"></a>3.2JDK内置注解</h2><h3 id="1-Override"><a href="#1-Override" class="headerlink" title="1.@Override"></a>1.@Override</h3><p>检测被该注解标注的方法是否是继承自父类(接口)的</p><h3 id="2-Deprecated"><a href="#2-Deprecated" class="headerlink" title="2.@Deprecated"></a>2.@Deprecated</h3><p>将该注解标注的内容，表示<strong>已过时</strong></p><h3 id="3-SuppressWarnings"><a href="#3-SuppressWarnings" class="headerlink" title="3.@SuppressWarnings"></a>3.@SuppressWarnings</h3><p>压制警告</p><p>一般传递参数all：@SuppressWarnings(all)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK内置注解演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span><span class="comment">//压制所有的警告⚠</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//### 1.@Override</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//检测被该注解标注的方法是否是继承自父类(接口)的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//有缺陷</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//替代show01方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        show01();<span class="comment">//已过时  不建议使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3自定义注解"><a href="#3-3自定义注解" class="headerlink" title="3.3自定义注解"></a>3.3自定义注解</h2><h3 id="格式-amp-本质"><a href="#格式-amp-本质" class="headerlink" title="格式&amp;本质"></a>格式&amp;本质</h3><p><strong>格式：</strong></p><ul><li><p>元注解</p></li><li><p>```java<br>public @interface 注解名称{</p><pre><code>属性列表;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**本质：**</span><br><span class="line"></span><br><span class="line">注解本质上就是一个接口，该接口默认继承Annotation接口</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public interface Demo03MyAnnotation extends java.lang.annotation.Annotation &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><p><strong>属性：</strong>接口中的抽象方法</p><p>要求：</p><ul><li><strong>属性的返回类型有下列取值：</strong></li></ul><p>1.基本数据类型</p><p>2.String</p><p>3.枚举</p><p>4.注解</p><p>以上类型的数组</p><ul><li><strong>定义了属性，在使用时需要给属性赋值</strong></li></ul><p>1.如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</p><p>2.如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</p><p>3.数组赋值时，值使用{ }包裹。如果数组中只有一个值，则{ }可以省略。</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>用于描述注解的注解</p><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p><strong>描述注解能够作用的位置</strong></p><p>ElementType取值：</p><ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul><p>赋值时value可以省略</p><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p><strong>描述注解被保留的阶段</strong></p><ul><li>@Retention(RetentionPolicy.SOURCE)：当前被描述的注解，不会保留到class字节码文件中。</li><li>@Retention(RetentionPolicy.CLASS)：当前被描述的注解，会保留到class字节码文件中，但是不会JVM读取到。</li><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到。</li></ul><h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h4><p><strong>描述注解是否被抽取到api文档中</strong></p><p>加入此注解后的注解，在标记时，会在api文档中显示(显示的是被@Documented标注的那个注解)。</p><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p><strong>描述注解是否被子类继承</strong></p><p>当A注解被此注解描述时，一个类继承了被A注解标注的类时，这个子类会继承这个A注解。</p><hr><h2 id="3-4解析-使用-注解"><a href="#3-4解析-使用-注解" class="headerlink" title="3.4解析(使用)注解"></a>3.4解析(使用)注解</h2><p><strong>获取注解中定义的属性值</strong></p><p>1.获取注解定义的位置的对象(class,Method,Field)</p><p>2.获取指定的注解<br>       *getAnnotation(class)</p><p>3.调用注解中的抽象方法获取配置的属性值</p><blockquote><p>字节码文件对象.getAnnotation(注解名.class)来获取注解对象</p><p>注解对象.方法获取定义的抽象方法的返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *描述需要执行的类名，方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">      <span class="function">String <span class="title">className</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function">String <span class="title">MethodName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pro(className = &quot;com.priv.demo03Annotation.Demo06&quot;,MethodName = &quot;show01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.解析注解</span></span><br><span class="line">        <span class="comment">//1.1获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;Demo05ReflectTest&gt; d = Demo05ReflectTest.class;</span><br><span class="line">        <span class="comment">//2.获取上边的注解对象</span></span><br><span class="line">        Pro annotation = d.getAnnotation(Pro.class);<span class="comment">///其实就是在内存中生成了一个该注解接口的子类实现对象</span></span><br><span class="line">        <span class="comment">//3.调用注解对象中定义的抽象方法，获取返回值</span></span><br><span class="line">        String s = annotation.className();</span><br><span class="line">        String s1 = annotation.MethodName();</span><br><span class="line">        <span class="comment">//使用反射技术来加载类文件进内存</span></span><br><span class="line">        Class aClass = Class.forName(s);<span class="comment">//获取Class对象aClass</span></span><br><span class="line">        Object obj = aClass.newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method = aClass.getMethod(s1);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5案例：简单的测试框架"><a href="#3-5案例：简单的测试框架" class="headerlink" title="3.5案例：简单的测试框架"></a>3.5案例：简单的测试框架</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *描述需要执行的类名，方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">      <span class="function">String <span class="title">className</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function">String <span class="title">MethodName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1+0=&quot;</span>+(<span class="number">1</span>+<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sbu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-0=&quot;</span>+(<span class="number">1</span>-<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1*0=&quot;</span>+(<span class="number">1</span>*<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1/0=&quot;</span>+(<span class="number">1</span>/<span class="number">0</span>));<span class="comment">//InvocationTargetException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;永无bug...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类框架</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Pro(className = &quot;com.priv.demo03Annotation.Demo08Calculator&quot;,MethodName = &quot;show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析注解</span></span><br><span class="line">        <span class="comment">//获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;Demo09Test&gt; demo09TestClass = Demo09Test.class;</span><br><span class="line">        <span class="comment">//获取注解对象</span></span><br><span class="line">        Pro annotation = demo09TestClass.getAnnotation(Pro.class);</span><br><span class="line">        <span class="comment">//调用注解对象中定义的抽象方法，获取返回值</span></span><br><span class="line">        String s = annotation.MethodName();</span><br><span class="line">        String s1 = annotation.className();</span><br><span class="line">        <span class="comment">//使用反射技术来加载类文件进内存</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(s1);<span class="comment">//获取Class对象aClass</span></span><br><span class="line">        Object obj = aClass.newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method = aClass.getMethod(s);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第四章-枚举类"><a href="#第四章-枚举类" class="headerlink" title="第四章    枚举类"></a>第四章    枚举类</h1><hr><h2 id="4-1枚举类的使用"><a href="#4-1枚举类的使用" class="headerlink" title="4.1枚举类的使用"></a>4.1枚举类的使用</h2><ul><li>类的对象：有限个，确定的</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210821113625.png" alt="QQ截图20210821113625"></p><ul><li>当需要定义一组常量时，强烈建议使用枚举类</li><li>如果枚举类中只有一个对象，则可以作为单例模式的实现方式</li></ul><hr><h2 id="4-2定义枚举类"><a href="#4-2定义枚举类" class="headerlink" title="4.2定义枚举类"></a>4.2定义枚举类</h2><p>方式一：jdk5.0之前，自定义枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01Enum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Enum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season spring = Season.SPRING;</span><br><span class="line">        System.out.println(spring);<span class="comment">//Season&#123;seasonName=&#x27;春天&#x27;, seasonDesc=&#x27;春暖花开&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    <span class="comment">//声明Season对象的属性：private final修饰</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">    <span class="comment">//私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName, String seasonDesc)</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">         <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//提供当前枚举类的多个对象：public static final的</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING =<span class="keyword">new</span> Season(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER =<span class="keyword">new</span> Season(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN =<span class="keyword">new</span> Season(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER =<span class="keyword">new</span> Season(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> seasonName;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> seasonDesc;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                 <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                 <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                 <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>方式二：在jdk5.0，可以使用enum关键字定义枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01Enum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用enum关键字定义枚举类</span></span><br><span class="line"><span class="comment"> * 说明：定义的枚举类默认继承于java.lang.Enum类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021 8.21 上午 12：35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Enum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 spring = Season1.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">        System.out.println(Season1.class.getSuperclass());<span class="comment">//class java.lang.Enum</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span></span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    Season1(String seasonName, String seasonDesc)&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3Enum类中的常用方法"><a href="#4-3Enum类中的常用方法" class="headerlink" title="4.3Enum类中的常用方法"></a>4.3Enum类中的常用方法</h2><ul><li><code>values()：</code>返回枚举类型的对象数组。该方法可以很方便的遍历所有的枚举值。</li><li><code>valueOf(String str)：</code>可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常。</li><li><code>toString()：</code>返回当前枚举类对象常量的名称。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01Enum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用enum关键字定义枚举类</span></span><br><span class="line"><span class="comment"> * 说明：定义的枚举类默认继承于java.lang.Enum类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021 8.21 上午 12：35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Enum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 spring = Season1.SPRING;</span><br><span class="line">        <span class="comment">//`toString()：`返回当前枚举类对象常量的名称。</span></span><br><span class="line">        System.out.println(spring);</span><br><span class="line">        System.out.println(Season1.class.getSuperclass());<span class="comment">//class java.lang.Enum</span></span><br><span class="line">        <span class="comment">//`values()：`返回枚举类型的对象数组。该方法可以很方便的遍历所有的枚举值。</span></span><br><span class="line">        Season1[] values = Season1.values();</span><br><span class="line">        <span class="keyword">for</span> (Season1 value:values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">            <span class="comment">//SPRING</span></span><br><span class="line">            <span class="comment">//SUMMER</span></span><br><span class="line">            <span class="comment">//AUTUMN</span></span><br><span class="line">            <span class="comment">//WINTER</span></span><br><span class="line">        &#125;</span><br><span class="line">        Thread.State[] values1 = Thread.State.values();</span><br><span class="line">        <span class="keyword">for</span> (Thread.State s:values1) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            <span class="comment">//NEW</span></span><br><span class="line">            <span class="comment">//RUNNABLE</span></span><br><span class="line">            <span class="comment">//BLOCKED</span></span><br><span class="line">            <span class="comment">//WAITING</span></span><br><span class="line">            <span class="comment">//TIMED_WAITING</span></span><br><span class="line">            <span class="comment">//TERMINATED</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//`valueOf(String str)：`可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常。</span></span><br><span class="line">        Season1 winter = Season1.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line">        System.out.println(winter);<span class="comment">//WINTER 打印方法名</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span></span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    Season1(String seasonName, String seasonDesc)&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-4使用enum关键字定义的枚举类实现接口的情况"><a href="#4-4使用enum关键字定义的枚举类实现接口的情况" class="headerlink" title="4.4使用enum关键字定义的枚举类实现接口的情况"></a>4.4使用enum关键字定义的枚举类实现接口的情况</h2><p>情况一：实现接口，在enum类中实现抽象方法</p><p>情况二：让枚举类的对象分别实现接口中的抽象方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-Junit单元测试&quot;&gt;&lt;a href=&quot;#第一章-Junit单元测试&quot; class=&quot;headerlink&quot; title=&quot;第一章    Junit单元测试&quot;&gt;&lt;/a&gt;第一章    Junit单元测试&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1概述&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>File类、递归</title>
    <link href="https://www.stq555.com/2022/01/12/File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92/"/>
    <id>https://www.stq555.com/2022/01/12/File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92/</id>
    <published>2022-01-12T09:22:03.000Z</published>
    <updated>2022-01-12T09:23:27.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-File类"><a href="#第一章-File类" class="headerlink" title="第一章    File类"></a>第一章    File类</h1><hr><h2 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h2><p><code>java.io.File</code>类时文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><p>java把电脑中的文件和文件夹(目录)封装为了一个FiLe类,我们可以使用FiLe类对文件和文件夹进行操作</p><p>我们可以使用File类的方法</p><ul><li> 创建一个文件/文件夹</li><li> 删除文件/文件夹</li><li> 获取文件/文件夹</li><li> 判断文件/文件夹是否存在</li><li> 对文件夹进行遍历</li><li> 获取文件的大小</li></ul><p>File类是一个与系统无关的类,任何的操作系统都可以使用这个类中的方法</p><p>重点:记住这三个单词</p><ul><li> file:文件</li><li> directory :文件夹/目录</li><li> path :路径</li></ul><h3 id="File类的静态成员变量"><a href="#File类的静态成员变量" class="headerlink" title="File类的静态成员变量"></a>File类的静态成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01File</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String pathSeparator = File.pathSeparator;</span><br><span class="line">        System.out.println(pathSeparator);<span class="comment">//路径分隔符 windows;分号   Linux:冒号</span></span><br><span class="line"></span><br><span class="line">        String separator = File.separator;</span><br><span class="line">        System.out.println(separator);<span class="comment">//  \文件名称分隔符   windows\反斜杠  Linux/正斜杠</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        操作路径:路径不能写死了</span></span><br><span class="line"><span class="comment">//        C: \develop\a\a.txt    windows</span></span><br><span class="line"><span class="comment">//        C: /develop/a/a.txt    Linux</span></span><br><span class="line"><span class="comment">//        &quot;C:&quot;+File.separator+&quot;develop&quot;+File.separator+&quot;a&quot;+File.separator+&quot;a.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2构造方法"><a href="#1-2构造方法" class="headerlink" title="1.2构造方法"></a>1.2构造方法</h2><ul><li><code>public File(String pathname)</code>：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的File实例。</li><li><code>public File(String parent,String child)</code>：从<strong>父路径名字符串和子路径名字符串</strong>创建新的File实例。</li><li><code>public File(File parent,String child)</code>：从<strong>父抽象路径名和子路径名字符串</strong>创建新的File实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02File</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        show01();</span></span><br><span class="line"><span class="comment">//        show02(&quot;c:\\&quot;,&quot;a.txt&quot;);//c:\a.txt</span></span><br><span class="line">          show03();<span class="comment">//c:\Hello.java</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`public File(File parent,String child)`：从**父抽象路径名和子路径名字符串**创建新的File实例。</span></span><br><span class="line"><span class="comment">//    好处：父路径和子路径,可以单独书写,使用起来非常灵活;</span></span><br><span class="line"><span class="comment">//    父路径和子路径都可以变化父路径是File类型,可以使用File的方法对路径进行―些操作,再使用路径创建对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File parent=<span class="keyword">new</span> File(<span class="string">&quot;c:\\&quot;</span>);</span><br><span class="line">        File f3 =<span class="keyword">new</span> File(parent,<span class="string">&quot;Hello.java&quot;</span>);</span><br><span class="line">        System.out.println(f3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//`public File(String parent,String child)`：从**父路径名字符串和子路径名字符串**创建新的File实例。</span></span><br><span class="line">    <span class="comment">// 好处：父路径和子路径,可以单独书写,使用起来非常灵活;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">(String parent,String child)</span> </span>&#123;</span><br><span class="line">        File f2 =<span class="keyword">new</span> File(parent,child);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//`public File(String pathname)`：通过将给定的**路径名字符串**转换为抽象路径名来创建新的File实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f1=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        File f2=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo&quot;</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        File f3=<span class="keyword">new</span> File(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">        System.out.println(f3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-3常用方法"><a href="#1-3常用方法" class="headerlink" title="1.3常用方法"></a>1.3常用方法</h2><h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul><li><code>public String getAbsolutePath()</code>：返回此File的<strong>绝对路径</strong>名字符串。</li><li><code>public String getPath()</code>：将此File转换为路径名字符串。</li></ul><p>​        tostring方法调用的就是getPath方法</p><p>源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> string <span class="title">tostring</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getPath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>public String getName()</code>：返回由此File表示的文件或目录的名称。</li><li><code>public long length()</code>：返回由此File表示的文件的长度。</li></ul><p>​     获取的是构造方法指定的文件的大小,以字节为单位</p><blockquote><p>注意:<br>文件夹是没有大小概念的,不能获取文件夹的大小<br>如果构造方法中给出的路径不存在,那么Length方法返回0</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03FileGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1 =<span class="keyword">new</span> File(<span class="string">&quot;d:/aaa/bbb.java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径&quot;</span>+f1.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件构造路径&quot;</span>+f1.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称&quot;</span>+f1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度&quot;</span>+f1.length()+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File f2 =<span class="keyword">new</span> File(<span class="string">&quot;d:/aaa&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;目录绝对路径&quot;</span>+f2.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录构造路径&quot;</span>+f2.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录名称&quot;</span>+f2.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录长度&quot;</span>+f2.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">//   输出结果：</span></span><br><span class="line"><span class="comment">//        文件绝对路径d:\aaa\bbb.java</span></span><br><span class="line"><span class="comment">//        文件构造路径d:\aaa\bbb.java</span></span><br><span class="line"><span class="comment">//        文件名称bbb.java</span></span><br><span class="line"><span class="comment">//        文件长度0字节</span></span><br><span class="line"><span class="comment">//        -------------------------------------</span></span><br><span class="line"><span class="comment">//        目录绝对路径d:\aaa</span></span><br><span class="line"><span class="comment">//        目录构造路径d:\aaa</span></span><br><span class="line"><span class="comment">//        目录名称aaa</span></span><br><span class="line"><span class="comment">//        目录长度0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><p>绝对路径：是一个完整的路径(以盘符开头)</p><p>相对路径：是一个简化的路径</p><p>如果使用当前项目的根目录，路径可以简化书写(可以省略项目的根目录)</p><blockquote><p>tips：1.路径是不区分大小写的</p><p>​         2.路径中的文件名称分隔符windows使用反斜杠，反斜杠是转义字符，两个反斜杠代表一个普通的反斜杠。</p></blockquote><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li><code>public boolean exists() </code>：此File表示的文件或目录是否真实存在。</li><li><code>public boolean isDirectory()</code>：此File表示的是否为目录。</li><li><code>public boolean isFile()</code>：此File表示的是否为文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04FileIs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt&quot;</span>);</span><br><span class="line">        File f2 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo&quot;</span>);</span><br><span class="line">        <span class="comment">//判断是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt是否存在：&quot;</span>+f1.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo是否存在：&quot;</span>+f2.exists());</span><br><span class="line">        <span class="comment">//判断是文件还是目录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt文件？：&quot;</span>+f1.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt目录？：&quot;</span>+f1.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo文件？：&quot;</span>+f2.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo目录？：&quot;</span>+f2.isDirectory());</span><br><span class="line">        <span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo是否存在：true</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo\a.txt文件？：false</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo\a.txt目录？：false</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo文件？：false</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo目录？：true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><ul><li><code>public boolean createNewFile()</code>：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。</li></ul><blockquote><p>注意:</p><ul><li>此方法只能创建文件,不能创建文件夹</li><li>创建文件的路径必须存在,否则会抛出异常</li></ul></blockquote><ul><li><code>public boolean delete() </code>：删除由此File表示的文件或目录。(都可以删除)</li></ul><blockquote><p>返回值:布尔值<br>true:文件/文件夹删除成功,返回true<br>false:文件夹中有内容,不会删除返回false;构造方法中路径不存在false</p><p>注意:<br>delete方法是直接在硬盘删除文件/文件夹,不走回收站,删除要谨慎。</p></blockquote><ul><li><p><code>public boolean mkdir() </code>：创建由此File表示的目录。(<strong>只能创建单级空文件夹</strong>)</p></li><li><p><code>public boolean mkdirs() </code>：创建由此File表示的目录，包括任何必需但不存在的父目录。(<strong>能创建单级空文件夹，也能创建多级空文件夹</strong>)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05File</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        show01();</span></span><br><span class="line"><span class="comment">//        show02();</span></span><br><span class="line">        show03();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f6 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\111\\222\\333\\444&quot;</span>);</span><br><span class="line">        System.out.println(f6.delete());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f3 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\aaa&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;aaa：&quot;</span>+f3.mkdir());<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        File f4 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\111\\222\\333\\444&quot;</span>);</span><br><span class="line">        System.out.println(f4.mkdir());<span class="comment">//false mkdir()方法不能创建多级空文件夹，但是可以调用mkdirs()方法创建</span></span><br><span class="line"></span><br><span class="line">        File f5 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\111\\222\\333\\444&quot;</span>);</span><br><span class="line">        System.out.println(f5.mkdirs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f1 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> newFile = f1.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;newFile&quot;</span>+newFile);</span><br><span class="line"></span><br><span class="line">        File f2 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Des\\s\\1.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2.createNewFile());<span class="comment">//会抛出IOException异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-4目录的遍历"><a href="#1-4目录的遍历" class="headerlink" title="1.4目录的遍历"></a>1.4目录的遍历</h2><ul><li><code>punlic String[] list()</code>：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li><code>public File[] listFiles()</code>：返回一个File数组，表示该File目录中的所有子文件或目录。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06FileFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] names =f1.list();</span><br><span class="line">        <span class="keyword">for</span> (String name:names) &#123;</span><br><span class="line">            System.out.println(name);<span class="comment">//.idea</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File[] files = f1.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            System.out.println(files1);<span class="comment">//C:\Users\97189\Desktop\s\.idea</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：调用listFiles方法的File对象，表示的必须时实际存在的目录，否则返回null，无法进行遍历。<br>list方法和ListFiles方法遍历的是构造方法中给出的目录如果构造方法中给出的自录的路径不存在,会抛出空指针异常。如果构造方法中给出的路径不是一个自录,也会抛出空指针异常</p></blockquote><hr><h1 id="第二章-递归"><a href="#第二章-递归" class="headerlink" title="第二章    递归"></a>第二章    递归</h1><hr><h2 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h2><ul><li><strong>递归</strong>：指在当前方法内调用自己的这种现象。</li><li><strong>递归的分类</strong>：</li></ul><p>1.递归分为两种，直接递归和间接递归。</p><p>2.直接递归称为方法自身调用自己。</p><p>3.间接递归可以A方法调用B方法，B方法调用C方法，C方法调用A方法。</p><ul><li><strong>注意事项</strong>：</li></ul><p>1.递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</p><p>2.在递归中虽然有限定条件，但是递归次数不能太多，否则也会发生栈内存溢出。</p><p>3.构造方法，禁止递归。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Recursion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        a();</span></span><br><span class="line">        b(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);<span class="comment">//11416</span></span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">20000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//Exception in thread &quot;main&quot; java.lang.StackOverflowError</span></span><br><span class="line">        &#125;</span><br><span class="line">        b(++i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a方法！&quot;</span>);</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2递归累加求和"><a href="#2-2递归累加求和" class="headerlink" title="2.2递归累加求和"></a>2.2递归累加求和</h2><h3 id="计算1-n的和"><a href="#计算1-n的和" class="headerlink" title="计算1~n的和"></a>计算1~n的和</h3><p><strong>分析</strong>：num的累和=num+(num-1)的累和，所以可以把累和的操作定义成一个方法，递归调用。</p><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.security.provider.Sun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Recursion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = sum(<span class="number">3</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n+sum(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果仅仅是计算1-n之间的和，不推荐使用递归，使用for循环即可。</p><h3 id="代码执行图解"><a href="#代码执行图解" class="headerlink" title="代码执行图解"></a>代码执行图解</h3><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210814201633.png" alt="QQ截图20210814201633"></p><blockquote><p>tips：递归一定要有条件限定，保证递归能够停止下来，次数不要太多，否则会发生栈内存溢出。</p></blockquote><hr><h2 id="2-3递归求阶乘"><a href="#2-3递归求阶乘" class="headerlink" title="2.3递归求阶乘"></a>2.3递归求阶乘</h2><ul><li><strong>阶乘</strong>：n！= n * (n-1) * … * 3 * 2 * 1 </li></ul><p><strong>分析</strong>：n！= n * (n-1)！</p><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Factorial</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value =getValue(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;value=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n*getValue(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4递归打印多级目录"><a href="#2-4递归打印多级目录" class="headerlink" title="2.4递归打印多级目录"></a>2.4递归打印多级目录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Recursion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：如果在增强for中直接打印filse1，则不能打印出文件夹里面的文件，所以要加一个判断语句if。</p></blockquote><hr><h1 id="第三章-综合案例"><a href="#第三章-综合案例" class="headerlink" title="第三章    综合案例"></a>第三章    综合案例</h1><hr><h2 id="3-1文件搜索"><a href="#3-1文件搜索" class="headerlink" title="3.1文件搜索"></a>3.1文件搜索</h2><p>搜索<code>C:\Users\97189\Desktop\s</code>目录中的<code>.png</code>文件。</p><ul><li><strong>分析</strong>：</li></ul><p>1.目录搜索，无法判断多少级目录，所以使用递归，遍历所有目录。</p><p>2.遍历目录时，获取的子文件，通过文件名称，判断是否符合条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.midi.Soundbank;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Case</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>);</span><br><span class="line">        getAllFile(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.isDirectory())&#123;</span><br><span class="line">                getAllFile(f);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (f.getName().toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2文件过滤器优化"><a href="#3-2文件过滤器优化" class="headerlink" title="3.2文件过滤器优化"></a>3.2文件过滤器优化</h2><p>在FiLe类中有两个和ListFiles重载的方法,方法的参数传递的就是过滤器。</p><p><strong>1.File[ ] listFiLes (FileFilter filter)</strong><br><code>java.io.FileFilter</code>接口:用于抽象路径名(FiLe对象)的过滤器。</p><p>作用:用来过滤文件(FiLe对象)</p><p>抽象方法:用来过滤文件的方法</p><ul><li>boolean accept(File pathname）测试指定抽象路径名是否应该包含在某个路径名列表中。</li></ul><p>参数:<br>   File pathname :使用ListFiLes方法遍历目录,得到的每一个文件对象</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFilterImpl</span> <span class="keyword">implements</span> <span class="title">FileFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pathname.isDirectory())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pathname.getName().toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Filter</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilterImpl());<span class="comment">//传递过滤器对象</span></span><br><span class="line"><span class="comment">//        listFiles方法一共做了3件事情:</span></span><br><span class="line"><span class="comment">//        1.listFiles方法会对构造方法中传递的目录进行遍历,获取目录中的每一个文件/文件夹--&gt;封装为File对象</span></span><br><span class="line"><span class="comment">//        2.listFiles方法会调用参数传递的过滤器中的方法accept</span></span><br><span class="line"><span class="comment">//        3.listFiles方法会把遍历得到的每一个File对象,传递给accept方法的参数pathname</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化：<strong>使用匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Filter</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优化：使用匿名内部类</span></span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pathname.isDirectory()||pathname.getName().endsWith(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.FiLe[ ] listFiles(FiLenameFilter filter)</strong></p><p><code>java.io.FilenameFilter</code>接口:实现此接口的类实例可用于过滤器文件名。</p><p>作用:用于过滤文件名称</p><p>抽象方法:用来过滤文件的方法</p><ul><li>boolean accept(File dir，String name）测试指定文件是否应该包含在某一文件列表中。</li></ul><p>参数︰<br>File dir:构造方法中传递的被遍历的目录<br>String name :使用ListFiles方法遍历自录,获取的每一个文件/文件夹的名称</p><blockquote><p>注意:<br>两个过滤器接口是没有实现类的,需要我们自己写实现类,重写过滤的方法accept,在方法中自己定义过滤的规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FilenameFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优化：使用匿名内部类</span></span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> File(dir,name).isDirectory()||name.toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：</p><p>1.接口作为参数，需要传递子类对象，重写其中方法。我们选择匿名内部类方式，比较简单。</p><p>2.<code>accept</code>方法，参数为File，表示当前File下所有的子文件和子目录。保留住则返回true，过滤掉则返回false。</p><p>​        保留规则：</p><p>​           1.要么是.java文件。</p><p>​           2.要么是目录，用于继续遍历。</p><hr><h2 id="3-3Lambda优化"><a href="#3-3Lambda优化" class="headerlink" title="3.3Lambda优化"></a>3.3Lambda优化</h2><p><strong>1.File[ ] listFiLes (FileFilter filter)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优化：使用匿名内部类</span></span><br><span class="line">        File[] files = dir.listFiles(pathname-&gt;pathname.isDirectory()||pathname.getName().toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.FiLe[ ] listFiles(FiLenameFilter filter)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03FilenameFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优化：使用Lambda表达式(接口中只有一个方法)</span></span><br><span class="line">        File[] files = dir.listFiles((dir1, name) -&gt; <span class="keyword">new</span> File(dir1,name).isDirectory()||name.toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-File类&quot;&gt;&lt;a href=&quot;#第一章-File类&quot; class=&quot;headerlink&quot; title=&quot;第一章    File类&quot;&gt;&lt;/a&gt;第一章    File类&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1概述&quot;&gt;&lt;a href=&quot;#1-1概述&quot; cl</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="https://www.stq555.com/2022/01/11/IO%E6%B5%81/"/>
    <id>https://www.stq555.com/2022/01/11/IO%E6%B5%81/</id>
    <published>2022-01-11T15:21:40.000Z</published>
    <updated>2022-01-11T15:28:10.020Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="第一章-IO概述"><a href="#第一章-IO概述" class="headerlink" title="第一章    IO概述"></a>第一章    IO概述</h1><hr><h2 id="1-1什么是IO"><a href="#1-1什么是IO" class="headerlink" title="1.1什么是IO"></a>1.1什么是IO</h2><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code>，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢?键盘、内存、硬盘、外接设备等等。</p><p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code>和<code>输出output</code>，即流向内存是输入流，流出内存的输出流。</p><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p><hr><h2 id="1-2IO的分类"><a href="#1-2IO的分类" class="headerlink" title="1.2IO的分类"></a>1.2IO的分类</h2><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong>：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。</li><li><strong>输出流</strong>：把数据从<code>内存</code>中写出到<code>其他设备</code>上的流。</li></ul><p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong>：以字节为单位，读写数据的流。</li><li><strong>字符流</strong>：以字符为单位，读写数据的流。</li></ul><hr><h2 id="1-3IO的流向说明图解"><a href="#1-3IO的流向说明图解" class="headerlink" title="1.3IO的流向说明图解"></a>1.3IO的流向说明图解</h2><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210815215009.png" alt="QQ截图20210815215009"></p><hr><h2 id="1-4顶级父类们"><a href="#1-4顶级父类们" class="headerlink" title="1.4顶级父类们"></a>1.4顶级父类们</h2><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210815215021.png" alt="QQ截图20210815215021"></p><hr><h1 id="第二章-字节流"><a href="#第二章-字节流" class="headerlink" title="第二章    字节流"></a>第二章    字节流</h1><hr><h2 id="2-1一切皆为字节"><a href="#2-1一切皆为字节" class="headerlink" title="2.1一切皆为字节"></a>2.1一切皆为字节</h2><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><hr><h2 id="2-2字节输出流【OutputStream】"><a href="#2-2字节输出流【OutputStream】" class="headerlink" title="2.2字节输出流【OutputStream】"></a>2.2字节输出流【OutputStream】</h2><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类型的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code>：关闭此输出流并释放与此流相关联的任何系统资源。</li><li><code>public void flush()</code>：刷新此输出流并强制任何缓冲的输出字节被写出。</li><li><code>public void write(byte[] b)</code>：将b.length字节从指定的字节数组写入此输出流。</li></ul><blockquote><p>一次写多个字节:<br>1.如果写的第一个字节是正数(0-127),那么显示的时候会查询ASCII表<br>2.如果写的第一个字节是负数,那第一个字节会和第二个字节,两个字节组成一个中文显示,查询系统默认码表(GBK)</p></blockquote><ul><li><code>public void write(byte[] b,int off,int len)</code>：从指定的字节数组写入len字节，从偏移量off开始输出到此输入流。</li></ul><blockquote><p>int off：数组的开始索引</p><p>int len：写几个字节</p></blockquote><ul><li><code>public abstract void write(int b)</code>：将指定的字节输出流。</li></ul><blockquote><p>tips：close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><hr><h2 id="2-3FileOutputStream类"><a href="#2-3FileOutputStream类" class="headerlink" title="2.3FileOutputStream类"></a>2.3FileOutputStream类</h2><p>java.io.FileOutputStream extends OutputStream</p><p>FileOutputStream：文件字节输出流</p><p><strong>作用：</strong>把内存中的数据写入到硬盘的文件中</p><p><strong>字节输出流的使用步骤(重点)∶</strong></p><ul><li>创建一个Fileoutputstream对象,构造方法中传递写入数据的目的地</li><li>调用Fileoutputstream对象中的方法write,把数据写入到文件中</li><li>释放资源(流使用会占用一定的内存,使用完毕要把内存清空,提供程序的效率)</li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p>FileOutputStream(String name)：创建一个向具有指定名称的文件中写入数据的输出文件流。</p></li><li><p>FileOutputStream(File file)：创建一个向指定File对象表示的文件中写入数据的文件输出流。</p></li></ul><p>参数：写入数据的目的地</p><ul><li>String name：目的地是一个文件的路径</li><li>File file：目的地是一个文件</li></ul><p>构造方法的作用：</p><ul><li>创建一个FileOutputStream对象</li><li>会根据构造方法中传递的文件/文件路径，创建一个空的文件</li><li>会把FileOutputStream对象指向创建好的文件</li></ul><h3 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h3><p>写入数据的原理(内存—&gt;硬盘)</p><p>  java程序–&gt;JVM(java虚拟机)–&gt;OS(操作系统)–&gt;OS调用写数据的方法–&gt;把数据写入到文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01OutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//`public abstract void write(int b)`：将指定的字节输出流。</span></span><br><span class="line">        fos.write(<span class="number">97</span>);<span class="comment">//ASCII码 a</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`public void write(byte[] b)`：将b.length字节从指定的字节数组写入此输出流。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes=&#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;</span><br><span class="line">        fos.write(bytes);<span class="comment">//ABCDE</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes1=&#123;-<span class="number">65</span>,-<span class="number">66</span>,-<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;</span><br><span class="line">        fos.write(bytes1);<span class="comment">//烤紻E</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`public void write(byte[] b,int off,int len)`：从指定的字节数组写入len字节，从偏移量off开始输出到此输入流。</span></span><br><span class="line">        fos.write(bytes,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//BC</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入字符的方法:可以使用string类中的方法把字符串,转换为字节数组</span></span><br><span class="line">        <span class="comment">//byte[] getBytes()把字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes2=<span class="string">&quot;你好&quot;</span>.getBytes();</span><br><span class="line">        System.out.println(Arrays.toString(bytes2));<span class="comment">//[-28, -67, -96, -27, -91, -67]</span></span><br><span class="line">        fos.write(bytes2);<span class="comment">//你好</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h3><p>追加写/续写：使用两个参数的构造方法。</p><ul><li><code>public FileOutputStream(File file,boolean append)</code>：创建文件输出流以写入由指定的File对象表示的文件。</li><li><code>public FileOutputStream(String name,boolean append)</code>：创建文件输出流以指定的名称写入文件。</li></ul><p><strong>参数：</strong></p><ul><li><p>Stream name,File file：写入数据的目的地</p></li><li><p>boolean append：追加写开关</p></li></ul><p>true：创建对象不会覆盖源文件，继续在文件的末尾追加写数据。</p><p>false：创建一个新文件，覆盖源文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02OutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        fos.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行多少次，就会有多少个你好，不会覆盖掉源文件。</p><h3 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h3><p>写换行：写换行符号</p><ul><li>windows：\r\n</li><li>linux：/n</li><li>mac：/r</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03OutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fos.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4字节输入流【InputStream】"><a href="#2-4字节输入流【InputStream】" class="headerlink" title="2.4字节输入流【InputStream】"></a>2.4字节输入流【InputStream】</h2><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public void close()</code>：关闭此输入流并释放与此流相关联的任何系统资源。</li><li><code>public abstract int read()</code>：从输入流读取数据的下一个字节。</li><li><code>public int read(byte[] b)</code>：从输入流中读取一些字节数，并将它们存储到字节数组b中。</li></ul><blockquote><p>tips：close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><hr><h2 id="2-5FileInputStream类"><a href="#2-5FileInputStream类" class="headerlink" title="2.5FileInputStream类"></a>2.5FileInputStream类</h2><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p><p><strong>作用：</strong>把硬盘文件中的数据，读取到内存中使用</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileInputStream(File file)</code>：通过打开与实际文件的连接来创建一个FileInputStream，该文件由文件系统中的File对象file命名。</li><li><code>FileInputStream(String name)</code>：通过打开与实际文件的连接来创建一个FileInputStream，该文件由文件系统中的路径名name命名。</li></ul><p>参数：读取文件的数据源</p><ul><li>String name：文件的路径</li><li>File file：文件</li></ul><p>构造方法的作用：</p><ul><li>会创建一个FileInputStream对象</li><li>会把FileInputStream对象指向构造方法中要读取的文件</li></ul><h3 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h3><p><strong>1.读取字节</strong></p><p><code>read</code>方法，每此可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</p><p>读取数据的原理(硬盘–&gt;内存)</p><p>   java程序–&gt;JVM–&gt;OS–&gt;OS读取数据的方法–&gt;读取文件</p><p>字节输入流的使用步骤(重点)∶</p><ul><li>创建FileInputstream对象,构造方法中绑定要读取的数据</li><li>使用FileInputStream对象中的方法read,读取文件</li><li>释放资源</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210816183222.png" alt="QQ截图20210816183222"></p><p>1.<code>public abstract int read()</code>：从输入流读取数据的下一个字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//一个字节一个字节的读，读到最后返回-1</span></span><br><span class="line"><span class="comment">//        int len = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//97</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//98</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//99</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//-1</span></span><br><span class="line">        <span class="comment">//使用while循环优化</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) len);<span class="comment">//abc</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<code>public int read(byte[] b)</code>：从输入流中读取一些字节数，并将它们存储到字节数组b中。</p><p>输出时需要调用：</p><p>String类的构造方法：</p><ul><li>String(byte[ ] bytes)：把字节数组转换为字符串</li><li>String(byte[ ] bytes，int offset, int length）：把字节数组的一部分转换为字符串 </li><li>offset :数组的开始索引</li><li>Length:转换的字节个数</li></ul><p><strong>数组：缓存作用，存储读取到的多个字节</strong></p><p>数组的长度一般定义为1024(1kb)或者1024的整数倍</p><p><strong>方法的返回值int</strong>是每次读取的有效字节个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//1.String(byte[ ] bytes)：把字节数组转换为字符串</span></span><br><span class="line"><span class="comment">//        byte[] bytes =new byte[2];</span></span><br><span class="line"><span class="comment">//        int len=fis.read(bytes);</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//2</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(bytes));//ab</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len=fis.read(bytes);</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//1</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(bytes));//cb</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len=fis.read(bytes);</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//-1</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(bytes));//cb</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用while循环优化</span></span><br><span class="line">        <span class="comment">//2.String(byte[ ] bytes，int offset, int length）：把字节数组的一部分转换为字符串 </span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));<span class="comment">//abc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-6字节流练习：图片复制"><a href="#2-6字节流练习：图片复制" class="headerlink" title="2.6字节流练习：图片复制"></a>2.6字节流练习：图片复制</h2><h3 id="复制原理图解"><a href="#复制原理图解" class="headerlink" title="复制原理图解"></a>复制原理图解</h3><p><strong>原理：</strong>从已有文件中读取字节，将该字节写出到另一个文件中。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210816192552.png" alt="QQ截图20210816192552"></p><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03FileCopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01FileCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s=System.currentTimeMillis();</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\1.png&quot;</span>);</span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\1.png&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先关写的</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">long</span> e =System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span>+(e-s)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第三章-字符流"><a href="#第三章-字符流" class="headerlink" title="第三章    字符流"></a>第三章    字符流</h1><hr><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04Reader;</span><br><span class="line"><span class="comment">//使用字节流读取中文文件</span></span><br><span class="line"><span class="comment">//1个中文</span></span><br><span class="line"><span class="comment">//GBK:占用两个字节</span></span><br><span class="line"><span class="comment">//UTF-8:占用3个字节</span></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//        while ((len=fis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(len);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) len);<span class="comment">//读取中文会出现乱码问题</span></span><br><span class="line">            <span class="comment">//ä</span></span><br><span class="line">            <span class="comment">//½</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">//å</span></span><br><span class="line">            <span class="comment">//¥</span></span><br><span class="line">            <span class="comment">//½</span></span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//228</span></span><br><span class="line"><span class="comment">//189</span></span><br><span class="line"><span class="comment">//160  组成 你</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//229</span></span><br><span class="line"><span class="comment">//165</span></span><br><span class="line"><span class="comment">//189  组成 好</span></span><br></pre></td></tr></table></figure><h2 id="3-1字符输入流【Reader】"><a href="#3-1字符输入流【Reader】" class="headerlink" title="3.1字符输入流【Reader】"></a>3.1字符输入流【Reader】</h2><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public void close()</code>：关闭此流并释放与此流相关联的任何系统资源。</li><li><code>public int read()</code>：从输入流读取一个字符。</li><li><code>public int read(char[] cbuf)</code>：从输入流中读取一些字符，并将它们存储到字符数组cbuf中。</li></ul><hr><h2 id="3-2FileReader类"><a href="#3-2FileReader类" class="headerlink" title="3.2FileReader类"></a>3.2FileReader类</h2><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>FileReader(String fileName)</li><li>FileReader(File file)</li></ul><p>参数：读取文件的数据源</p><ul><li>String fileName：文件的路径</li><li>File file：一个文件</li></ul><p>FileReader构造方法的<strong>作用</strong>：</p><ul><li>创建一个FileReader对象</li><li>会把FileReader对象指向要读取的文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03FileReaderConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//使用File对象创建流对象</span></span><br><span class="line">        File file =<span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileReader fileReader =<span class="keyword">new</span> FileReader(file);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用文件名称创建流对象</span></span><br><span class="line">        FileReader fileReader1 =<span class="keyword">new</span> FileReader(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h3><p>1.<strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取。</p><p><strong>字符输入流的使用步骤:</strong></p><ul><li>创建FiLeReader对象,构造方法中绑定要读取的数据源</li><li>使用FileReader对象中的方法read读取文件</li><li>释放资源</li></ul><p>输出时需要调用：</p><p><strong>String类的构造方法</strong></p><ul><li>String ( char[ ] value)把字符数组转换为字符串</li><li>String(char[ ] value，int offset,int count）把字符数组的一部分转换为字符串offset数组的开始索引count转换的个数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Reader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s=System.currentTimeMillis();</span><br><span class="line">        FileReader fileReader=<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//        `public int read()`：从输入流读取一个字符。</span></span><br><span class="line"><span class="comment">//        while ((len=fileReader.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)len);</span></span><br><span class="line"><span class="comment">//            //你好</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//`public int read(char[] cbuf)`：从输入流中读取一些字符，并将它们存储到字符数组cbuf中。</span></span><br><span class="line">        <span class="keyword">char</span>[] cs =<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=fileReader.read(cs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(cs,<span class="number">0</span>,len));</span><br><span class="line">            <span class="comment">//你好</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> e=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;所用时间为：&quot;</span>+(e-s)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3字符输出流【Writer】"><a href="#3-3字符输出流【Writer】" class="headerlink" title="3.3字符输出流【Writer】"></a>3.3字符输出流【Writer】</h2><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void writer(int c)</code>：写入单个字符。</li><li><code>void writer(char[] cbuf)</code>：写入字符数组。</li><li><code>abstract void writer(char[] cbuf,int off,int len)</code>：写入字符数组的某一部分，off是数组的开始索引，len是写的字符个数。</li><li><code>void writer(String str)</code>：写入字符串。</li><li><code>void writer(String str，int off,int len)</code>：写入字符串的某一部分，off是字符串的开始索引，len是写的字符个数。</li><li><code>void flush()</code>：刷新该流的缓冲。</li><li><code>void close()</code>：关闭此流，但要刷新它。</li></ul><hr><h2 id="3-4FileWriter类"><a href="#3-4FileWriter类" class="headerlink" title="3.4FileWriter类"></a>3.4FileWriter类</h2><p>文件字符输出流</p><p><strong>作用：</strong>  把内存中字符数据写入到文件中。</p><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>FileWriter(File file)：根据给定的File 对象构造一个 FileWriter对象。</li><li>FileWriter(String fileName)：根据给定的文件名构造一个FileWriter对象。</li></ul><p>参数：写入数据的目的地</p><ul><li>String fileName：文件的路径</li><li>File file：是一个文件</li></ul><p>构造方法的作用：</p><ul><li>会创建一个FileWriter对象</li><li>会根据构造方法中传递的文件/文件的路径，创建文件</li><li>会把FileWriter对象指向创建好的文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FileWriterConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//使用File对象创建流对象</span></span><br><span class="line">        File file =<span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fileWriter1 =<span class="keyword">new</span> FileWriter(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h3><p><strong>写出字符：</strong> <code>write(int b)</code>方法，每次可以写出一个字符数据。</p><p>字符输出流的使用步骤(重点):</p><ul><li>创建FiLewriter对象,构造方法中绑定要写入数据的目的地</li><li>使用Filelwriter中的方法vrite,把数据写入到内存缓冲区中(字符转换为字节的过程)</li><li>使用Filewriter中的方法fLush,把内存缓冲区中的数据,刷新到文件中</li><li>释放资源(会先把内存缓冲区中的数据刷新到文件中)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Writer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//`void writer(int c)`：写入单个字符。</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;97&quot;</span>);</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：</p><p>1.虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</p><p>2.未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</p></blockquote><h3 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h3><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code>方法了。</p><ul><li><code>flush</code>：刷新缓冲区，流对象可以继续使用。</li><li><code>close</code>：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p><strong>flush方法和close方法的区别</strong></p><ul><li>flush：刷新缓冲区，流对象可以继续使用。</li><li>close：先刷新缓冲区，然后通知系统释放资源，流对象不可以再被使用了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03CloseAndFlush</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//`void writer(int c)`：写入单个字符。</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;97&quot;</span>);</span><br><span class="line">        fileWriter.flush();</span><br><span class="line">        <span class="comment">//刷新之后流可以继续使用</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;98&quot;</span>);</span><br><span class="line">        fileWriter.close();</span><br><span class="line"><span class="comment">//        fileWriter.write(&quot;99&quot;);</span></span><br><span class="line"><span class="comment">// close方法之后流已经关闭了,已经从内存中消失了,流就不能再使用了会报错 ：IOException:Stream closed</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p></blockquote><h3 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h3><p><strong>1.写出字符数组</strong>：<code>write(char[ ] cbuf)</code>和<code>write(char[ ] cbuf，int off，int len)</code>，每次可以写出字符数组中的数据，用法类似FileOutputStream。</p><p><strong>2.写出字符串</strong></p><ul><li><code>void writer(String str)</code>：写入字符串。</li><li><code>void writer(String str，int off,int len)</code>：写入字符串的某一部分，off是字符串的开始索引，len是写的字符个数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Writer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span>[] cs=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">//`void writer(char[] cbuf)`：写入字符数组。</span></span><br><span class="line">        fileWriter.write(cs);<span class="comment">//abcde</span></span><br><span class="line">        <span class="comment">//`abstract void writer(char[] cbuf,int off,int len)`：写入字符数组的某一部分，off是数组的开始索引，len是写的字符个数。</span></span><br><span class="line">        fileWriter.write(cs,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//abc</span></span><br><span class="line">        <span class="comment">//`void writer(String str)`：写入字符串。</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        <span class="comment">//`void writer(String str，int off,int len)`：写入字符串的某一部分，off是字符串的开始索引，len是写的字符个数。</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;Java&quot;</span>,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.续写和换行</strong>：操作类似于FileOutputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Writer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//使用文件名称创建流对象，可续写数据</span></span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\4.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//写出字符串</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        <span class="comment">//换行</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        <span class="comment">//写出字符串</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;JAVA&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。当我们单纯读或写文本文件时，使用字符流 其他情况使用字节流。</p></blockquote><hr><h1 id="第四章-IO异常的处理"><a href="#第四章-IO异常的处理" class="headerlink" title="第四章    IO异常的处理"></a>第四章    IO异常的处理</h1><hr><h3 id="JDK7前处理"><a href="#JDK7前处理" class="headerlink" title="JDK7前处理"></a>JDK7前处理</h3><p>之前的练习，我们一直把异常抛出，而实际开发中并不能这样处理，建议使用<code>try...catch...finally</code>代码块，处理异常部分。</p><p>在jdk1.7之前使用<code>try...catch...finally</code>处理流中的异常</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能会产生出异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类变量 变量名)&#123;</span><br><span class="line">    异常的处理逻辑</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    一定会指定的代码</span><br><span class="line">    资源释放</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo06TryCatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01TryCatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//提高变量fileWriter的作用域,让finally可以使用</span></span><br><span class="line">        FileWriter fileWriter=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用文件名称创建流对象，可续写数据</span></span><br><span class="line">            fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\4.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//写出字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">            <span class="comment">//换行</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="comment">//写出字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;JAVA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="comment">//异常的处理逻辑</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//创建对象失败了,fileWriter的默认值就是null,null是不能调用方法的,会抛出Null.PointerException ,需要增加一个判断,不是null再把资源释放。</span></span><br><span class="line">            <span class="keyword">if</span> (fileWriter!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//关闭资源</span></span><br><span class="line">                    fileWriter.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK7的处理-扩展知识点了解内容"><a href="#JDK7的处理-扩展知识点了解内容" class="headerlink" title="JDK7的处理(扩展知识点了解内容)"></a>JDK7的处理(扩展知识点了解内容)</h3><p><strong>JDK7的新特性</strong><br>在try的后边可以增加一个(),在括号中可以定义流对象那么这个流对象的作用域就在try中有效<br>try中的代码执行完毕,会自动把流对象释放,不用写finally</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(定义流对象；定义流对象...)&#123;</span><br><span class="line">    可能会产生出异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类变量 变量名)&#123;</span><br><span class="line">    异常的处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo06TryCatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02JDK7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\1.png&quot;</span>);</span><br><span class="line">             FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\1.png&quot;</span>);</span><br><span class="line">        )&#123;<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(len);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="comment">//异常的处理逻辑</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK9的改进-扩展知识点了解内容"><a href="#JDK9的改进-扩展知识点了解内容" class="headerlink" title="JDK9的改进(扩展知识点了解内容)"></a>JDK9的改进(扩展知识点了解内容)</h3><p><strong>JDK9新特性</strong><br>try的前边可以定义流对象<br>在try后边的()中可以直接引入流对象的名称(变量名)<br>在try代码执行完毕之后,流对象也可以释放掉,不用写finally</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A a =<span class="keyword">new</span> A();</span><br><span class="line">B b =<span class="keyword">new</span> B();</span><br><span class="line"><span class="keyword">try</span>(a;b)&#123;</span><br><span class="line">    可能会产生出异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类变量 变量名)&#123;</span><br><span class="line">    异常的处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo06TryCatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03JDK9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\1.png&quot;</span>);</span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\1.png&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (fis;fos)&#123;</span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        fos.write(&quot;97&quot;);//Stream Closed  流已经关闭了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第五章-属性集"><a href="#第五章-属性集" class="headerlink" title="第五章    属性集"></a>第五章    属性集</h1><hr><h2 id="5-1概述"><a href="#5-1概述" class="headerlink" title="5.1概述"></a>5.1概述</h2><p><code>java.util.Properties</code>继承于<code>Hashtable</code>，来表示一个持久的属性集。<code>java.util.Properties集合extends Hashtable&lt;k, v&gt; implements Map&lt;k , v&gt;</code>，它使用键值结构存储数据，<code>Properties</code>集合是一个双列集合, <code>key</code>和<code>value</code>默认都是字符串，该类也被许多Java类使用，比如获取系统属性时，<code>System.getProperties</code>方法返回一个<code>Properties</code>对象。</p><p><code>Properties</code>集合是唯一一个和IO流相结合的集合。</p><ul><li>可以使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</li><li>可以使用Properties集合中的方法Load,把硬盘中保存的文件(键值对),读取到集合中使用</li></ul><hr><h2 id="5-2Properties类"><a href="#5-2Properties类" class="headerlink" title="5.2Properties类"></a>5.2Properties类</h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><p><code>Properties()</code>  创建一个没有默认值的空属性列表。 </p><p><code>Properties(Properties defaults)</code>  创建具有指定默认值的空属性列表。 </p><h3 id="基本的储存方法"><a href="#基本的储存方法" class="headerlink" title="基本的储存方法"></a>基本的储存方法</h3><p><strong>Properties集合有一些操作字符串的特有方法</strong></p><ul><li>object setProperty(String key, String value）：调用Hashtable 的方法 put。</li><li>string getProperty(String key)：通过key找到value值,此方法相当于Nap集合中的get(key)方法</li><li>set<string> stringPropertyNames()：返回此属性列表中的键集，其中该键及其对应值是字符串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo07Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Properties</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//object setProperty(String key, String value）：调用Hashtable 的方法 put。</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小林&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小李&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        System.out.println(properties);<span class="comment">//&#123;小林=15, 小李=20, 小明=19&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//set&lt;string&gt; stringPropertyNames()：返回此属性列表中的键集，其中该键及其对应值是字符串。</span></span><br><span class="line">        Set&lt;String&gt; set = properties.stringPropertyNames();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.print(iterator.next());<span class="comment">//小林小李小明</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        string getProperty(String key)：通过key找到value值,此方法相当于Nap集合中的get(key)方法</span></span><br><span class="line">        String s = properties.getProperty(<span class="string">&quot;小林&quot;</span>);</span><br><span class="line">        System.out.println(s);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果输入的Key不存在则返回null</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s1 = properties.getProperty(scanner.next());</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="store方法与load方法"><a href="#store方法与load方法" class="headerlink" title="store方法与load方法"></a>store方法与load方法</h3><p><strong>stroe方法</strong></p><p>可以使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储.</p><ul><li>void store ( outputStream out,String comments)</li><li>void store (iriter wuriter,String comments)</li></ul><p>参数：</p><p>OutputStream out：字节输出流，不能写入中文</p><p>Writer writer：字符输出流，可以写中文</p><p>String comments：注释，用来解释说明保存的文件是做什么用的，不能使用中文，会产生乱码，默认是Unicode编码，一般使用”空字符串”。</p><p>使用步骤:</p><ul><li>创建Properties集合对象,添加数据</li><li>创建字节输出流/字符输出流对象,构造方法中绑定要输出的目的地</li><li>使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo07Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02PropertiesStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Properties集合对象,添加数据</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小林&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小李&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节输出流/字符输出流对象,构造方法中绑定要输出的目的地</span></span><br><span class="line">        FileWriter fw =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\4.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</span></span><br><span class="line">        properties.store(fw,<span class="string">&quot;save data&quot;</span>);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#save data</span></span><br><span class="line"><span class="comment">//#Thu Aug 19 17:17:58 CST 2021</span></span><br><span class="line"><span class="comment">//小林=15</span></span><br><span class="line"><span class="comment">//小李=20</span></span><br><span class="line"><span class="comment">//小明=19</span></span><br></pre></td></tr></table></figure><p><strong>load方法</strong></p><p>可以使用Properties集合中的方法Load,把硬盘中保存的文件(键值对) ,读取到集合中使用</p><ul><li>void load( inputstream inStream)</li><li>void load ( Reader reader)</li></ul><p><strong>参数：</strong></p><ul><li>InputStream instream:字节输入流,不能读取含有中文的键值对</li><li>Reader reader:字符输入流,能读取含有中文的键值对</li></ul><p><strong>使用步骤：</strong></p><ul><li>创建Properties集合对象</li><li>使用Properties集合对象中的方法load读取保存键值对的文件</li><li>遍历Properties集合</li></ul><p><strong>注意：</strong></p><ul><li>存储键值对的文件中,键与值默认的连接符号可以使用=或者空格(其他符号)</li><li>存储键值对的文件中,可以使用#进行注释,被注释的键值对不会再被读取</li><li>存储键值对的文件中,键与值默认都是字符串,不用再加引号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo07Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03PropertiesLoad</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Properties集合对象</span></span><br><span class="line">        Properties properties =<span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//使用Properties集合对象中的方法load读取保存键值对的文件</span></span><br><span class="line">        FileReader fileReader =<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\4.txt&quot;</span>);</span><br><span class="line">        properties.load(fileReader);</span><br><span class="line">        fileReader.close();</span><br><span class="line">        <span class="comment">//遍历Properties集合</span></span><br><span class="line">        Set&lt;String&gt; set = properties.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key:set) &#123;</span><br><span class="line">            String property = properties.getProperty(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+property);</span><br><span class="line">            <span class="comment">//小林=15</span></span><br><span class="line">            <span class="comment">//小李=20</span></span><br><span class="line">            <span class="comment">//小明=19</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第六章-缓冲流"><a href="#第六章-缓冲流" class="headerlink" title="第六章    缓冲流"></a>第六章    缓冲流</h1><hr><h2 id="6-1概述"><a href="#6-1概述" class="headerlink" title="6.1概述"></a>6.1概述</h2><p>缓冲流，也叫高效流，是对4个基本的流的增强，按照数据类型分类：</p><ul><li><strong>字节缓冲流：</strong> <code>BufferedInputStream</code>，<code>BufferedOutputStream</code></li><li><strong>字符缓冲流：</strong> <code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写效率。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210819184022.png" alt="QQ截图20210819184022"></p><hr><h2 id="6-2字节缓冲流"><a href="#6-2字节缓冲流" class="headerlink" title="6.2字节缓冲流"></a>6.2字节缓冲流</h2><h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>** <code>public BufferedOutputStream(OutputStream out)</code>：创建一个新的缓冲输出流。**</li></ul><p><code>java.io.BufferedOutputStream extends OutputStream</code>                      Bufferedoutputstream:字节缓冲输出流</p><p>继承自父类的共性成员方法:</p><ul><li>public void close() :关闭此输出流并释放与此流相关联的任何系统资源。</li><li>public void flush( ):刷新此输出流并强制任何缓冲的输出字节被写出。</li><li>public void write(byte[ ] b):将b.length字节从指定的字节数组写入此输出流。</li><li>public void write(byte[ ] b， int off, int len):从指定的字节数组写入、len字节，从偏移量off开始输出到此输出流。</li><li>public abstract void write(int b):将指定的字节输出流。</li></ul><p><strong>构造方法：</strong></p><ul><li>BufferedOutputStream(OutputStream out)创建一个新的缓冲输出流，以将数据写入指定的底层输出流。</li><li>BufferedOutputStream(OutputStream out，int size)创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。</li></ul><p><strong>参数：</strong></p><ul><li>OutputStream out：字节输出流，我们可以传递FileOutputStream，缓冲流会给FileOutputStream增加一个缓冲区，提高FileOutputStream的写入效率</li><li>int size：指定缓冲流内部缓冲流区的大小，不指定默认</li></ul><p><strong>使用步骤(重点)</strong></p><ul><li>创建FileOutputStream对象，构造方法中绑定要输出的目的地。</li><li>创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率</li><li>使用BufferedOutputStream对象中的方法write，把数据写入到内部缓冲区中</li><li>使用BufferedOutputStream对象中的方法flush，把内部缓冲区的数据，刷新到文件中</li><li>释放资源(会现调用flush方法刷新数据，第4步可以省略)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BufferedOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line">        FileOutputStream fom =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\5.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率</span></span><br><span class="line">        BufferedOutputStream bof =<span class="keyword">new</span> BufferedOutputStream(fom);</span><br><span class="line">        <span class="comment">//使用BufferedOutputStream对象中的方法write，把数据写入到内部缓冲区中</span></span><br><span class="line">        bof.write(<span class="string">&quot;我们把数据写入文件中&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">//        bof.flush();//调用close方法时默认先调用flush方法刷新数据所以此步骤可以省略</span></span><br><span class="line">        bof.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>** <code>public BufferedInputStream(InputStream in)</code>：创建一个新的缓冲输入流。**</li></ul><p><code>java.io.BufferedInputstream extends Inputstream</code>                         BufferedInputstream :字节缓冲输入流</p><p>继承自父类的共性成员方法:</p><ul><li><code>public void close()</code>：关闭此输入流并释放与此流相关联的任何系统资源。</li><li><code>public abstract int read()</code>：从输入流读取数据的下一个字节。</li><li><code>public int read(byte[] b)</code>：从输入流中读取一些字节数，并将它们存储到字节数组b中。</li></ul><p><strong>构造方法：</strong></p><ul><li>BufferedInputStreom(InputStream in)：创建一个BufferedInputStream并保存其参数，即输入流 in，以便将来使用。</li><li>BufferedInputStream(Inputstream in，int size)：创建具有指定缓冲区大小的 BufferedInputStream并保存其参数，即输入流in，以便将来使用。</li></ul><p><strong>参数：</strong></p><ul><li>InputStream in：字节输入流，我们可以传递FileInputStream，缓冲流会给FileInputStream增加一个缓冲区，提高FileInputStream的读取效率</li><li>int size：指定缓冲流内部缓冲流区的大小，不指定默认</li></ul><p><strong>使用步骤(重点)</strong></p><ul><li>创建FileInputStream对象，构造方法中绑定要读取的数据源。</li><li>创建BufferedInputStream对象，构造方法中传递FileInputStream对象，提高FileInputStream对象的读取效率</li><li>使用BufferedInputStream对象中的方法read，读取文件</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BufferedInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\5.txt&quot;</span>);</span><br><span class="line">        BufferedInputStream bis =<span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();<span class="comment">//关闭bis时fis自动关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h3><p><strong>文件复制的步骤：</strong></p><ul><li>创建字节缓冲输入流对象,构造方法中传递字节输入流</li><li>创建字节缓冲输出流对象,构造方法中传递字节输出流</li><li>使用字节缓冲输入流对象中的方法read,读取文件</li><li>使用字节缓冲输出流中的方法write,把读取的数据写入到内部缓冲区中</li><li>释放资源(会先把缓冲区中的数据,刷新到文件中)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02CopyFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01CopeFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s=System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//创建字节缓冲输入流对象,构造方法中传递字节输入流</span></span><br><span class="line">        BufferedInputStream bis =<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\1.png&quot;</span>));</span><br><span class="line">        <span class="comment">//创建字节缓冲输出流对象,构造方法中传递字节输出流</span></span><br><span class="line">        BufferedOutputStream bos =<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\1.png&quot;</span>));</span><br><span class="line">        <span class="comment">//使用字节缓冲输入流对象中的方法read,读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//使用字节缓冲输出流中的方法write,把读取的数据写入到内部缓冲区中</span></span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源(会先把缓冲区中的数据,刷新到文件中)</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        <span class="keyword">long</span> e =System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span>+(e-s)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-3字符缓冲流"><a href="#6-3字符缓冲流" class="headerlink" title="6.3字符缓冲流"></a>6.3字符缓冲流</h2><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>** <code>public BufferedWriter(Writer out)</code>：创建一个新的缓冲输出流。**</li></ul><p><strong>构造方法：</strong></p><ul><li>Bufferediwriter(writer out）创建一个使用默认大小输出缓冲区的缓冲字符输出流。</li><li>Bufferedwriter(writer out, int sz）创建一个使用给定大小输出缓冲区的新缓冲字符输出流。</li></ul><p><strong>参数：</strong></p><ul><li>writer out:字符输出流，我们可以传递Filewriter ,缓冲流会给FiLewriter增加一个缓冲区,提高FiLewriter的写入效率</li><li>int sz:指定缓冲区的大小,不与默认大小</li></ul><p><strong>特有方法：</strong></p><p>BufferedWriter : <code>public void newLine()：</code>写一行行分隔符,由系统属性定义符号。</p><p><strong>使用步骤(重点)</strong></p><ul><li>创建字符缓冲输出流对象,构造方法中传递字符输出流</li><li>调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中</li><li>调用字符缓冲输出流中的方法flush,把内存缓冲区中的数据,刷新到文件中</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03BufferedWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象,构造方法中传递字符输出流</span></span><br><span class="line">        BufferedWriter bw =<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\6.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;我们把数据写入文件中&quot;</span>);</span><br><span class="line">            <span class="comment">//调用字符缓冲输出流中的方法flush,把内存缓冲区中的数据,刷新到文件中</span></span><br><span class="line"><span class="comment">//            bw.write(&quot;\r\n&quot;);</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.flush();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>** <code>public BufferedReader(Reader in)</code>：创建一个新的缓冲输入流。**</li></ul><p><strong>构造方法：</strong></p><ul><li><code>BufferedReader(Reader in)：</code>创建一个使用认大小输入缓冲区的缓冲字符输入流。</li><li><code>BufferedReader (Reader in, int sz)：</code>创建一个使用指定大小输入缓冲区的缓冲字符输入流。</li></ul><p><strong>参数：</strong></p><ul><li>Reader in：字符输入流，我们可以传递FileReader ,缓冲流会给FiLeReader增加一个缓冲区,提高FiLeReader的读取效率。</li><li>int sz:指定缓冲区的大小,不与默认大小</li></ul><p><strong>特有方法：</strong></p><p>BufferedReader : <code>public string readLine()：</code>读一行文字。</p><p>读取一个文本行。通过下列字符之一即可认为某行已终止:换行(‘\n’)、回车（’\r’）或回车后直接跟着换行。</p><p>返回:<br>包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回null。</p><p>抛出:<br>IOException -如果发生I/o错误。</p><p><strong>使用步骤(重点)</strong></p><ul><li>创建字符缓冲输入流对象,构造方法中传递字符输入流</li><li>使用字符缓冲输入流对象中的方法read/readline读取文本</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04BufferedReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br =<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\6.txt&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li>BufferedWriter : <code>public void newLine()：</code>写一行行分隔符,由系统属性定义符号。</li></ul><blockquote><p>println方法调用的就是 <code>public void newLine()：</code></p></blockquote><ul><li>BufferedReader : <code>public string readLine()：</code>读一行文字。</li></ul><hr><h2 id="6-4练习：文本排序"><a href="#6-4练习：文本排序" class="headerlink" title="6.4练习：文本排序"></a>6.4练习：文本排序</h2><p>请将文本信息恢复顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line">8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎﹔陛下亦宜自谋，以咨锻善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line">4 .将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line">2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line">1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">9.今当远离，临表涕零，不知所言。</span><br><span class="line">6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line">7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line">5.亲贤臣，远小人，此先汉所以兴隆也;亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ul><li>创建一个HashMap集合对象,可以:存储每行文本的序号(1,2,3,.. ) ;value:存储每行的文本</li><li>创建字符缓冲输入流对象,构造方法中绑定字符输入流</li><li>创建字符缓冲输出流对象,构造方法中绑定字符输出流</li><li>使用字符缓冲输入流中的方法readline,逐行读取文本</li><li>对读取到的文本进行切割,获取行中的序号和文本内容</li><li>把切割好的序号和文本的内容存储到HashMap集合中(key序号是有序的,会自动排序1,2,3,4..)</li><li>遍历HashMap集合,获取每一个键值对</li><li>把每一个键值对,拼接为一个文本行</li><li>把拼接好的文本,使用字符缓冲输出流中的方法write,写入到文件中</li><li>释放资源</li></ul><h3 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个HashMap集合对象,Key:存储每行文本的序号(1,2,3,.. ) ;value:存储每行的文本</span></span><br><span class="line">        HashMap&lt;String,String&gt; hashMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象,构造方法中绑定字符输入流</span></span><br><span class="line">        BufferedReader br =<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\6.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象,构造方法中绑定字符输出流</span></span><br><span class="line">        BufferedWriter bw =<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\7.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用字符缓冲输入流中的方法readline,逐行读取文本</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//对读取到的文本进行切割,获取行中的序号和文本内容</span></span><br><span class="line">            String[] arr = line.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">            <span class="comment">//把切割好的序号和文本的内容存储到HashMap集合中(key序号是有序的,会自动排序1,2,3,4..)</span></span><br><span class="line">            hashMap.put(arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历HashMap集合,获取每一个键值对</span></span><br><span class="line">        <span class="keyword">for</span> (String key:hashMap.keySet()) &#123;</span><br><span class="line">            String value = hashMap.get(key);</span><br><span class="line">            <span class="comment">//把每一个键值对,拼接为一个文本行</span></span><br><span class="line">            line=key+<span class="string">&quot;.&quot;</span>+value;</span><br><span class="line">            <span class="comment">//把拼接好的文本,使用字符缓冲输出流中的方法write,写入到文件中</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();<span class="comment">//写换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第七章-转换流"><a href="#第七章-转换流" class="headerlink" title="第七章    转换流"></a>第七章    转换流</h1><hr><h2 id="7-1字符编码和字符集"><a href="#7-1字符编码和字符集" class="headerlink" title="7.1字符编码和字符集"></a>7.1字符编码和字符集</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong>。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong>。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p>编码：字符(能看懂的)—&gt;字节(看不懂的)</p><p>解码：字节(看不懂的)—&gt;字符(能看懂的)</p><ul><li>**字符编码<code>Character Encoding</code>**：就是一套自然语言的字符与二进制数之间的对应规则。</li></ul><p>编码表：生活中文字和计算机中二进制的对应规则。</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li>**字符集<code>Charset</code>**：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820082714.png" alt="QQ截图20210820082714"></p><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就制定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><strong>ASSII字符集：</strong></li></ul><p>1.ASCll ( American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符(回车键、退格、换行键等）和可显示字符(英文大小写字符、阿拉伯数字和西文符号)。</p><p>2.基本的ASCII字符集，使用7位( bits )表示一个字符，共128字符。ASCII的扩展字符集使用8位( bits )表示一个字符，共256字符，方便支持欧洲常用字符。</p><ul><li><strong>ISO-8859-1字符集：</strong></li></ul><p>1.拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</p><p>2.ISO-5559-1使用单字节编码，兼容ASCII编码。</p><ul><li><strong>GBxxx字符集：</strong></li></ul><p>1.GB就是国标的意思，是为了显示中文而设计的一套字符集。</p><p>2.GB2312∶简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p><p>3.GBK∶最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了<br>21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</p><p>4.GB18030∶最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</p><ul><li><strong>Unicode字符集：</strong></li></ul><p>1.Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</p><p>2.它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</p><p>3.UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组(IETF ） 要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则∶</p><ul><li>128个US-ASCl字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。</li><li>大部分常用字(含中文)，使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ul><hr><h2 id="7-2编码引出的问题"><a href="#7-2编码引出的问题" class="headerlink" title="7.2编码引出的问题"></a>7.2编码引出的问题</h2><p>在IDEA中，使用<code>FileReader</code>读取项目中的文本文件。由于IDEA的设置，都是默认的UTF-8编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01FileReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr =<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\11.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) len);<span class="comment">//���</span></span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-3InputStreamReader类"><a href="#7-3InputStreamReader类" class="headerlink" title="7.3InputStreamReader类"></a>7.3InputStreamReader类</h2><p><code>java.io.InputStreamReader extends Reader</code></p><p>InputStreamReader：是字节流通向字符流的桥梁:它使用指定的charset读取字节并将其解码为字符。(解码:把看不懂的变成能看懂的)</p><p>继承自父类的共性成员方法:</p><ul><li>int read()：读取单个字符并返回。</li><li>int read ( char[ ] cbuf)：一次读取多个字符,将字符读入数组。</li><li>void close()：关闭该流并释放与之关联的所有资源。</li></ul><h3 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><code>InputStreamReader(InputStream in)</code>：创建一个使用默认字符集的字符流。</p></li><li><p><code>InputStreamReader(InputStream in,String charsetName)</code>：创建一个指定字符集的字符流。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputstreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputstream( <span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line">InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;in.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>InputStream in：字节输入流，用来读取文件中保存的字节</li><li>String charsetName：指定的编码表名称,不区分大小写,可以是utf-8/UTF-8,gbk/GBK….不指定默认使用UTF-8</li></ul><h3 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h3><p><strong>使用步骤(重点)</strong></p><ul><li>创建InputStreamReader对象,构造方法中传递字节输入流和指定的编码表名称</li><li>使用InputStreamReader对象中的方法read读取文件</li><li>释放资源</li></ul><blockquote><p>tips：构造方法中指定的编码表名称要和文件的编码相同,否则会发生乱码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03InputStreamReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        read_UTF_8();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read_UTF_8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建InputStreamReader对象,构造方法中传递字节输入流和指定的编码表名称</span></span><br><span class="line">        InputStreamReader isr =<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//使用InputStreamReader对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) len);<span class="comment">//你好</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-4OutputStreamWriter类"><a href="#7-4OutputStreamWriter类" class="headerlink" title="7.4OutputStreamWriter类"></a>7.4OutputStreamWriter类</h2><p><code>java.io.OutputStreamWriter extends Writer</code></p><p>OutputStreamWriter:是字符流通向字节流的桥梁:可使用指定的 charset将要写入流中的字符编码成字节。(编码:把能看懂的变成看不懂)</p><p>继续自父类的共性成员方法:</p><ul><li>void write(int c)写入单个字符。</li><li>void write(char[ ]  cbuf)写入字符数组。</li><li>abstract void write(char[ ] cbuf，int off， int len)写入字符数组的某一部分, off数组的开始索引, len写的字符个数。</li><li>void write ( String str)写入字符串。</li><li>void write( String str，int off， int len)写入字符串的某一部分, off字符串的开始索引, Len写的字符个数。</li><li>void flush ()刷新该流的缓冲。</li><li>void close()关闭此流，但要先刷新它。</li></ul><h3 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>OutputStreamWriter(OutputStream out)：</code>创建使用黑认字符编码的 OutputStreamWriter。</li><li><code>OutputStreamWriter(OutputStream out，String charsetName)：</code>创建使用指定字符集的OutputStreamWriter。</li></ul><p><strong>参数：</strong></p><ul><li>OutputStream out：字节输出流,可以用来写转换之后的字节到文件中</li><li>String charsetName：指定的编码表名称,不区分大小写,可以是utf-8/UTF-8,gbk/GBK….不指定默认使用UTF-8</li></ul><h3 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h3><p><strong>使用步骤(重点)</strong></p><ul><li>创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称</li><li>使用OutputStreamWriter对象中的方法write,把字符转换为字节存储缓冲区中(编码)</li><li>使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中(使用字节流写字节的过程)</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02OutputStreamWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        write_UTF_8();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_UTF_8</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称</span></span><br><span class="line">        OutputStreamWriter osw =<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//不指定默认是UTF-8</span></span><br><span class="line">        <span class="comment">//使用OutputStreamWriter对象中的方法write,把字符转换为字节存储缓冲区中(编码)</span></span><br><span class="line">        osw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        <span class="comment">//使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中(使用字节流写字节的过程)</span></span><br><span class="line">        osw.flush();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-5练习：转换文件编码"><a href="#7-5练习：转换文件编码" class="headerlink" title="7.5练习：转换文件编码"></a>7.5练习：转换文件编码</h2><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><ul><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ul><h3 id="案例实现-2"><a href="#案例实现-2" class="headerlink" title="案例实现"></a>案例实现</h3><p><strong>使用步骤(重点)</strong></p><ul><li>创建InputStreamReader对象，构造方法中传递字节输入流和指定的编码表名称GBK</li><li>创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称UTF-8</li><li>使用InputStreamReader对象中的方法read读取文件</li><li>使用OutputStreamWriter对象中的方法write,把读取的数据写入到文件中</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//创建InputStreamReader对象，构造方法中传递字节输入流和指定的编码表名称GBK</span></span><br><span class="line">        InputStreamReader isr =<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\11.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">//创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称UTF-8</span></span><br><span class="line">        OutputStreamWriter osw =<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\12.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//使用InputStreamReader对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//使用OutputStreamWriter对象中的方法write,把读取的数据写入到文件中</span></span><br><span class="line">            osw.write(len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第八章-序列化"><a href="#第八章-序列化" class="headerlink" title="第八章    序列化"></a>第八章    序列化</h1><hr><h2 id="8-1概述"><a href="#8-1概述" class="headerlink" title="8.1概述"></a>8.1概述</h2><p>Java提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>，<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。</p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>，<code>对象的类型</code>和<code>对象中存储的属性</code>信息，都可以用来在内存中创建对象。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820125126.png" alt="QQ截图20210820125126"></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820125835.png" alt="QQ截图20210820125835"></p><hr><h2 id="8-2ObjectOutputStream类"><a href="#8-2ObjectOutputStream类" class="headerlink" title="8.2ObjectOutputStream类"></a>8.2ObjectOutputStream类</h2><p><code>java.io.ObjectOutputStream</code>类，将Java对象的原始数据类型写出到文件，实现对象的持久储存。ObjectOutputStream：对象的序列化流。</p><h3 id="构造方法-9"><a href="#构造方法-9" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public 0bjectOutputStream(OutputStream out) </code>:创建一个指定OutputStream的ObjectOutputStream。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>OutputStream out：字节输出流</li></ul><p><strong>特有的成员方法：</strong></p><ul><li>void writeObject(Object obj)：将指定的对象写入ObjectOutputStream。</li></ul><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><p>1.一个对象要想序列化，必须满足两个条件:</p><ul><li>该类必须实现<code>java.io.Serializable</code>接口，<code>Serializable</code>是一个标记接口(<strong>里面是空的</strong>)，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code>关键字修饰。</li></ul><p>1.static关键字:静态关键字<br>静态优先于非静态加载到内存中(静态优先于对象进入到内存中)被static修饰的成员变量不能被序列化的,序列化的都是对象</p><p>2.transient关键字:瞬态关键字<br>被transient修饰成员变量,不能被序列化</p><p><strong>使用步骤(重点)</strong></p><ul><li>创建ObjectOutputStream对象,构造方法中传递字节输出流</li><li>使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ObjectOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ObjectOutputStream对象,构造方法中传递字节输出流</span></span><br><span class="line">        ObjectOutputStream oos =<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-3ObjectInputStream类"><a href="#8-3ObjectInputStream类" class="headerlink" title="8.3ObjectInputStream类"></a>8.3ObjectInputStream类</h2><p>ObjectInputStream：对象的反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。</p><p>作用：把文件中保存的对象，以流的方式读取出来使用。</p><h3 id="构造方法-10"><a href="#构造方法-10" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ObjectInputStream(InputStream in):</code>创建一个指定InputStream的ObjectInputStream。</li></ul><p><strong>参数：</strong></p><ul><li>InputStream in：字节输入流</li></ul><p><strong>特有的成员方法：</strong></p><ul><li><code>Object readObject()：</code>从ObjectInputStream读取对象</li></ul><h3 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h3><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用ObjectInputStream读取对象的方法:</p><ul><li><code>public final Object readObject ()∶</code>读取一个对象。</li></ul><p><strong>使用步骤(重点)</strong></p><ul><li>创建ObjectInputStream对象,构造方法中传递字节输入流</li><li>使用ObjectInputStream对象中的方法readObject读取保存对象的文件</li><li>释放资源</li><li>使用读取出来的对象(打印)</li></ul><blockquote><p>tips：read0bject方法声明抛出了classNotFoundException(class文件找不到异常)当不存在对象的class文件时抛出此异常<br>反序列化的前提:</p><ul><li>类必须实现Serializable</li><li>必须存在类对应的class文件</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ObjectInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ObjectInputStream对象,构造方法中传递字节输入流</span></span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用ObjectInputStream对象中的方法readObject读取保存对象的文件</span></span><br><span class="line">        Object o = ois.readObject();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="comment">//使用读取出来的对象(打印)</span></span><br><span class="line">        System.out.println(o);<span class="comment">//Person&#123;name=&#x27;小明&#x27;, age=19&#125;</span></span><br><span class="line">        Person p=(Person)o;</span><br><span class="line">        System.out.println(p.getName()+p.getAge());<span class="comment">//小明19</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个ClassNotFoundException异常。</strong></p><h3 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a>反序列化操作2</h3><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。发生这个异常的原因如下∶</strong></p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配</li><li>该类包含未知数据类型</li><li>该类没有可访问的无参数构造方法</li></ul><p><code>Serializable</code>接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code>该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820135233.png" alt="QQ截图20210820135233"></p><p>在Person类中添加一个自定义的序列号，序列化之后再对Person类修改时反序列化时就不会抛出<code>InvalidClassException</code>异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID =<span class="number">1L</span>;<span class="comment">//在类里方法外添加</span></span><br></pre></td></tr></table></figure><hr><h2 id="8-4练习：序列化集合"><a href="#8-4练习：序列化集合" class="headerlink" title="8.4练习：序列化集合"></a>8.4练习：序列化集合</h2><ul><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code>，并遍历集合，打印对象信息。</li></ul><h3 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h3><ul><li>定义一个存储Person对象的ArrayList集合</li><li>往Arraylist集合中存储Person对象</li><li>创建一个序列化流ObjectOutputStream对象</li><li>使用ObjectOutputStream对象中的方法writeObject ,对集合进行序列化</li><li>创建一个反序列化ObjectInputStream对象</li><li>使用ObjectInputStream对象中的方法readObject读取文件中保存的集合</li><li>把Object类型的集合转换为Arraylist类型</li><li>遍历Arraylist集合</li><li>释放资源</li></ul><h3 id="案例实现-3"><a href="#案例实现-3" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个存储Person对象的ArrayList集合</span></span><br><span class="line">        ArrayList&lt;Person&gt; arrayList =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往Arraylist集合中存储Person对象</span></span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小李&quot;</span>,<span class="number">17</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小林&quot;</span>,<span class="number">16</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小刚&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小金&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小吴&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        <span class="comment">//创建一个序列化流ObjectOutputStream对象</span></span><br><span class="line">        ObjectOutputStream oos =<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\list.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用ObjectOutputStream对象中的方法writeObject ,对集合进行序列化</span></span><br><span class="line">        oos.writeObject(arrayList);</span><br><span class="line">        <span class="comment">//创建一个反序列化ObjectInputStream对象</span></span><br><span class="line">        ObjectInputStream ois =<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\list.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用ObjectInputStream对象中的方法readObject读取文件中保存的集合</span></span><br><span class="line">        Object o = ois.readObject();</span><br><span class="line">        <span class="comment">//把Object类型的集合转换为Arraylist类型</span></span><br><span class="line">        ArrayList&lt;Person&gt; arrayList1=(ArrayList)o;</span><br><span class="line">        <span class="comment">//遍历Arraylist集合</span></span><br><span class="line">        Iterator&lt;Person&gt; iterator =arrayList1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小明&#x27;, age=19&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小李&#x27;, age=17&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小林&#x27;, age=16&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小刚&#x27;, age=22&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小金&#x27;, age=19&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小吴&#x27;, age=18&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第九章-打印流"><a href="#第九章-打印流" class="headerlink" title="第九章    打印流"></a>第九章    打印流</h1><hr><h2 id="9-1概述"><a href="#9-1概述" class="headerlink" title="9.1概述"></a>9.1概述</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><hr><h2 id="9-2PrintStream类"><a href="#9-2PrintStream类" class="headerlink" title="9.2PrintStream类"></a>9.2PrintStream类</h2><p><code>java.io.Printstream:</code>打印流<br>PrintStream：为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。</p><p>PrintStream特点:</p><ul><li>只负责数据的输出,不负责数据的读取</li><li>与其他输出流不同，PrintStream永远不会抛出IOException</li><li>有特有的方法, print , println<br>void print(任意类型的值)<br>void println(任意类型的值并换行)</li></ul><h3 id="构造方法-11"><a href="#构造方法-11" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>PrintStream(FiLe file):输出的目的地是一个文件</li><li>PrintStream(OutputStream out):输出的目的地是一个字节输出流</li><li>PrintStream(String fileName):输出的目的地是一个文件路径</li></ul><p><code>PrintStream extends OutputStream</code>继承自父类的成员方法:</p><ul><li><code>public void close( ) :</code>关闭此输出流并释放与此流相关联的任何系统资源。</li><li><code>public void flush():</code>刷新此输出流并强制任何缓冲的输出字节被写出。</li><li><code>public void write(byte[] b):</code>将b.length字节从指定的字节数组写入此输出流。</li><li><code>public void write(byte[] b，int off, int len) :</code>从指定的字节数组写入<code>len</code>字节，从偏移量<code>off</code>开始输出到此输出流。</li><li><code>public abstract void write(int b):</code>将指定的字节输出流。</li></ul><blockquote><p>tips：</p><ul><li>如果使用继承自父类的write方法写数据,那么查看数据的时候会查询编码表97-&gt;a</li><li>如果使用自己特有的方法print/println方法写数据，写的数据原样输出97-&gt;97</li></ul></blockquote><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;ps.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h3><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p><p>使用<code>System.setOut</code>方法改变输出语句的目的地改为参数中传递的打印流的目的地</p><ul><li>static void setOut (PrintStream out)<br>重新分配“标准”输出流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是在控制台输出的&quot;</span>);</span><br><span class="line">        PrintStream ps =<span class="keyword">new</span> PrintStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        System.setOut(ps);<span class="comment">//把输出语句的自的地改变为打印流的目的地</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我在打印流的目的地输出&quot;</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;第一章-IO概述&quot;&gt;&lt;a href=&quot;#第一章-IO概述&quot; class=&quot;headerlink&quot; title=&quot;第一章    IO概述&quot;&gt;&lt;/a&gt;第一章    IO概述&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1什么是IO&quot;&gt;&lt;a href=&quot;#1-1什么</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>线程</title>
    <link href="https://www.stq555.com/2022/01/11/%E7%BA%BF%E7%A8%8B/"/>
    <id>https://www.stq555.com/2022/01/11/%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-01-11T14:33:11.000Z</published>
    <updated>2022-01-11T15:16:52.980Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="第一章-多线程"><a href="#第一章-多线程" class="headerlink" title="第一章 多线程"></a>第一章 多线程</h1><p>学习的程序在没有跳转语句的前提下，都是由上至下依次执行，那么现在详设计一个程序，边打游戏边听歌，要解决这个问题，就需要使用多进程或多线程</p><hr><h2 id="1-1并发与并行"><a href="#1-1并发与并行" class="headerlink" title="1.1并发与并行"></a>1.1并发与并行</h2><ul><li><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生。</li><li><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生。</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708223907.png"></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708224345.png"></p><blockquote><p>注意：单核处理器的计算机肯定是不能并行处理多个任务的，只能是多个任务在单个CPU上并发运行。同理，线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><hr><h2 id="1-2线程与进程"><a href="#1-2线程与进程" class="headerlink" title="1.2线程与进程"></a>1.2线程与进程</h2><ul><li><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</li></ul><p><strong>进入到内存的程序叫进程</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708231151.png"></p><ul><li><strong>线程</strong>：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</li></ul><p><strong>应用程序到CPU的执行路径叫做线程</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708232046.png"></p><blockquote><p>tips：一个程序运行后至少有一个进程，一个进程可以包含多个线程</p></blockquote><p><strong>线程调度</strong></p><ul><li><p>分时调度</p><p>所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间。</p></li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708235938.png"></p><ul><li><p>抢先式调度</p><p>优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p></li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210709000000.png"></p><p><strong>主线程</strong></p><p>执行main方法的线程</p><p>单线程程序：java程序中只有一个线程</p><p>执行从main方法开始，从上到下依次执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MainThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        p1.run();</span><br><span class="line"></span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;小林&quot;</span>);</span><br><span class="line">        p2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(name+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210709105448.png"></p><hr><h2 id="1-3创建线程方式一"><a href="#1-3创建线程方式一" class="headerlink" title="1.3创建线程方式一"></a>1.3创建线程方式一</h2><hr><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。</p><p><strong>第一种方法</strong>：Java中通过<strong>继承Thread类</strong>来创建并启动多线程的步骤如下：</p><ul><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务，因此把run()方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的start()方法来启动该线程</li></ul><p>void start()使该线程开始执行；java虚拟机调用该线程的run方法。结果是两个线程并发的运行，当前线程(main方法)和另一个线程(创建的新线程，执行其run方法)。多次启动一个线程是非法的，特别是当前线程已经结束执行后，不能再重新启动，java程序属于抢占式调度，哪个线程的优先级高，哪个线程就优先执行，同一优先级，随机选择一个执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line">      mt.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第二章-线程"><a href="#第二章-线程" class="headerlink" title="第二章 线程"></a>第二章 线程</h1><hr><h2 id="2-1多线程原理"><a href="#2-1多线程原理" class="headerlink" title="2.1多线程原理"></a>2.1多线程原理</h2><p><strong>1.随机性打印结果</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210709111740.png"></p><p><strong>2.多线程内存图解</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210809181832.png"></p><hr><h2 id="2-2Thread类"><a href="#2-2Thread类" class="headerlink" title="2.2Thread类"></a>2.2Thread类</h2><p><strong>构造方法：</strong></p><ul><li><code>public Thread()</code>：分配一个新的线程对象。</li><li><code>public Thread(String name)</code>：分配一个指定名字的新的线程对象。</li><li><code>public Thread(Runnable target)</code>：分配一个带有指定目标的新的线程对象。</li><li><code>public Thread(Runnable target,String name)</code>：分配一个带有指定目标的并指定名字的新的线程对象。</li></ul><p><strong>常用方法：</strong></p><ul><li><code>public String getName()</code>：获取当前线程名称。</li><li><code>public void start()</code>：导致此线程开始执行；Java虚拟机调用此线程的run方法。</li><li><code>public void run()</code>：此线程要执行的任务在此处定义代码。</li><li><code>public static void sleep(long millis)</code>：使当前正在执行的线程以指定的毫秒数暂停(暂时停止执行)。</li><li><code>public static Thread currentThread()</code>：返回对当前正在执行的线程对象的引用</li></ul><p><strong>1.获取当前线程名称</strong></p><ul><li>使用Thread类中的方法getName()<br>String getName()返回该线程的名称。</li><li>可以先获取到当前正在执行的线程,使用线程中的方法getName()获取线程的名称<br>static Thread currentThread(）返回对当前正在执行的线程对象的引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread2 mt=<span class="keyword">new</span> MyThread2();</span><br><span class="line">        mt.start();<span class="comment">//Thread-0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line"><span class="comment">//        String name = getName();</span></span><br><span class="line"><span class="comment">//        System.out.println(name);</span></span><br><span class="line">        <span class="comment">//第二种方法</span></span><br><span class="line"><span class="comment">//        Thread thread = Thread.currentThread();</span></span><br><span class="line"><span class="comment">//        String name = thread.getName();</span></span><br><span class="line"><span class="comment">//        System.out.println(name);</span></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.设置线程的名称:(了解)</strong></p><ul><li>使用Thread类中的方法setName(名字)<br>void setName ( String name）改变线程名称，使之与参数name 相同。</li><li>创建一个带参数的构造方法，参数传递线程的名称;调用父类的带参构造方法,把线程名称传递给父类,让父类(Thread)给子线程起一个名字<br>Thread ( String name)分配新的 Thread 对象。</li></ul><p><strong>3.sleep</strong></p><p><code>public static void sleep(long millis)</code>：使当前正在执行的线程以指定的毫秒数暂停(暂时停止执行)。毫秒数结束后，线程继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Sleep</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模拟秒表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="comment">//使用Thread类的sleep方法让程序睡眠1秒钟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3创建线程方式二"><a href="#2-3创建线程方式二" class="headerlink" title="2.3创建线程方式二"></a>2.3创建线程方式二</h2><p>采用<code>java.lang.Runnable</code>，我们只需要重写run方法即可。</p><p>步骤：</p><ul><li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动线程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            RunnableImpl run =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">            Thread t =<span class="keyword">new</span> Thread(run);</span><br><span class="line">            t.start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4Thread和Runnable的区别"><a href="#2-4Thread和Runnable的区别" class="headerlink" title="2.4Thread和Runnable的区别"></a>2.4Thread和Runnable的区别</h2><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runnable接口的话，则很容易实现资源共享。</p><p><strong>总结：</strong></p><p><strong>实现Runnable接口比继承Thread类所具有的优势：</strong></p><p>1.适合多个相同的程序代码的线程去共享同一个资源。</p><p>2.可以避免Java中的单继承的局限性。</p><p>3.增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</p><p>4.线程池只能放入实现Runnable或Callable类线程，不能直接放入继承Thread的类。</p><blockquote><p>扩充：在Java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用Java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实就是在操作系统中启动了一个进程。</p></blockquote><hr><h2 id="2-5匿名内部类方式实现线程的创建"><a href="#2-5匿名内部类方式实现线程的创建" class="headerlink" title="2.5匿名内部类方式实现线程的创建"></a>2.5匿名内部类方式实现线程的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06InnerClassThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程的父类是Thread</span></span><br><span class="line">        <span class="comment">//new MyThread().start();</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="comment">//线程的接口Runnable</span></span><br><span class="line">        <span class="comment">//Runnable r =new RunnableImpl();//多态</span></span><br><span class="line">        Runnable t=<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="comment">//重写run方法，设置线程任务</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">       <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">       <span class="comment">//简化接口的方式</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第三章-线程安全"><a href="#第三章-线程安全" class="headerlink" title="第三章    线程安全"></a>第三章    线程安全</h1><hr><h2 id="3-1线程安全"><a href="#3-1线程安全" class="headerlink" title="3.1线程安全"></a>3.1线程安全</h2><p>如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><p>我们通过一个案例，演示线程的安全问题:</p><p>电影院要卖票，我们模拟电影院的卖票过程。假设要播放的电影是”“战狼三”，本次电影的座位共100个(本场电影只能卖100张票)。</p><p>我们来模拟电影院的售票窗口，实现多个窗口同时卖“葫芦娃大战奥特曼”这场电影票(多个窗口一起卖这100张票)</p><p>需要窗口，采用线程对象来模拟;需要票，Runnable接口子类来模拟</p><p>模拟票︰</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810131523.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo06.ThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo07.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   解决线程安全问题的第一种方案：使用同步代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个多个线程共享的票源</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line"><span class="comment">//     设置线程任务：卖票</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        使用死循环，让卖票操作重复执行</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//            先判断票是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//提高安全问题出现的概率，让程序睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>卖票案例出现了线程安全问题，卖出了不存在的票和重复的票。</p><hr><h2 id="3-2线程同步"><a href="#3-2线程同步" class="headerlink" title="3.2线程同步"></a>3.2线程同步</h2><p>当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。</p><p>要解决上述多线程并发访问一个资源的安全性问题：也就是解决重复票与不存在票问题，Java提供了同步机制(<strong>synchronized</strong>)来解决。</p><p>根据案例简述︰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>线程进入操作的时候，窗口<span class="number">2</span>和窗口<span class="number">3</span>线程只能在外等着，窗口<span class="number">1</span>操作结束，窗口<span class="number">1</span>和窗口<span class="number">2</span>和窗口<span class="number">3</span>才有机会进入代码去执行。也就是说在某个钱程修改共享资源的时候，其他线程不能修改该资源，等待修改完毕同步之后，才能去抢夺CPU资源，完成对应的操作，保证了数据的同步性，解决了线程不安全的现象。</span><br></pre></td></tr></table></figure><p>有三种方式完成同步操作：</p><ul><li>同步代码块</li><li>同步方法</li><li>锁机制</li></ul><hr><h2 id="3-3同步代码块"><a href="#3-3同步代码块" class="headerlink" title="3.3同步代码块"></a>3.3同步代码块</h2><ul><li><strong>同步代码块</strong>：<code>synchronized</code>关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。</li></ul><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">    需要同步操作的代码(访问了共享数据的代码)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同步锁</strong></p><p>对象的同步锁只是一个概念，可以想象为在对象上标记了一个锁。</p><p>1.锁对象 可以是任意类型。</p><p>2.多个线程对象 要使用同一把锁。</p><p>3.锁对象作用：把同步代码块锁住，只让一个线程在同步代码块中执行。</p><blockquote><p>注意：在任何时候，最多允许一个线程拥有同步锁，谁拿到锁就能进入代码块，其他的线程只能在外等着(BLOCKED)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo07.Synchronized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo07.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   解决线程安全问题的第一种方案：使用同步代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个多个线程共享的票源</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">     Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">//     设置线程任务：卖票</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        使用死循环，让卖票操作重复执行</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">            <span class="comment">//            先判断票是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//提高安全问题出现的概率，让程序睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810164723.png"></p><hr><h2 id="3-4同步方法"><a href="#3-4同步方法" class="headerlink" title="3.4同步方法"></a>3.4同步方法</h2><ul><li><strong>同步方法</strong>：使用synchronized修饰的方法，就叫做同步方法，保证A线程执行该方法的时候，其他线程只能在方法外等着。</li></ul><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同步锁是Who？</p><ul><li>对于非static方法，同步锁就是this</li><li>对于static方法，静态方法的锁对象是本类的class属性—&gt;calss文件对象(反射)</li></ul></blockquote><p>1.非静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo08.Synchronized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo08.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    解决线程安全问题的第二种方案：使用同步方法</span></span><br><span class="line"><span class="comment">    步骤：</span></span><br><span class="line"><span class="comment">        1.把访问了共享数据的代码抽取出来，放到一个方法中</span></span><br><span class="line"><span class="comment">        2.在方法上添加synchronized修饰符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            payTicket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">payTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo08.Synchronized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo08.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    解决线程安全问题的第二种方案：使用同步方法</span></span><br><span class="line"><span class="comment">    步骤：</span></span><br><span class="line"><span class="comment">        1.把访问了共享数据的代码抽取出来，放到一个方法中</span></span><br><span class="line"><span class="comment">        2.在方法上添加synchronized修饰符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            payTicket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">payTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(RunnableImpl.class)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5Lock锁"><a href="#3-5Lock锁" class="headerlink" title="3.5Lock锁"></a>3.5Lock锁</h2><p><code>java.util.concurrent.locks.Lock</code>机制提供了比<strong>synchronized</strong>代码块和<strong>synchronized</strong>方法更广泛的锁定操作，同步代码块/同步方法具有的功能Lock都有，除此之外更强大，更体现面向对象。</p><p>Lock锁也称同步锁，加锁与释放锁方法：</p><ul><li><code>public void lock()</code>：加同步锁</li><li><code>public void unlock()</code>：释放同步锁</li></ul><p>java.util.concurrent.locks.ReentrantLock impLements Lock接口</p><p><strong>使用步骤:</strong></p><ul><li>在成员位置创建一个ReentrantLock对象</li><li>在可能会出现安全问题的代码前调用Lock接口中的方法Lock获取锁</li><li>在可能会出现安全问题的代码后调用Lock接口中的方法unLock释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo09.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo09.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 解决线程安全问题的第三种方案：使用Lock锁</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//1.在成员位置创建一个ReentrantLock对象</span></span><br><span class="line">    Lock l =<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            l.lock();</span><br><span class="line">            <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    l.unlock();<span class="comment">//无论程序是否异常，都会把锁释放</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第四章-线程状态"><a href="#第四章-线程状态" class="headerlink" title="第四章    线程状态"></a>第四章    线程状态</h1><hr><h2 id="4-1线程状态概述"><a href="#4-1线程状态概述" class="headerlink" title="4.1线程状态概述"></a>4.1线程状态概述</h2><p>当线程被创建并启用后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。</p><p>在线程的生命周期中，API中<code>java.lang.Thread.State</code>这个枚举中给出了六种线程状态：</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810174734.png"></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810174638.png"></p><hr><h2 id="4-2Timed-Waiting-计时等待"><a href="#4-2Timed-Waiting-计时等待" class="headerlink" title="4.2Timed Waiting(计时等待)"></a>4.2Timed Waiting(计时等待)</h2><p><strong>倒计时</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo05.Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Sleep</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模拟秒表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="comment">//使用Thread类的sleep方法让程序睡眠1秒钟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入TIMED_WAITING状态的一种常见情形是调用sleep方法，单独的线程也可以调用，不一定非要有协作关系。</li><li>为了让其他的线程有机会执行，可以将Thread.sleep()的调用<strong>放在线程run()之内</strong>。这样才能保证该线程执行过程中会睡眠。</li><li>sleep与锁无关，线程睡眠到期自动苏醒，并返回到Runnable(可运行)状态。</li></ul><blockquote><p>tips：sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始立刻执行。</p></blockquote><p>Timed Waiting线程状态图：</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810174841.png"></p><hr><h2 id="4-3BLOCKED-锁阻塞"><a href="#4-3BLOCKED-锁阻塞" class="headerlink" title="4.3BLOCKED(锁阻塞)"></a>4.3BLOCKED(锁阻塞)</h2><p>Blocked状态在API中的介绍为：一个正在阻塞等待一个监视器锁(锁对象)的线程处于这一状态。</p><p>如，线程A与线程B代码中使用同一锁，如果线程A获取到锁，线程A进入到Runnable状态，那么线程B就进入到Blocked锁阻塞状态。</p><p>这是由Runnable状态进入Blocked状态。除此Waiting以及Time Waiting状态也会在某种情况下进入阻塞状态。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810175943.png"></p><hr><h2 id="4-4Waiting-无限等待"><a href="#4-4Waiting-无限等待" class="headerlink" title="4.4Waiting(无限等待)"></a>4.4Waiting(无限等待)</h2><p>Waiting状态在API中介绍为：一个正在无限期等待另一个线程执行一个特别的(唤醒)动作的线程处于这一状态。</p><p>Runnable—wait()—&gt;Waiting—notify()—&gt;Runnable</p><p><strong>等待唤醒案例:线程之间的通信</strong><br>        创建一个顾客线程(消费者):告知老板要的包子的种类和数量,调用wait方法,放弃cpu的执行,进入到WAITING状态(无限等待)</p><p>​        创建一个老板线程(生产者):花了5秒做包子,做好包子之后,调用notify方法,唤醒顾客吃包子</p><p>注意:<br>       顾客和老板线程必须使用同步代码块包裹起来,保证等待和唤醒只能有一个在执行</p><p>​       同步使用的锁对象必须保证唯—<br>​       只有锁对象才能调用wait和notify方法</p><p>Obejct类中的方法<br>void wait()<br>         在其他线程调用此对象的notify()方法或notifyAll()方法前，导致当前线程等待。</p><p>void notify()<br>         唤醒在此对象监视器上等待的单个线程。</p><p>​         会继续执行wait方法之后的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo10WaitAndNotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj =<span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;告知老板要的包子的种类和数量&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            obj.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//唤醒之后的代码</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;开吃！&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">          <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                      <span class="keyword">try</span> &#123;</span><br><span class="line">                          Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                          e.printStackTrace();</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                          System.out.println(<span class="string">&quot;老板5秒钟之后做好包子，告知顾客，可以吃包子了&quot;</span>);</span><br><span class="line">                          obj.notify();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>进入到Timelwaiting (计时等待)有两种方式</strong></p><ul><li>使用sleep(Long m)方法,在毫秒值结束之后,线程睡醒进入到RunnablLe/BLocked状态</li><li>使用wait(Long m)方法, wait方法如果在毫秒值结束之后,还没有被notify唤醒,就会自动醒来，线程睡醒进入到Runmable/Blocked状态</li></ul><p><strong>唤醒的方法:</strong></p><ul><li>void notify()：唤醒在此对象监视器上等待的单个线程。</li><li>void notifyAll()：唤醒在此对象监视器上等待的所有线程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo10WaitAndNotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj =<span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客1告知老板要的包子的种类和数量&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//唤醒之后的代码</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客1开吃！&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客2告知老板要的包子的种类和数量&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//唤醒之后的代码</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客2开吃！&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;老板5秒钟之后做好包子，告知顾客，可以吃包子了&quot;</span>);</span><br><span class="line"><span class="comment">//                        obj.notify();//如果有多个等待线程，随机唤醒一个</span></span><br><span class="line">                          obj.notifyAll();<span class="comment">//全部唤醒</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第五章-等待唤醒机制"><a href="#第五章-等待唤醒机制" class="headerlink" title="第五章    等待唤醒机制"></a>第五章    等待唤醒机制</h1><hr><h2 id="5-1线程间通讯"><a href="#5-1线程间通讯" class="headerlink" title="5.1线程间通讯"></a>5.1线程间通讯</h2><p><strong>概念：</strong>多个线程在处理同一个资源，但是处理的动作(线程的任务)却不相同。</p><p>比如：线程A用来生产商品，线程B用来购买商品，商品可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，那么线程A与线程B之间就存在线程通信问题。</p><p><strong>为什么要处理线程间通信：</strong></p><p>多个线程并发执行时，在默认情况下CPU是随机切换线程的，当我们需要多个线程来共同完成一件任务时，并且我们希望他们有规律的执行，那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p><p><strong>如何保证线程间通信有效利用资源：</strong></p><p>多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作。就是多个线程在操作同一份数据时，避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个线程能有效的利用资源。而这种手段即–<strong>等待唤醒机制</strong>。</p><hr><h2 id="5-2等待唤醒机制"><a href="#5-2等待唤醒机制" class="headerlink" title="5.2等待唤醒机制"></a>5.2等待唤醒机制</h2><p><strong>什么是等待唤醒机制</strong><br>这是多个线程间的一种<strong>协作</strong>机制。谈到线程我们经常想到的是线程间的**竞争 ( race )**，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。</p><p>就是在一个线程进行了规定操作后，就进入等待状态 ( <strong>wait()</strong>)，等待其他线程执行完他们的指定代码过后再将其唤醒( <strong>notify()</strong>) ;在有多个线程进行等待时，如果需要，可以使用**notifyAll()**来唤醒所有的等待线程。</p><p>wait/notify 就是线程间的一种协作机制。</p><p><strong>等待唤醒中的方法</strong><br>等待唤醒机制就是用于解决线程间通信的问题的，使用到的3个方法的含义如下︰</p><ul><li>wait :线程不再活动，不再参与调度，进入wait set中，因此不会浪费CPU资源，也不会去竞争锁了，这时的线程状态即是WAITING。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即是”<strong>通知( notify )</strong> “在这个对象上等待的线程队wait set中释放出来，重新进入到调度队列( ready queue )中</li><li>notify :则选取所通知对象的wait set中的一个线程释放;唤醒等待时间最长的那个线程。</li><li>notifyAll:则释放所通知对象的wait set 上的全部线程。</li></ul><blockquote><p>tips：哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以她需要再次尝试去获取锁(很可能面临其它线程的竞争），成功后才能在当初调用wait方法之后的地方恢复执行。</p><p>总结：</p><ul><li>如果能获取锁，线程就从WAITING状态变成RUNNABLE状态</li><li>否则，总wait set 出来，又进入entry set，线程就从WAITING状态又变成BLOCKED状态</li></ul></blockquote><p><strong>调用wait和notify方法需要注意的细节</strong></p><ul><li>wait方法与notify方法必须要由同一个锁对象调用。因为∶对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li><li>wait方法与notify方法是属于Object类的方法的。因为︰锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li><li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为∶必须要通过锁对象调用这2个方法。</li></ul><hr><h2 id="5-3生产者与消费者问题"><a href="#5-3生产者与消费者问题" class="headerlink" title="5.3生产者与消费者问题"></a>5.3生产者与消费者问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo11case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     shangPin sp=<span class="keyword">new</span> shangPin();</span><br><span class="line">     <span class="keyword">new</span> ThreadA(sp).start();</span><br><span class="line">     <span class="keyword">new</span> ThreadB(sp).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo11case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">shangPin</span> </span>&#123;</span><br><span class="line">    String goods;</span><br><span class="line">    String box;</span><br><span class="line">    <span class="keyword">boolean</span> flag =<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo11case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> shangPin sp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(shangPin sp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sp=sp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (sp)&#123;</span><br><span class="line">                <span class="keyword">if</span> (sp.flag=<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sp.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    sp.goods=<span class="string">&quot;aj1&quot;</span>;</span><br><span class="line">                    sp.box=<span class="string">&quot;塑料盒&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    sp.goods=<span class="string">&quot;af1&quot;</span>;</span><br><span class="line">                    sp.box=<span class="string">&quot;纸盒&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadA正在生产&quot;</span>+sp.goods+sp.box);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                sp.flag=<span class="keyword">true</span>;</span><br><span class="line">                sp.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadA已经生产好了&quot;</span>+sp.goods+sp.box+<span class="string">&quot;ThreadB可以开始购买了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo11case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> shangPin sp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(shangPin sp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sp=sp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (sp)&#123;</span><br><span class="line">                <span class="keyword">if</span> (sp.flag=<span class="keyword">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sp.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadB正在购买：&quot;</span>+sp.goods+sp.box+<span class="string">&quot;商品&quot;</span>);</span><br><span class="line">                sp.flag=<span class="keyword">false</span>;</span><br><span class="line">                sp.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadB已经把：&quot;</span>+sp.goods+sp.box+<span class="string">&quot;商品购买完了，ThreadA开始生产商品&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;----------------------------------------------------------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第六章-线程池"><a href="#第六章-线程池" class="headerlink" title="第六章    线程池"></a>第六章    线程池</h1><hr><h2 id="6-1线程池思想概述"><a href="#6-1线程池思想概述" class="headerlink" title="6.1线程池思想概述"></a>6.1线程池思想概述</h2><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810212906.png"></p><p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题:</p><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p><p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务?</p><p>在Java中可以通过线程池来达到这样的效果。</p><hr><h2 id="6-2线程池概念"><a href="#6-2线程池概念" class="headerlink" title="6.2线程池概念"></a>6.2线程池概念</h2><ul><li><strong>线程池</strong>：其实就是一个容纳多个线程的容器，其中的线程可以重复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810214141.png"></p><p>线程池工作原理图：</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810214223.png"></p><p>合理利用线程池能够带来三个好处：</p><ul><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ul><hr><h2 id="6-3线程池的使用"><a href="#6-3线程池的使用" class="headerlink" title="6.3线程池的使用"></a>6.3线程池的使用</h2><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置线程池不是较优的，因此在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p><p>Executors类中有创建线程池的方法如下：</p><ul><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：返回线程池对象。(创建的是有界线程池，也就是池中的线程个数可以指定最大数量)</li></ul><p>获取到了一个线程池ExecutorService对象，那么怎么使用呢，在这里定义了一个使用线程池对象的方法如下:</p><ul><li><code>public Future&lt;?&gt; submit(Runnable task)</code>：获取线程池中的某一个线程对象，并执行。</li></ul><blockquote><p>Future接口：用来记录线程任务执行完毕后产生的结果。线程池创建与使用。</p></blockquote><p>使用线程池中线程对象的步骤：</p><p>1.创建线程池对象。</p><p>2.创建Runnable接口子类对象。(task)</p><p>3.提交Runnable接口子类对象。(take task)</p><p>4.关闭线程池(一般不做)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo12ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">        executorService.shutdown();<span class="comment">//不建议执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo12ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;创建了一个新的线程执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;第一章-多线程&quot;&gt;&lt;a href=&quot;#第一章-多线程&quot; class=&quot;headerlink&quot; title=&quot;第一章 多线程&quot;&gt;&lt;/a&gt;第一章 多线程&lt;/h1&gt;&lt;p&gt;学习的程序在没有跳转语句的前提下，都是由上至下依次执行，那么现在详设计一个程序，边打游戏边</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://www.stq555.com/2022/01/11/%E9%9B%86%E5%90%88/"/>
    <id>https://www.stq555.com/2022/01/11/%E9%9B%86%E5%90%88/</id>
    <published>2022-01-11T04:17:54.000Z</published>
    <updated>2022-01-11T14:29:10.639Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="第一章-Collection集合-单列集合"><a href="#第一章-Collection集合-单列集合" class="headerlink" title="第一章 Collection集合(单列集合)"></a>第一章 Collection集合(单列集合)</h1><h2 id="1-1集合概述"><a href="#1-1集合概述" class="headerlink" title="1.1集合概述"></a>1.1集合概述</h2><hr><ul><li>集合：集合是Java中提供的一种容器，可以用来存储多个数据。</li></ul><p>集合和数组的区别：</p><p>1.数组的长度是固定的。</p><p>   集合的长度是可变的。</p><p>2.数组中存储的是同一种元素，可以存储基本类型数据值。</p><p>   集合存储的都是对象，而且对象的类型可以不一致，在开发中一般当对象多的时候，使用集合进行存储。</p><hr><h2 id="1-2集合框架"><a href="#1-2集合框架" class="headerlink" title="1.2集合框架"></a>1.2集合框架</h2><hr><p>集合按照其存储结构可以分为两大类：分别是==单列集合==<strong>(java.util.Collection)<strong>和==双列集合==</strong>(java.util.Map)</strong></p><ul><li><strong>Collection</strong>:单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<strong>java.util.List</strong>和<strong>java.util.Set</strong>，其中List的特点是元素有序、元素可重复。Set的特点是元素无序，而且不可重复。List接口的主要实现类有<strong>java.util.ArrayList</strong>和<strong>java.util.LinkedList</strong>，Set接口的主要实现类有<strong>java.util.HashSet</strong>和<strong>java.util.TreeSet</strong></li></ul><p><img src="https://s2.loli.net/2022/01/11/kJzBVUpWIOrX4Z8.png"></p><ul><li>橙色框里填写的都是接口类型，而蓝色框里填写的都是具体的实现类</li><li>集合本身是一个工具，它存放在java.util包中。在<strong>Collection</strong>接口定义着单列集合框架中最最共性的内容</li></ul><p><img src="https://s2.loli.net/2022/01/11/OlFna5j4kIuobPi.png"></p><h2 id="1-3Collection常用功能"><a href="#1-3Collection常用功能" class="headerlink" title="1.3Collection常用功能"></a><strong>1.3Collection常用功能</strong></h2><hr><p><strong>Collection</strong>是所有单列集合的父接口，因此在<strong>Collection</strong>中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。</p><ul><li><p>public boolean add(E e)：把给定的对象添加到当前集合中</p></li><li><p>public void clear()：清空集合中所有的元素</p></li><li><p>public boolean remove(E e)：把给定的对象在当前集合中删除</p></li><li><p>public boolean contains(E e)：判断当前集合中是否包含给定的对象</p></li><li><p>public boolean isEmpty()：判断当前集合是否为空</p></li><li><p>public int size()：返回集合中元素的个数</p></li><li><p>public object[ ] toArray()：把集合中的元素，存储到数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rosyday01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rosy10Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; coll=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(coll);<span class="comment">//重写了toString方法 []</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.public boolean add(E e)：把给定的对象添加到当前集合中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b1=coll.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;田七&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;孙八&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b1:&quot;</span>+b1);<span class="comment">//b1:true</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三, 李四, 王五, 赵六, 田七, 孙八]</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2.public boolean remove(E e)：把给定的对象在当前集合中删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b2=coll.remove(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b2:&quot;</span>+b2);<span class="comment">//b2:true</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[李四, 王五, 赵六, 田七, 孙八]</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        3.public boolean contains(E e)：判断当前集合中是否包含给定的对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b3=coll.contains(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b3:&quot;</span>+b3);<span class="comment">//b3:true</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        4.public int size()：返回集合中元素的个数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> b4=coll.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中元素的个数是：&quot;</span>+b4);<span class="comment">//集合中元素的个数是：5</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        5.public boolean isEmpty()：判断当前集合是否为空</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b5=coll.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">&quot;b5:&quot;</span>+b5);<span class="comment">//b5:false</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        6.public object[ ] toArray()：把集合中的元素，存储到数组中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        7.public void clear()：清空集合中所有的元素，但集合还在</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        coll.clear();</span><br><span class="line">        System.out.println(coll);<span class="comment">//[]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="第二章-Iterator迭代器"><a href="#第二章-Iterator迭代器" class="headerlink" title="第二章 Iterator迭代器"></a>第二章 Iterator迭代器</h1><hr><h2 id="2-1Iterator接口"><a href="#2-1Iterator接口" class="headerlink" title="2.1Iterator接口"></a>2.1Iterator接口</h2><hr><p>​     在程序开发中，要遍历集合中的所有元素，jdk专门提供了一个接口<strong>java.util,Iterator</strong>。<strong>Colection</strong>和<strong>Map</strong>接口主要用于存储数据，而<strong>Iterator</strong>接口主要用于迭代访问(即遍历)<strong>Colection</strong>中的元素，因此<strong>Iterator</strong>对象也被称作迭代器。</p><p>  1.获取迭代器的方法：</p><ul><li><p>**public Iterator iterator( )**：获取集合对应的迭代器，用于遍历集合中的元素</p><p>2.迭代的概念：</p></li><li><p><strong>迭代</strong>：即<strong>Collection</strong>集合元素的通用获取方法。在取元素之前要判断集合中有没有元素，如果有就把这个元素取出来，继续再判断，如果还有就再取出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p></li></ul><p>​    3.<strong>Iterator</strong>接口的常用方法如下：</p><ul><li>**public E next( )**：返回迭代的下一个元素</li><li>**public boolean hasNext( )**：如果仍有元素可以迭代，则返回true</li></ul><p>​    4.迭代器的使用步骤(==重点==)：</p><p>​        1.使用集合中的方法iterator( )获取迭代器的实现类对象，使用Iterator接口接收(多态)</p><p>​        2.使用Iterator接口中的方法hasNext判断还有没有下一个元素</p><p>​        3.使用Iterator接口中的方法next取出集合中的下一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt;coll=<span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//使用多态方式创建对象</span></span><br><span class="line">        <span class="comment">//添加元素到集合</span></span><br><span class="line">        coll.add(<span class="string">&quot;叽叽叽&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;啦啦啦&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;略略略&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;啧啧啧&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;呵呵呵&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator=coll.iterator();</span><br><span class="line">        <span class="comment">// 1.使用集合中的方法iterator( )获取迭代器的实现类对象，使用Iterator接口接收(多态)</span></span><br><span class="line">        <span class="comment">//注意:Iterator&lt;E&gt;接口也是有泛型的，泛型的类型跟集合泛型的类型保持一致</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;<span class="comment">//2.使用Iterator接口中的方法hasNext判断还有没有下一个元素</span></span><br><span class="line">            System.out.println(iterator.next());<span class="comment">//3.使用Iterator接口中的方法next取出集合中的下一个元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2迭代器的实现原理"><a href="#2-2迭代器的实现原理" class="headerlink" title="2.2迭代器的实现原理"></a>2.2迭代器的实现原理</h2><hr><ul><li><p>java.util.Iterator接口：迭代器(对集合进行遍历)</p><pre><code>1.boolean hasNext() 如果仍有元素可以迭代，则返回true，没有返回false2.E next() 返回迭代的下一个元素                 取出集合中的下一个元素</code></pre><p> Iterator迭代器，是一个接口，我们无法直接使用，需要使用Iterator接口的实现类对象，获取实现类的方法比较特殊<br> Collection接口中有一个方法，叫iterator(),这个方法返回的就是迭代器的实现类对象</p><pre><code> Iterator&lt;E&gt; iterator() 返回在此 collection的元素上进行迭代的迭代器</code></pre></li><li><p>当没有元素可取时，<strong>iterator.hasNext()<strong>返回值为false，再输出</strong>iterator.next()<strong>时程序会报错，显示</strong>Exception in thread “main” java.util.NoSuchElementException</strong>，==NoSuchElementException没有元素异常==</p></li><li><p>Iterator<String> iterator===coll.iterator();==高亮部分是实现类对象，获取迭代器的实现类对象，并把指针(索引)指向集合的-1索引</p></li><li><p>iterator.next() 1.取出下一个元素</p><p>​                      2.会把指针向后移动一位</p></li></ul><h2 id="2-3增强for"><a href="#2-3增强for" class="headerlink" title="2.3增强for"></a>2.3增强for</h2><hr><p>​    增强for循环(也称for each循环)jdk1.5以后，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以在遍历过程中，不能对集合中的元素进行增删操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(集合/数组元素的数据类型  变量名：集合名/数组名)&#123;</span><br><span class="line">        <span class="comment">//写操作代码</span></span><br><span class="line">    System.out.println(变量名);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>底层使用的也是迭代器，使用for循环的格式，简化了迭代器的书写</p></li><li><p>**Collection<E>extends Iterable<E>**：所有单列集合都可以使用增强for </p><p>**public interface Iterable<T>**实现了这个接口，允许对象成为”foreach”语句的目标 </p></li></ul><h3 id="例一：遍历数组"><a href="#例一：遍历数组" class="headerlink" title="例一：遍历数组"></a>例一：遍历数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01foreach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> []arr=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//使用增强for遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a:arr) &#123;<span class="comment">//a代表数组中的每个元素</span></span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例二：遍历集合"><a href="#例二：遍历集合" class="headerlink" title="例二：遍历集合"></a>例二：遍历集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01foreach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; coll=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">&quot;科比&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;艾弗森&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;奥尼尔&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;姚明&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;乔丹&quot;</span>);</span><br><span class="line">        <span class="comment">//使用增强for遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String a:coll) &#123;<span class="comment">//接收变量a代表  代表被遍历到的集合元素</span></span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：增强for循环必须有遍历的目标。目标只能是Collection集合或者数组。增强for循环仅仅作为遍历出现</p></blockquote><hr><h1 id="第三章-泛型"><a href="#第三章-泛型" class="headerlink" title="第三章 泛型"></a>第三章 泛型</h1><hr><h2 id="3-1泛型概述"><a href="#3-1泛型概述" class="headerlink" title="3.1泛型概述"></a>3.1泛型概述</h2><hr><p>​    集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升为Object类型，当我们在取出每一个对象，并进行相应的操作，这时必须采用类型转换。</p><h2 id="3-2使用泛型的好处"><a href="#3-2使用泛型的好处" class="headerlink" title="3.2使用泛型的好处"></a>3.2使用泛型的好处</h2><hr><p>  1.创建集合对象，不使用泛型</p><ul><li>好处：集合不使用泛型，默认类型就是Object类型，可以存储任意类型的数据</li><li>弊端：不安全，会引发异常</li></ul><p>观察以下代码(==创建集合对象，不使用泛型==)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Collection coll=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        coll.add(<span class="number">5</span>);<span class="comment">//由于集合没有做任何限定，任何类型都可以在此存放</span></span><br><span class="line">        Iterator it=coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext)&#123;</span><br><span class="line">            <span class="comment">//需要打印每个字符串的长度，使用String类特有方法length获取字符串长度，就要把迭代出的对象转成String类型即向下转型</span></span><br><span class="line">            String str=(String)it.next();</span><br><span class="line">            System.out.println(str.length());<span class="comment">//会抛出ClassCastException类型转换异常，不能把Integer类型转换成String类型</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  2.==创建集合对象，使用泛型==</p><ul><li><p>好处：1.避免了类型转换的麻烦，存储的是什么类型，取出的就是什么类型</p><p>​           2.把运行期异常(代码运行之后会抛出的异常)，提升到了编译期异常(写代码的时候会报错)</p></li><li><p>弊端：泛型是什么类型，只能存储什么类型的数据</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;abb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;cdd&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            String s=iterator.next();<span class="comment">//使用泛型，不需要进行类型转换</span></span><br><span class="line">            System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：泛型是数据类型的一部分，我们将类名与泛型合并一起看作数据类型。</p></blockquote><h2 id="3-3泛型的定义与使用"><a href="#3-3泛型的定义与使用" class="headerlink" title="3.3泛型的定义与使用"></a>3.3泛型的定义与使用</h2><hr><p>​    泛型，用来灵活地将数据类型应用到不同的类，方法，接口当中。将数据类型作为参数进行传递。</p><h3 id="定义和使用含有泛型的类"><a href="#定义和使用含有泛型的类" class="headerlink" title="定义和使用含有泛型的类"></a>定义和使用含有泛型的类</h3><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，API中的ArrayList集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">pubilc <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型：即什么时候确定泛型。</p><p><strong>在创建对象的时候确定泛型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不写泛型默认Object类型</span></span><br><span class="line">        Name a1=<span class="keyword">new</span> Name();</span><br><span class="line">        a1.setName(<span class="number">1</span>);</span><br><span class="line">        System.out.println(a1.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Name对象，泛型使用Integer类型</span></span><br><span class="line">        Name&lt;Integer&gt; a2=<span class="keyword">new</span> Name&lt;&gt;();<span class="comment">//Integer类型</span></span><br><span class="line">        a2.setName(<span class="number">331</span>);</span><br><span class="line">        System.out.println(a2.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Name对象，泛型使用String类型</span></span><br><span class="line">        Name&lt;String&gt; a3=<span class="keyword">new</span> Name&lt;&gt;();<span class="comment">//字符串类型</span></span><br><span class="line">        a3.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        System.out.println(a3.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Name</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(E name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="含有泛型的方法"><a href="#含有泛型的方法" class="headerlink" title="含有泛型的方法"></a>含有泛型的方法</h3><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123;   &#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">(MVP mvp)</span></span>&#123;</span><br><span class="line">       System.out.println(mvp.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">(MVP mvp)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：<strong>调用方法时，确定泛型的类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02GenericMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericMethod it=<span class="keyword">new</span> GenericMethod();</span><br><span class="line">        it.method01(<span class="number">331</span>);</span><br><span class="line">        it.method01(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        it.method01(<span class="number">8.8</span>);</span><br><span class="line">        it.method01(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">        it.method02(<span class="string">&quot;静态方法不建议创建对象使用&quot;</span>);</span><br><span class="line">        GenericMethod.method02(<span class="number">331</span>);</span><br><span class="line">        GenericMethod.method02(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        GenericMethod.method02(<span class="string">&quot;8.8&quot;</span>);</span><br><span class="line">        GenericMethod.method02(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个含有泛型的方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;M&gt; <span class="function"><span class="keyword">void</span> <span class="title">method01</span><span class="params">(M m)</span></span>&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个含有泛型的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function"><span class="keyword">void</span> <span class="title">method02</span><span class="params">(S s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="含有泛型的接口"><a href="#含有泛型的接口" class="headerlink" title="含有泛型的接口"></a>含有泛型的接口</h3><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span>接口名&lt;代表泛型的变量&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title">getE</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：</p><p><strong>1.定义类时确定泛型的类型</strong></p><p><strong>2.接口使用什么泛型实现类就使用什么泛型</strong></p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试含有泛型的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl1对象</span></span><br><span class="line">        GenericInterfaceImpl1 it1=<span class="keyword">new</span> GenericInterfaceImpl1();</span><br><span class="line">        it1.method(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl2对象</span></span><br><span class="line">        GenericInterfaceImpl2&lt;Integer&gt; it2=<span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        it2.method(<span class="number">331</span>);</span><br><span class="line">        GenericInterfaceImpl2&lt;Double&gt; it3=<span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        it3.method(<span class="number">8.8</span>);</span><br><span class="line">        GenericInterfaceImpl2&lt;Boolean&gt; it4=<span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        it4.method(<span class="keyword">true</span>);</span><br><span class="line">        GenericInterfaceImpl2&lt;String&gt; it5=<span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        it5.method(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt;</span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">     含有泛型的接口，第一种使用方式：定义接口的实现类，实现接口，指定接口的泛型</span></span><br><span class="line"><span class="comment">     public interface Iterator&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">     E next();</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     Scanner类实现了Iterator接口，并指定接口的泛型为String，所以重写的next方法泛型默认就是String</span></span><br><span class="line"><span class="comment">     public final class Scanner implements Iterator&lt;String&gt;&#123;</span></span><br><span class="line"><span class="comment">           public String next() &#123; &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl1</span> <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">         System.out.println(s);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">       含有泛型的接口，第二种使用方式：接口使用什么泛型，实现类就使用什么泛型，类跟着接口走</span></span><br><span class="line"><span class="comment">       就相当于定义了一个含有泛型的类，创建对象的时候确定泛型的类型</span></span><br><span class="line"><span class="comment">       public interface list(E)&#123;</span></span><br><span class="line"><span class="comment">           boolean add(E e);</span></span><br><span class="line"><span class="comment">           E get(int index);</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">       public class ArrayList&lt;E&gt; implements List&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">           public boolean add(E e) &#123; &#125;</span></span><br><span class="line"><span class="comment">           public E get(int index) &#123; &#125;</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl2</span>&lt;<span class="title">I</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4泛型通配符"><a href="#3-4泛型通配符" class="headerlink" title="3.4泛型通配符"></a>3.4泛型通配符</h2><hr><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示，但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h3 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h3><p>泛型的通配符：<strong>不知道使用什么类型来接收的时候，此时可以使用？，？表示未知通配符</strong>。？：代表任意的数据类型</p><p>此时只能接受数据，不能往该集合中存储数据。</p><ul><li>使用方式：不能创建对象使用，只能作为方法的参数使用</li></ul><blockquote><p>tips：泛型是没有继承概念的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; a1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        a1.add(<span class="number">3</span>);</span><br><span class="line">        a1.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; a2=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        a2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        a2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">        printArray(a1);</span><br><span class="line">        printArray(a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;<span class="comment">//不知道集合里存储的是什么类型的数据时，我们使用泛型的通配符来接受数据</span></span><br><span class="line">        Iterator&lt;?&gt; iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通配符高级使用—受限泛型"><a href="#通配符高级使用—受限泛型" class="headerlink" title="通配符高级使用—受限泛型"></a>通配符高级使用—受限泛型</h3><p>在java的泛型中可以指定一个泛型的上限和下限</p><p><strong>泛型的上限</strong>：</p><ul><li>格式：<strong>类型名称 &lt;?  extends 类&gt; 对象名称</strong></li><li>意义：<strong>只能接收该类型及其子类</strong></li></ul><p><strong>泛型的下限</strong>：</p><ul><li>格式：<strong>类型名称 &lt;?  super类&gt; 对象名称</strong></li><li>意义：<strong>只能接收该类型及其父类</strong></li></ul><p>比如：现已知Object类，String类，Number类，Integer类，Number是Integer的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;Integer&gt; list1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;String&gt; list2=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;Number&gt; list3=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;Object&gt; list4=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        getElement1(list1);</span><br><span class="line">        getElement1(list2);<span class="comment">//报错</span></span><br><span class="line">        getElement1(list3);</span><br><span class="line">        getElement1(list4);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">        getElement2(list1);<span class="comment">//报错</span></span><br><span class="line">        getElement2(list2);<span class="comment">//报错</span></span><br><span class="line">        getElement2(list3);</span><br><span class="line">        getElement2(list4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span> <span class="params">(Collection&lt;? extends Number&gt; cool)</span></span>&#123;  &#125;</span><br><span class="line">    <span class="comment">//泛型的上限：此时的泛型？，必须是Number类型或者Number类型的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span> <span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; cool)</span></span>&#123;  &#125;</span><br><span class="line">    <span class="comment">//泛型的下限：此时的泛型？，必须是Number类型或者Number类型的父类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的继承关系：</p><p>Integer extends Number extends Object</p><p>String extends Object</p><h1 id="第四章-集合综合案例"><a href="#第四章-集合综合案例" class="headerlink" title="第四章 集合综合案例"></a>第四章 集合综合案例</h1><hr><h2 id="4-1案例介绍"><a href="#4-1案例介绍" class="headerlink" title="4.1案例介绍"></a>4.1案例介绍</h2><hr><p>按照斗地主的规则，完成发牌洗牌的动作。</p><p>具体规则：</p><p>使用54张牌打乱顺序，三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</p><h2 id="4-2案例分析"><a href="#4-2案例分析" class="headerlink" title="4.2案例分析"></a>4.2案例分析</h2><hr><ul><li><p>准备牌：</p><p>牌可以设计为一个ArrayList<String>，每个字符串为一张牌。</p><p>每张牌由花色数字两部分组成，我们可以使用花色集合和数字集合嵌套迭代完成每张牌的组装。</p></li><li><p>牌由Collection类的<strong>shuffle方法</strong>进行随机排序。</p><p>使用集合工具类Collections的方法</p><p>static void shuffle(List&lt;?&gt; list)使用指定的随机源对指定列表进行置换。</p><p>会随机的打乱集合中元素的顺序</p></li><li><p>发牌：</p><p>将每个人以及底牌设计为ArrayList<String>，将最后3张牌直接存放于底牌，剩余牌通过对3取模一次发牌。</p></li><li><p>看牌：直接打印每一个集合。</p></li></ul><p><img src="https://s2.loli.net/2022/01/11/KV8BOgCljD21w4s.png"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; poker=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] colors=&#123;<span class="string">&quot;♠&quot;</span>,<span class="string">&quot;♥&quot;</span>,<span class="string">&quot;♣&quot;</span>,<span class="string">&quot;♦&quot;</span> &#125;;</span><br><span class="line">        String[] numbers=&#123;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;J&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        poker.add(<span class="string">&quot;大王&quot;</span>);</span><br><span class="line">        poker.add(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String color:colors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String number:numbers) &#123;</span><br><span class="line">                poker.add(color+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line">        ArrayList&lt;String&gt; player01=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player02=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player03=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dipai=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;poker.size() ; i++) &#123;</span><br><span class="line">            String s = poker.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                dipai.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                player01.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                player02.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                player03.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家一&quot;</span>+player01);</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家二&quot;</span>+player02);</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家三&quot;</span>+player03);</span><br><span class="line">        System.out.println(<span class="string">&quot;底牌&quot;</span>+dipai);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第五章数据结构"><a href="#第五章数据结构" class="headerlink" title="第五章数据结构"></a>第五章数据结构</h1><hr><h2 id="5-1常见的数据结构"><a href="#5-1常见的数据结构" class="headerlink" title="5.1常见的数据结构"></a>5.1常见的数据结构</h2><hr><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1.栈"></a>1.栈</h3><ul><li><strong>栈：stack</strong>，又称堆栈，它是运算受限的线性表，其限制是允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</li></ul><p>简单的说：采用该结构的集合，对元素的存取有如下的特点</p><ul><li>==先进后出==(即，存进去的元素，要在它后面的元素依次取出后，才能取出该元素)。</li><li>栈的入口、出口的都是栈的顶端位置。</li></ul><p><img src="https://s2.loli.net/2022/01/11/g9I8OseTiumWFMw.png"></p><h3 id="2-队列"><a href="#2-队列" class="headerlink" title="2.队列"></a>2.队列</h3><ul><li><strong>队列：queue</strong>，简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li></ul><p>简单的说，采用该结构的集合，对元素的存取有如下特点：</p><ul><li>先进先出：(即，存进去的元素，要在它前面的元素依次取出后，才能取出该元素)。例如：火车进山洞</li><li>队列的入口、出口各站一侧。如下图：左侧为入口，右侧为出口。</li></ul><p><img src="https://s2.loli.net/2022/01/11/XHl4w3sdRTbhWZS.png"></p><p><img src="https://s2.loli.net/2022/01/11/4JMvSHsQyGRjLda.png"></p><h3 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h3><ul><li><p><strong>数组：Array</strong>：是有序的元素序列，数组是在内存中开辟一段连续的空间，并在空间存放元素。就像酒店，有100个房间，从001到100每个房间都有固定编号，通过编号就可以迅速找到住在房间里的人。</p><p>特点：1.查询快：数组的地址是连续的，我们通过数组的首地址可以找到数组，通过数组的索引可以快速查找某一元素</p><p>​           2.增删慢：数组的长度是固定的，我们想要增加/删除一个元素，必须创建一个新数组，把源数组的数据复制过来</p></li><li><p>查找元素快：通过索引，可以快速访问指定位置的元素</p><p><img src="https://s2.loli.net/2022/01/11/lvrotH3FVb1mnJh.png"></p></li><li><p>增删元素慢</p><p><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把元素组元素根据索引，复制到新数组对应索引的位置。</p></li></ul><p><img src="https://s2.loli.net/2022/01/11/yJTkuwC6jQAaNZh.png"></p><h3 id="4-链表"><a href="#4-链表" class="headerlink" title="4.链表"></a>4.链表</h3><ul><li><strong>链表：linked list</strong>，由一系列结点node(链表中每一个元素称为结点)组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，这里记录的是<strong>单向链表</strong>。</li></ul><p><img src="https://s2.loli.net/2022/01/11/Tx6FJyLSqnz491R.png"></p><p>简单的说，采用该结构的集合，对元素的存取有如下特点：</p><ul><li><p>多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下一个人的左手，以此类推，这样多个人就在一起了。</p><p><img src="https://s2.loli.net/2022/01/11/5XDy8YlAwfV1uFM.png"></p></li><li><p>查找元素慢：想查找某个元素，需要通过连接的结点，依次向后查找指定元素，链表中地址不是连续的，每次查询元素，都必须从头开始查询</p></li><li><p>增删元素快：链表结构，增加/删除一个元素，对链表的整体结构没有影响，所以增删快</p></li></ul><p><img src="https://s2.loli.net/2022/01/11/HBbTIjs9fdkcQxO.png"></p><h3 id="5-红黑树"><a href="#5-红黑树" class="headerlink" title="5.红黑树"></a>5.红黑树</h3><ul><li><strong>二叉树：binary tree</strong>，是每个结点不超过二的有序**树(tree)**。</li></ul><p>简单的理解，就是一种类似于我们生活中的树的结构，只不过每个结点上都最多只能有两个子结点。</p><p>二叉树是每个结点最多有两个子树的树结构。顶上：根节点，两侧：“左子树”，“右子树”。</p><ul><li><p>排序树/查找树</p><p>在二叉树的基础上，元素是有大小顺序的，左子树小，右子树大。</p><p><img src="https://s2.loli.net/2022/01/11/3EnktBm8luvs6FH.png"></p></li><li><p>平衡树</p><p><img src="https://s2.loli.net/2022/01/11/GNvTJpixAj5zgQc.png"></p></li><li><p>不平衡树</p><p><img src="https://s2.loli.net/2022/01/11/eydx2ESmpZPN17Q.png"></p></li><li><p><strong>红黑树</strong></p><p>特点：趋近于平衡树，查询的速度非常的快，查询叶子节点最大次数和最小次数不能超过二倍(找到一个元素的次数不能是其他的二倍)</p><p>性质1：每个节点要么是黑色，要么是红色。</p><p>性质2：根节点是黑色。</p><p>性质3：每个叶子节点（NIL）是黑色。</p><p>性质4：每个红色结点的两个子结点一定都是黑色。</p><p><strong>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong></p><p>性质5.1：如果一个结点存在黑子结点，那么该结点肯定有两个子结点</p><p><img src="https://s2.loli.net/2022/01/11/1fO6nDC5WqhwLNs.png"></p></li></ul><hr><h1 id="第六章-List集合"><a href="#第六章-List集合" class="headerlink" title="第六章 List集合"></a>第六章 List集合</h1><hr><h2 id="6-1List接口介绍"><a href="#6-1List接口介绍" class="headerlink" title="6.1List接口介绍"></a>6.1List接口介绍</h2><hr><p><strong>java.util.List</strong>接口继承自<strong>Collection</strong>接口，是单列集合的重要分支，实现了List接口的对象称为List集合。在List集合中允许出现重复的元素，所有元素以一种线性方式进行存储，在程序中可以通过索引来访问集合中的指定元素。List集合的特点：元素有序，即元素的存入顺序和取出顺序一致。</p><p>List接口的特点：</p><p>1.元素存取有序的集合。(存储123，取出123)</p><p>2.带索引的集合，通过索引就可以精确的操作集合中的元素。</p><p>3.集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</p><h2 id="6-2List接口中常用方法"><a href="#6-2List接口中常用方法" class="headerlink" title="6.2List接口中常用方法"></a>6.2List接口中常用方法</h2><hr><p>List作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还新增了一些根据元素索引来操作集合的特有方法，如下：</p><ul><li>**public void add (int index,E element)**：将指定的元素，添加到该集合的指定位置上。</li><li>**public E get(int index)**：返回集合指定位置上的元素。</li><li>**public E remove(int index)**：移除列表中指定位置的元素，返回的是被移除的元素。</li><li>**public E set(int index,E element)**：用指定元素替换集合中指定位置的元素，返回值的更新前的元素。</li></ul><hr><h1 id="第七章-List的子类"><a href="#第七章-List的子类" class="headerlink" title="第七章 List的子类"></a>第七章 List的子类</h1><hr><h2 id="7-1ArrayList集合"><a href="#7-1ArrayList集合" class="headerlink" title="7.1ArrayList集合"></a>7.1ArrayList集合</h2><hr><p>​         对象数组   ：直接打印得到的是null</p><p>​         数组里放的是对象的地址值。</p><p>缺点：一旦创建，程序运行期间数组的长度不可以改变。（为了解决这个问题，我们推出了ArralyList       即长度可变的数组）</p><p><strong>ArralyList集合的概述和基本使用</strong></p><p>​     1.对于ArrayList集合来说，有一个尖括号<E>代表泛型。</p><p>​     2.泛型：也就是装在集合当中的所有元素，全都是统一的什么类型。</p><p>​     3.注意：泛型只能是引用类型，不能是基本类型。</p><ul><li>对于ArrayList集合来说，直接打印得到的不是地址值而是内容。</li></ul><p>​       如果内容是空，得到的是空的中括号[ ]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deom02ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//创建一个集合，集合里元素的数据类型是String类型</span></span><br><span class="line"><span class="comment">//        System.out.println(list);//[]</span></span><br><span class="line">        <span class="comment">//如何向集合当中添加数据</span></span><br><span class="line">        list.add(<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ArralyList集合的常用方法</strong></p><ul><li><p>public boolean add(E e):向集合当中添加元素，参数的类型和泛型一致。返回值代表添加是否成功。</p><p>备注：对于ArralyList集合来说add动作一定会成功，但是对于其他集合来说add动作不一定成功。</p></li><li><p>public E get(int index):从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素。</p></li><li><p>public E remove(int index)：从集合当中删除元素，参数是索引编号，返回值就是被删除掉的元素。</p></li><li><p>public int size():获取集合的尺寸长度，返回值是集合当中包含的元素个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rosy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rosy03ArrayListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//向集合中添加元素   add 是有返回值的</span></span><br><span class="line">        <span class="keyword">boolean</span> success=list.add(<span class="string">&quot;西瓜&quot;</span>);<span class="comment">//返回值代表添加是否成功</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(success);<span class="comment">//ture</span></span><br><span class="line">        list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;芒果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;火龙果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柚子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;哈密瓜&quot;</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[西瓜, 苹果, 芒果, 火龙果, 柚子, 哈密瓜]</span></span><br><span class="line">        <span class="comment">//从集合中获取元素   get    索引值从0开始</span></span><br><span class="line">        String fruit=list.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二号索引位置：&quot;</span>+fruit);</span><br><span class="line">        <span class="comment">//从集合中删除元素   remove 索引值从0开始</span></span><br><span class="line">        String whoremoved=list.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被删除的元素为：&quot;</span>+whoremoved);<span class="comment">//火龙果</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[西瓜, 苹果, 芒果,  柚子, 哈密瓜]</span></span><br><span class="line">        <span class="comment">//获取集合的长度尺寸，也就是其中元素的个数     size</span></span><br><span class="line">        <span class="keyword">int</span> size=list.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;此时集合的长度为：&quot;</span>+size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>遍历集合</strong></p><p>   ArralyListEach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rosy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RosyArrayListEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt;list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;火龙果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;芒果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;哈密瓜&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;木瓜&quot;</span>);</span><br><span class="line"><span class="comment">//for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强for循环</span></span><br><span class="line">        <span class="keyword">for</span>(String str : list)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ArrayList集合存储基本数据</strong></p><ul><li>如果希望向集合ArrayList中存储基本数据类型，必须使用基本类型对应的“包装类”。</li></ul><p>基本类型                                                   包装类（引用类型，包装类都位于java.lang包下）</p><p>byte                                                            Byte</p><p>short                                                           Short</p><p>int                                                               Integer                   【特殊】</p><p>long                                                            Long</p><p>float                                                            Float</p><p>double                                                        Double</p><p>char                                                            Character               【特殊】</p><p>boolean                                                      Boolean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rosy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RosyArrayListBasic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; listA=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listA.add(<span class="number">3</span>);</span><br><span class="line">        listA.add(<span class="number">8</span>);</span><br><span class="line">        listA.add(<span class="number">7</span>);</span><br><span class="line">        Iterator&lt;Integer&gt;iterator=listA.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==从jdk1.5开始，支持自动装箱拆箱==</p><p><strong>自动装箱</strong></p><p>基本数据类型自动转换为包装类型</p><p><strong>自动拆箱</strong></p><p>包装数据类型自动转换为基本类型</p><p>例一：生成六个1~33之间的随机数，并放在集合中，且遍历集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random=<span class="keyword">new</span> Random();</span><br><span class="line">        ArrayList&lt;Integer&gt;list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r=random.nextInt(<span class="number">33</span>)+<span class="number">1</span>;</span><br><span class="line">            list.add(r);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Integer&gt;iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2LinkedList集合"><a href="#7-2LinkedList集合" class="headerlink" title="7.2LinkedList集合"></a>7.2LinkedList集合</h2><hr><p><strong>java.util.LinkedList</strong>集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><p><strong>java.util.LinkedList</strong>集合 implement List接口</p><p>LinkedList集合的特点：</p><ul><li><p>底层是一个双向链表结构，查询慢，增删快</p></li><li><p>里面包含了大量操作首尾元素的方法</p><p>注意：使用LinkedList集合特有的方法，不能使用多态</p></li></ul><blockquote><p>LinkedList是一个双向链表</p></blockquote><p><img src="https://s2.loli.net/2022/01/11/PQJCovsDIBiUqy4.png"></p><p>实际开发中对一个集合元素的增添和删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法</p><ul><li><code>public void addFirst(E e)====push()压栈</code>：将指定元素插入此列表的开头。</li><li><code>public void addLast(E e)</code>：将指定元素添加到此列表的结尾。</li><li><code>getFirst()       getLast()</code>：返回此列表的第一个元素/返回此列表的最后一个元素</li><li><code>removeFirst()==pop() 弹栈      removeLast()</code>：移除并返回此列表的第一个元素/移除并返回此列表的最后一个元素</li></ul><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list01=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        list01.add(<span class="string">&quot;小华&quot;</span>);</span><br><span class="line">        list01.add(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        想添加【小金】到表头</span></span><br><span class="line"><span class="comment">        使用addFirst();或push();方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        list01.addFirst(&quot;小金&quot;);</span></span><br><span class="line">        list01.push(<span class="string">&quot;小金&quot;</span>);<span class="comment">//进栈</span></span><br><span class="line">        Iterator&lt;String&gt; iterator01=list01.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator01.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator01.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         想添加【小许】到表尾</span></span><br><span class="line"><span class="comment">         使用addLast();方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        list01.addLast(<span class="string">&quot;小许&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator02=list01.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator02.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator02.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           返回列表的第一个和最后一个元素   getFirst();和getLast()方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">        System.out.println(list01.getFirst());</span><br><span class="line">        System.out.println(list01.getLast());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        移除列表的第一个元素</span></span><br><span class="line"><span class="comment">        使用removeFirst();或pop();方法 弹栈</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        list01.removeFirst();</span></span><br><span class="line">        list01.pop();</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        移除列表的最后一个元素</span></span><br><span class="line"><span class="comment">        使用removeLast();方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        list01.removeLast();</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-3Vector集合"><a href="#7-3Vector集合" class="headerlink" title="7.3Vector集合"></a>7.3Vector集合</h2><p>​    <code> Vector</code>  类可以实现可增长的对象数组。与数组一样，它包含可以使用整数索引进行访问的组件。但是，<code>Vector</code>  的大小可以根据需要增大或缩小，以适应创建 <code>Vector</code> 后进行添加或移除项的操作。(了解即可)   单线程，速度慢</p><hr><h1 id="第八章-Set集合"><a href="#第八章-Set集合" class="headerlink" title="第八章 Set集合"></a>第八章 Set集合</h1><p><code>java.util.Set</code>接口和<code>java.util.List</code>接口一样，同样继承自<code>Collection</code>接口，它与<code>Collection</code>接口中的方法基本一致，并没有对<code>Collection</code>接口进行功能上的扩充，只是比<code>Collection</code>接口更加严格了。与<code>List</code>接口不同的是，<code>Set</code>接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。</p><p><code>Set</code>集合有多个子类，我们介绍的是<code>java.util.HashSet</code>和<code>java.util.LinkedHashSet</code>这两个集合</p><blockquote><p>tips：Set集合取出元素的方式可以采用：迭代器、增强for。</p></blockquote><h2 id="8-1HashSet集合"><a href="#8-1HashSet集合" class="headerlink" title="8.1HashSet集合"></a>8.1HashSet集合</h2><hr><p><code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的(即存取顺序不一致)。<code>java.util.HashSet</code>底层其实是一个<code>java.util.HashMap</code>支持。</p><p>HashSet是根据对象的哈希值来确定元素在集合中的存储位置，因此和具有良好的存取和查找性能。保证元素唯一性的方式依赖于：<code>hashCode</code>和<code>equals</code>方法</p><p>特点：</p><ul><li>不允许存储重复的元素</li><li>没有索引，没有带索引的方法，也不能使用普通的for循环遍历</li><li>是一个无序的集合，存储元素和取出元素的顺序有可能不一致</li><li>底层是一个哈希表结构(查询的速度非常的快)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11Set</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">3</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());<span class="comment">//1,2,3</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer a:set) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2哈希表"><a href="#8-2哈希表" class="headerlink" title="8.2哈希表"></a>8.2哈希表</h2><hr><p>HashSet集合存储数据的结构</p><p>在<strong>JDK1.8</strong>之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过Key值依次查找的效率较低。</p><p>在<strong>JDK1.8</strong>中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值(8)时，将链表转换为红黑树，这样大大减少了查询时间。</p><p>哈希值(Hash Code)：是一个十进制的整数，由系统随即给出(就是对象的地址值，是一个逻辑地址，是模拟出来的，不是数据实际存储的物理地址)</p><p>在Object类有一个<code>hashCode();</code>方法，返回该对象的哈希码值。</p><p>源码：public native int hashCode( );       <strong>native</strong>：代表该方法调用的是本地操作系统的方法</p><blockquote><p>tips：toString方法返回的就是哈希值的十六进制值，哈希值和toString返回的值，都不是真正物理意义上的地址值，是模拟的假的地址值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12HashCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        persion p1=<span class="keyword">new</span> persion();</span><br><span class="line">        persion p2=<span class="keyword">new</span> persion();</span><br><span class="line">        <span class="keyword">int</span> code1 = p1.hashCode();</span><br><span class="line">        <span class="keyword">int</span> code2 = p2.hashCode();</span><br><span class="line">        System.out.println(code1);<span class="comment">//重写前：460141958     重写后：1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        System.out.println(code2);<span class="comment">//重写前：1163157884    重写后：1</span></span><br><span class="line">        System.out.println(p1);<span class="comment">//重写前：Demo02.persion@1b6d3586  重写后：Demo02.persion@1</span></span><br><span class="line">        System.out.println(p2);<span class="comment">//重写前：Demo02.persion@4554617c  重写后：Demo02.persion@1</span></span><br><span class="line">        System.out.println(p1==p2);<span class="comment">//false  即真正意义上的地址值不相等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     1b6d3586(十六进制)---&gt;(十进制)460141958</span></span><br><span class="line"><span class="comment">     4554617c(十六进制)---&gt;(十进制)1163157884</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">persion</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    return super.hashCode();源码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//重写hashCode方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：String类里重写了hashCode方法</p></blockquote><p><strong>hashCode</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public int hashCode()</span><br></pre></td></tr></table></figure><p>返回此字符串的哈希码。String 对象的哈希码根据以下公式计算： </p><p> **s[0]<em>31^(n-1) + s[1]<em>31^(n-2) + … + s[n-1]</em></em></p><p> <strong>使用 int 算法</strong>，这里 s[i] 是字符串的第 i 个字符，n 是字符串的长度，^ 表示求幂。（空字符串的哈希值为 0。）</p><hr><p><strong>哈希冲突</strong></p><p>两个元素不同，但是哈希值相同</p><p><img src="https://s2.loli.net/2022/01/11/gkRGWCfBNmIUXvZ.png"></p><p>数组超过8位</p><p>少6变回数组</p><p>解决办法：</p><ul><li>拉链法</li><li>开放寻址</li></ul><h2 id="8-3Set集合存储元素不重复原理"><a href="#8-3Set集合存储元素不重复原理" class="headerlink" title="8.3Set集合存储元素不重复原理"></a>8.3Set集合存储元素不重复原理</h2><hr><p>哈希表中，没有重复元素的原因：集合在调用add方法时，add方法会调用元素的hashCode方法和equals方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo13HashSetSaveString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String s1=<span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        String s2=<span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        set.add(s1);</span><br><span class="line">        set.add(s2);</span><br><span class="line">        set.add(<span class="string">&quot;重地&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;通话&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//[重地, 通话, abc]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/DP92zZ1wRh5vnAg.png"></p><hr><h2 id="8-4HashSet存储自定义类型元素"><a href="#8-4HashSet存储自定义类型元素" class="headerlink" title="8.4HashSet存储自定义类型元素"></a>8.4HashSet存储自定义类型元素</h2><p>给HashSet中存放自定义类型元素时，需要重写对象中的hashCode和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo14HashSetSavePersion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;persions&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        persions p1=<span class="keyword">new</span> persions(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        persions p2=<span class="keyword">new</span> persions(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        persions p3=<span class="keyword">new</span> persions(<span class="string">&quot;小明&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        set.add(p3);</span><br><span class="line">        System.out.println(p1.hashCode());<span class="comment">//hashCode和equals方法重写前：460141958</span></span><br><span class="line">        <span class="comment">//重写后：23458775</span></span><br><span class="line">        System.out.println(p2.hashCode());<span class="comment">//hashCode和equals方法重写前：1163157884</span></span><br><span class="line">        <span class="comment">//重写后：23458775</span></span><br><span class="line">        System.out.println(p1==p2);<span class="comment">//hashCode和equals方法重写前：false</span></span><br><span class="line">        <span class="comment">//重写后：false</span></span><br><span class="line">        System.out.println(p1.equals(p2));<span class="comment">//hashCode和equals方法重写前：false</span></span><br><span class="line">        <span class="comment">//重写后：true</span></span><br><span class="line">        System.out.println(set);<span class="comment">//hashCode和equals方法重写前：[persions&#123;name=&#x27;小明&#x27;, age=24&#125;, persions&#123;name=&#x27;小明&#x27;, age=21&#125;, persions&#123;name=&#x27;小明&#x27;, age=21&#125;]</span></span><br><span class="line">        <span class="comment">//重写后：[persions&#123;name=&#x27;小明&#x27;, age=21&#125;, persions&#123;name=&#x27;小明&#x27;, age=24&#125;]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">persions</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">persions</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        persions persions = (persions) o;</span><br><span class="line">        <span class="keyword">return</span> age == persions.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, persions.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;persions&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-5LinkedHashSet"><a href="#8-5LinkedHashSet" class="headerlink" title="8.5LinkedHashSet"></a>8.5LinkedHashSet</h2><hr><p>我们知道HashSet保证元素唯一，但是元素存进去是没有顺序的，要保证有序如何实现。</p><p>在HashSet下面有一个子类<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构。</p><p>代码演示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo15LinkedHashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set=<span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator=set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  具有可预知迭代顺序的 <code>Set</code> 接口的哈希表和链接列表实现。此实现与 <code>HashSet</code>  的不同之外在于，后者维护着一个运行于所有条目的双重链接列表。此链接列表定义了迭代顺序，即按照将元素插入到 set  中的顺序（<em>插入顺序</em>）进行迭代。注意，插入顺序<em>不</em> 受在 set 中<em>重新插入的</em> 元素的影响。（如果在  <code>s.contains(e)</code> 返回 <code>true</code> 后立即调用 <code>s.add(e)</code>，则元素 <code>e</code>  会被重新插入到 set <code>s</code> 中。） </p><p>  此实现可以让客户免遭未指定的、由HashSet提供的通常杂乱无章的排序工作，而又不致引起与TreeSet关联的成本增加。使用它可以生成一个与原来顺序相同的 set 副本，并且与原 set 的实现无关： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void foo(Set s) &#123;</span><br><span class="line">    Set copy = new LinkedHashSet(s);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果模块通过输入得到一个 set，复制这个  set，然后返回由此副本决定了顺序的结果，这种情况下这项技术特别有用。（客户通常期望内容返回的顺序与它们出现的顺序相同。） </p><p>  此类提供所有可选的 <code>Set</code> 操作，并且允许 null 元素。与 <code>HashSet</code>  一样，它可以为基本操作（<code>add</code>、<code>contains</code> 和  <code>remove</code>）提供稳定的性能，假定哈希函数将元素正确地分布到存储段中。由于增加了维护链接列表的开支，其性能很可能会比  <code>HashSet</code> 稍逊一筹，不过，这一点例外：<code>LinkedHashSet</code> 迭代所需时间与 set 的<em>大小</em>  成正比，而与容量无关。<code>HashSet</code> 迭代很可能支出较大，因为它所需迭代时间与其<em>容量</em> 成正比。 </p><p>  链接的哈希 set 有两个影响其性能的参数：<em>初始容量</em> 和<em>加载因子</em>。它们与 <code>HashSet</code>  中的定义极其相同。注意，为初始容量选择非常高的值对此类的影响比对 <code>HashSet</code> 要小，因为此类的迭代时间不受容量的影响。 </p><p>  <strong>注意，此实现不是同步的。</strong>如果多个线程同时访问链接的哈希 set，而其中至少一个线程修改了该  set，则它<em>必须</em> 保持外部同步。这一般通过对自然封装该 set 的对象进行同步操作来完成。如果不存在这样的对象，则应该使用 Collections.synchronizedSet方法来“包装”该 set。最好在创建时完成这一操作，以防止意外的非同步访问： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set s = Collections.synchronizedSet(new LinkedHashSet(...));</span><br></pre></td></tr></table></figure><p>此类的 <code>iterator</code> 方法返回的迭代器是<em>快速失败</em> 的：在迭代器创建之后，如果对 set  进行修改，除非通过迭代器自身的 <code>remove</code> 方法，其他任何时间任何方式的修改，迭代器都将抛出 ConcurrentModificationException，因此，面对并发的修改，迭代器很快就会完全失败，而不冒将来不确定的时间任意发生不确定行为的风险。 </p><p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在不同步的并发修改时，不可能作出任何强有力的保证。快速失败迭代器尽最大努力抛出  <code>ConcurrentModificationException</code>。因此，编写依赖于此异常的程序的方式是错误的，正确做法是：<em>迭代器的快速失败行为应该仅用于检测程序错误。</em> </p><p>此类是 <a href="../../../technotes/guides/collections/index.html">Java  Collections Framework</a> 的成员。 </p><h2 id="8-6-可变参数"><a href="#8-6-可变参数" class="headerlink" title="8.6 可变参数"></a>8.6 可变参数</h2><hr><blockquote><p>tips：当使用参数类型确定，而个数不确定时，可以使用可变参数</p></blockquote><p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化成如下格式：</p><p><code>修饰符 返回值类型 方法名(参数类型...形参名)&#123;  &#125;</code></p><p>等价于</p><p><code>修饰符 返回值类型 方法名(参数类型[] 形参名)&#123;  &#125;</code></p><p>只是后面这种定义，在调用时必须传递数组，而前者可以直接传递数据即可。</p><p><strong>JDK1.5</strong>以后。出现了简化操作。…用在参数上，称之为可变参数。</p><p>同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组(这就是简单之处)，直接将数组中的元素作为实际参数进行传递，其实编译成的class文件，将这些元素先封装到一个数组中，在进行传递。这些动作都在编译.class文件时，自动完成了。</p><p><strong>原理：</strong>可变参数底层就是一个数组，根据传递参数个数不同，会创建不同长度的数组，来存储这些参数，传递的参数个数，可以是0个(不传递)，1，2. . .多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16VarArgs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int i = add();</span></span><br><span class="line"><span class="comment">//        System.out.println(i);[I @1b6d3586  [代表数组        I代表int类型</span></span><br><span class="line">        <span class="keyword">int</span> s=add(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br><span class="line">        System.out.println(s);<span class="comment">//100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...arr)</span></span>&#123;</span><br><span class="line">        System.out.println(arr.length);<span class="comment">//4</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i:arr) &#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：1.一个方法的参数列表，只能有一个可变参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    public static void method(int...a,String...b)&#123;  会报错</span></span><br><span class="line"><span class="comment">//    </span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String...b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                  2.如果方法的参数有多个，那么可变参数必须写在参数列表的末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    public static void method(int...i,int a,String b,double c)&#123;  会报错</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String b,<span class="keyword">int</span> a,<span class="keyword">double</span> c,<span class="keyword">int</span>...i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第九章-Collections"><a href="#第九章-Collections" class="headerlink" title="第九章 Collections"></a>第九章 Collections</h1><hr><h2 id="9-1常用功能"><a href="#9-1常用功能" class="headerlink" title="9.1常用功能"></a>9.1常用功能</h2><hr><ul><li><code>java.util.Collections</code>是集合工具类，用来对集合进行操作，部分方法如下：</li><li><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c,T... elements)</code>：向集合中添加一些元素。</li><li><code>public static void shuffle(List&lt;?&gt; list)</code>：打乱集合元素的顺序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>：将集合中元素按照默认规则排序</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list,Comparator&lt;? super T&gt;)</code>：将集合中元素按照指定规则排序</li></ul><blockquote><p>tips：sort(List<T> list)使用前提：被排序的集合里的元素，必须实现Comparable，重写接口中的方法comparTo定义排序的规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo17Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        向集合中添加多个元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, e]</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        打乱集合中元素的顺序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        集合中元素按照默认方式排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.sort(list);<span class="comment">//默认是升序</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        集合中元素按照指定方式排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义类型</strong></p><p>Comparable接口的排序顺序：</p><p>自己(this)-参数：升序</p><p>参数-自己(this)：降序</p><p><strong>Comparator和Comparable的区别</strong></p><p>Comparable:自己(this )和别人(参数)比较,自己需要实现comparable接口,重写比较的规则compareTo方法</p><p>Comparator:相当于找—个第三方的裁判,比较两个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo18Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Persion&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Persion(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Persion(<span class="string">&quot;a小李&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Persion(<span class="string">&quot;小张&quot;</span>,<span class="number">29</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Persion(<span class="string">&quot;b小王&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//[Persion&#123;name=&#x27;小明&#x27;, age=21&#125;, Persion&#123;name=&#x27;小李&#x27;, age=22&#125;, Persion&#123;name=&#x27;小张&#x27;, age=29&#125;, Persion&#123;name=&#x27;小王&#x27;, age=19&#125;]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Persion&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Persion o1, Persion o2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                return o1.getAge()-o2.getAge();按年龄升序排序</span></span><br><span class="line"><span class="comment">//                return o2.getAge()-o1.getAge();按年龄降序排序</span></span><br><span class="line">                <span class="keyword">int</span> result=o1.getAge()-o2.getAge();<span class="comment">//按年龄升序排序</span></span><br><span class="line">                <span class="keyword">if</span>(result==<span class="number">0</span>)&#123;</span><br><span class="line">                    result= o1.getName().charAt(<span class="number">0</span>)-o2.getName().charAt(<span class="number">0</span>);<span class="comment">//首字母排序</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Persion</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Persion</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Persion&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写排序规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Persion o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//认为元素都是相同的</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        可以自定义比较方法 比较两人的年龄(this,参数Person)</span></span><br><span class="line"><span class="comment">        return this.getAge()-o.getAge()//按年龄升序排序</span></span><br><span class="line"><span class="comment">        return o.getAge()-this.getAge()//按年龄降序排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十章-Map集合-双列集合"><a href="#第十章-Map集合-双列集合" class="headerlink" title="第十章 Map集合(双列集合)"></a>第十章 Map集合(双列集合)</h1><hr><h2 id="10-1概述"><a href="#10-1概述" class="headerlink" title="10.1概述"></a>10.1概述</h2><p>前几章我们学习的都是单列集合，而Map是双列集合。</p><p>Map&lt;K,V&gt;，K我们称为键(此映射所维护的键的类型)，V我们称为值(映射值的类型)，键是不允许重复的，value可以重复。</p><blockquote><p>tips：Map集合中K和V的关系类似于函数自变量和函数值的关系。</p></blockquote><p>在现实生活中，我们常会看到这样一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一一对应的关系，就叫做映射。Java提供了专门的集合类来存放这种对象关系的对象，即<code>java.util.Map</code>接口。</p><p>对比Collection接口与Map接口的不同：</p><p><img src="https://s2.loli.net/2022/01/11/ERZUXqpTtaWLbJe.png"></p><h2 id="10-2Map常用子类"><a href="#10-2Map常用子类" class="headerlink" title="10.2Map常用子类"></a>10.2Map常用子类</h2><hr><ul><li><p><strong>HashMap</strong>&lt;K,V&gt;：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p><p><code>java.util.HashMap&lt;K,V&gt;集合 implements Map&lt;K,V&gt;接口</code></p><p>特点：1. HashMap集合底层是哈希表：查询速度特别快</p><p>​                       JDK1.8之前：数组+单向链表</p><p>​                       JDK1.8之后：数组+单向链表/红黑树(当链表长度超过8)：提高查询的速度</p><p>​           2.HashMap集合是一个无序的集合，存储元素和取出元素的顺序有可能不一致</p></li><li><p><strong>LinkedHashMap</strong>&lt;K,V&gt;：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p><p><code>java.util.LinkedHashMap&lt;K,V&gt;集合 extends HashMap&lt;K,V&gt;集合</code></p><p>特点：1. LinkedHashMap集合底层是哈希表+链表(保证迭代的顺序)</p><p>​           2.LinkedHashMap集合是一个有序的集合，存储元素和取出元素的顺序是一致的</p></li></ul><blockquote><p>tips：Map接口中的集合都有两个泛型变量&lt;K,V&gt;，在使用时，要为两个泛型变量赋予数据类型。两个泛型变量&lt;K,V&gt;的数据类型可以相同，也可以不同。</p></blockquote><h2 id="10-3Map接口中的常用方法"><a href="#10-3Map接口中的常用方法" class="headerlink" title="10.3Map接口中的常用方法"></a>10.3Map接口中的常用方法</h2><hr><ul><li><p><code>public V put(k Key,V value)</code>：把指定的键与指定的值添加到Map集合中</p><p>返回值：V</p><p>​      存储时，Key不重复，返回值V时null</p><p>​      存储时，Key重复，会使用新的value替换Map中重复的value，返回被替换的value值</p></li><li><p><code>public V remove(Object key)</code>：把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</p><p>返回值：V</p><p>​      Key存在，V返回被删除的值</p><p>​      Key不存在，V返回null</p></li><li><p><code>public V get(Object Key)</code>：根据指定的键，在Map集合中获取对应的值。</p><p>返回值：V</p><p>​       Key存在，V返回该K对应的值</p><p>​       Key不存在，V返回null</p></li><li><p><code>boolean containsKey(Object Key)</code>：判断集合中是否包含指定的键。</p><p>​       Key存在，返回true</p><p>​       Key不存在，返回false</p></li><li><p><code>public Set&lt;K&gt; KeySet()</code>：获取Map集合中所有的键，存储到Set集合中。</p></li><li><p><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>：获取到Map集合中所有的键值对对象的集合(Set集合)。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      show01();</span></span><br><span class="line"><span class="comment">//      show02();</span></span><br><span class="line">        show03();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()：获取到Map集合中所有的键值对对象的集合(Set集合)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,Integer&gt; map03= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map03.put(<span class="string">&quot;小明&quot;</span>,<span class="number">176</span>);</span><br><span class="line">        map03.put(<span class="string">&quot;小华&quot;</span>,<span class="number">178</span>);</span><br><span class="line">        map03.put(<span class="string">&quot;小金&quot;</span>,<span class="number">169</span>);</span><br><span class="line">        map03.put(<span class="string">&quot;小林&quot;</span>,<span class="number">183</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        boolean containsKey(Object Key)：判断集合中是否包含指定的键。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = map03.containsKey(<span class="string">&quot;小金&quot;</span>);</span><br><span class="line">        System.out.println(b1);<span class="comment">//true</span></span><br><span class="line">        <span class="keyword">boolean</span> b2 = map03.containsKey(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        System.out.println(b2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(map03);<span class="comment">//&#123;小林=183, 小明=176, 小华=178, 小金=169&#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map03.entrySet();</span><br><span class="line">        System.out.println(set);<span class="comment">//[小林=183, 小明=176, 小华=178, 小金=169]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public V remove(Object key)：把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,Integer&gt; map02= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map02.put(<span class="string">&quot;小明&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map02.put(<span class="string">&quot;小华&quot;</span>,<span class="number">97</span>);</span><br><span class="line">        map02.put(<span class="string">&quot;小金&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map02.put(<span class="string">&quot;小林&quot;</span>,<span class="number">99</span>);</span><br><span class="line">        System.out.println(map02);</span><br><span class="line">        Integer a1 = map02.remove(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        System.out.println(a1);<span class="comment">//null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        Integer a2 = map02.remove(<span class="string">&quot;小金&quot;</span>);</span><br><span class="line">        System.out.println(a2);<span class="comment">//87</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public V get(Object Key)：根据指定的键，在Map集合中获取对应的值。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Integer a3 = map02.get(<span class="string">&quot;小林&quot;</span>);</span><br><span class="line">        System.out.println(a3);<span class="comment">//99</span></span><br><span class="line">        Integer a4 = map02.get(<span class="string">&quot;小琳&quot;</span>);</span><br><span class="line">        System.out.println(a4);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public V put(k Key,V value)：把指定的键与指定的值添加到Map集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map01= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String s1 = map01.put(<span class="string">&quot;计算机&quot;</span>, <span class="string">&quot;鼠标&quot;</span>);</span><br><span class="line">        System.out.println(s1);<span class="comment">//null</span></span><br><span class="line">        String s2 = map01.put(<span class="string">&quot;计算机&quot;</span>, <span class="string">&quot;键盘&quot;</span>);</span><br><span class="line">        System.out.println(s2);<span class="comment">//鼠标   返回的是被替换的值</span></span><br><span class="line">        map01.put(<span class="string">&quot;硬件&quot;</span>,<span class="string">&quot;软件&quot;</span>);</span><br><span class="line">        map01.put(<span class="string">&quot;java&quot;</span>,<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        map01.put(<span class="string">&quot;C&quot;</span>,<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        System.out.println(map01);<span class="comment">//&#123;java=C++, C=C++, 硬件=软件, 计算机=键盘&#125;</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public Set&lt;K&gt; KeySet()：获取Map集合中所有的键，存储到Set集合中。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; set = map01.keySet();</span><br><span class="line">        System.out.println(set);<span class="comment">//[java, C, 硬件, 计算机]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-4-Map集合遍历键找值方式"><a href="#10-4-Map集合遍历键找值方式" class="headerlink" title="10.4 Map集合遍历键找值方式"></a>10.4 Map集合遍历键找值方式</h2><hr><p>键找值方式：即通过元素中的键，获取键所在的值</p><p>分析步骤：</p><p>1.获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示<code>KeySet()</code></p><p>2.遍历键的Set集合，得到每一个键</p><p>3.根据键，获取键所对应的值。方法提示<code>get(K key)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02KeySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       show01();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;小明&quot;</span>, <span class="number">176</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小华&quot;</span>, <span class="number">178</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小金&quot;</span>, <span class="number">169</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小林&quot;</span>, <span class="number">183</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public Set&lt;K&gt; KeySet()：获取Map集合中所有的键，存储到Set集合中。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        System.out.println(set);<span class="comment">//[小林, 小明, 小华, 小金]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">       迭代器遍历集合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Iterator&lt;String&gt; iterator=set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            增强for</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (String Key:set) &#123;</span><br><span class="line">                Integer integer01 = map.get(Key);<span class="comment">//通过Key找Value</span></span><br><span class="line">                System.out.println(integer01);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String Key:map.keySet()) &#123;</span><br><span class="line">                Integer integer02 = map.get(Key);<span class="comment">//通过Key找Value</span></span><br><span class="line">                System.out.println(integer02);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-5Entry键值对对象"><a href="#10-5Entry键值对对象" class="headerlink" title="10.5Entry键值对对象"></a>10.5Entry键值对对象</h2><hr><p>Map中存放的是两种对象，一种称为<strong>Key</strong>(键)，一种称为<strong>value</strong>(值)，它们在Map中是一一对应关系，这一对对象又称做Map中的一个Entry(项)。Entry将键值对的对应关系封装成了对象。即键值对对象，这样我们在遍历Map集合时，就可以从每一个键值对(Entry)对象中获取对应的键和对应的值。</p><p>获取对应的键和对应的值的方法：</p><ul><li><code>public K getKey( )</code>：获取Entry对象中的键。</li><li><code>public V getValue( )</code>：获取Entry对象中的值。</li></ul><p>获取所有Entry对象的方法：</p><ul><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>：获取到Map集合中所有的键值对对象的集合(Set集合)</li></ul><h2 id="10-6Map集合遍历键值对方式"><a href="#10-6Map集合遍历键值对方式" class="headerlink" title="10.6Map集合遍历键值对方式"></a>10.6Map集合遍历键值对方式</h2><hr><p>步骤：</p><p>1.使用Map集合中的方法entrySet()，把Map集合中多个Entry对象取出来，存储到一个Set集合中</p><p>2.遍历Set集合，获取每一个Entry对象</p><p>3.使用Entry对象中的方法getKey()和getValue()获取键与值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03EntrySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;小明&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小华&quot;</span>,<span class="number">97</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小金&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小林&quot;</span>,<span class="number">99</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        System.out.println(set);<span class="comment">//[小林=99, 小明=87, 小华=97, 小金=87]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------&quot;</span>);</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,Integer&gt;&gt; iterator=set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String,Integer&gt; entry01=iterator.next();</span><br><span class="line">            String key01 = entry01.getKey();</span><br><span class="line">            Integer value01 = entry01.getValue();</span><br><span class="line">            System.out.println(key01+<span class="string">&quot;=&quot;</span>+value01);</span><br><span class="line"><span class="comment">//            小林=99</span></span><br><span class="line"><span class="comment">//            小明=87</span></span><br><span class="line"><span class="comment">//            小华=97</span></span><br><span class="line"><span class="comment">//            小金=87</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            通过增强for</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String,Integer&gt; entry02:set) &#123;</span><br><span class="line">                String key02 = entry02.getKey();</span><br><span class="line">                Integer value02 = entry02.getValue();</span><br><span class="line">                System.out.println(key02+<span class="string">&quot;=&quot;</span>+value02);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-7HashMap存储自定义类型键值"><a href="#10-7HashMap存储自定义类型键值" class="headerlink" title="10.7HashMap存储自定义类型键值"></a>10.7HashMap存储自定义类型键值</h2><hr><p>练习：每位学生(姓名，年龄)都有自己的家庭地址。那么，既然有对应关系，则将学生对象和家庭住址存储到Map集合中。学生作为键，家庭住址作为值。</p><blockquote><p>tips：学生姓名相同并且年龄相同视为同一名学生</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.tree.analysis.Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04HashMapSavePerson</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      show01();</span></span><br><span class="line">        show02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;Student,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>),<span class="number">178</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小李&quot;</span>,<span class="number">19</span>),<span class="number">175</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小林&quot;</span>,<span class="number">20</span>),<span class="number">179</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小金&quot;</span>,<span class="number">18</span>),<span class="number">183</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小笠&quot;</span>,<span class="number">18</span>),<span class="number">178</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小笠&quot;</span>,<span class="number">18</span>),<span class="number">178</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;Student, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Student,Integer&gt; a:set) &#123;</span><br><span class="line">            Integer value = a.getValue();</span><br><span class="line">            Student key = a.getKey();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;----&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">   key : string类型</span></span><br><span class="line"><span class="comment">         string类重写hashcode方法和equals方法,可以保证key唯一</span></span><br><span class="line"><span class="comment">   value : Person类型</span></span><br><span class="line"><span class="comment">    value可以重复(同名同年龄的人视为同一个)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,Student&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;北京&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">&quot;上海&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小李&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        map.put(<span class="string">&quot;北票&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小林&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        map.put(<span class="string">&quot;沈阳&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小金&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">&quot;哈尔滨&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小笠&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">&quot;哈尔滨&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小笠&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String Key: set) &#123;</span><br><span class="line">            Student value=map.get(Key);</span><br><span class="line">            System.out.println(Key+<span class="string">&quot;---&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-7LinkedHashMap"><a href="#10-7LinkedHashMap" class="headerlink" title="10.7LinkedHashMap"></a>10.7LinkedHashMap</h2><hr><p>HashMap保证元素唯一，并且查询速度很快，可是我们要保证元素有序，还要速度快，就要了解LinkedHashMap，它是HashMap下面有一个子类，它是链表和哈希表组合的一个数据存储结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05LinkedHashMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinkedHashMap&lt;String,Integer&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小李&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小林&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry:set) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;---&gt;&quot;</span>+value);</span><br><span class="line"><span class="comment">//            小明---&gt;18</span></span><br><span class="line"><span class="comment">//            小李---&gt;20</span></span><br><span class="line"><span class="comment">//            小林---&gt;18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-8Hashtable集合"><a href="#10-8Hashtable集合" class="headerlink" title="10.8Hashtable集合"></a>10.8Hashtable集合</h2><hr><p>Hashtable&lt;k,v&gt; implements Map&lt;K,V&gt;   双列集合(<strong>JDK1.0</strong>)比较早</p><p>此类实现了一个哈希表，该哈希表将键映射到相应的值。任何非null对象都可以用做键或值。Hashtable是同步的(单线程)：速度慢</p><ul><li><p>HashtabLe:底层也是一个哈希表,是一个线程安全的集合,是单线程集合,速度慢，不能存储null值, null键</p></li><li><p>HashMap:底层是一个哈希表,是一个线程不安全的集合,是多线程的集合,速度快，可以存储null值, null键</p></li></ul><p>Hashtable和vector集合一样,在jdk1.2版本之后被更先进的集合(HashMap , ArrdyList)取代了</p><p>HashtabLe的子类Properties依然活跃在历史舞台          <strong>Properties集合是一个唯—和I0流相结合的集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Hashtable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      show02();</span></span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;null=null, a=null&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Hashtable&lt;String,String&gt; hashtable=<span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="keyword">null</span>,<span class="string">&quot;a&quot;</span>);<span class="comment">//NullPointerException</span></span><br><span class="line">        hashtable.put(<span class="string">&quot;a&quot;</span>,<span class="keyword">null</span>);<span class="comment">//NullPointerException</span></span><br><span class="line">        hashtable.put(<span class="keyword">null</span>,<span class="keyword">null</span>);<span class="comment">//NullPointerException</span></span><br><span class="line">        System.out.println(hashtable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-9Map集合练习"><a href="#10-9Map集合练习" class="headerlink" title="10.9Map集合练习"></a>10.9Map集合练习</h2><hr><p><strong>需求：</strong></p><p>计算一个字符串中每个字符出现次数</p><p><strong>分析</strong></p><p>​    1.获取一个字符串对象</p><p>​    2.创建一个Map集合，键代表字符，值代表次序</p><p>​    3.遍历字符串得到每个字符</p><p>​    4.判断Map中是否有该键</p><p>​    5.如果没有，第一次出现，存储次数为1；如果有，则说明已经出现过，获取到对应的值进行++，再次存储</p><p>​    6.打印最终结果</p><p>分析:</p><p>1.使用scanner获取用户输入的字符串</p><p>2.创建Map集合,key是字符串中的字符, value是字符的个数</p><p>3.遍历字符串,获取每一个字符</p><p>4.使用获取到的字符,去Nap集合判断key是否存在</p><p>key存在:  通过字符(key) ,获取value(字符个数)value++     put( key , value)把新的vatue存储到Map集合中</p><p>key不存在:  put( key ,1)</p><p>5.遍历Map集合,输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner in=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">        String s=in.next();</span><br><span class="line">        HashMap&lt;Character,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c:s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(c))&#123;</span><br><span class="line">                Integer value = map.get(c);</span><br><span class="line">                value++;</span><br><span class="line">                map.put(c,value);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Character Key:map.keySet()) &#123;</span><br><span class="line">            Integer value = map.get(Key);</span><br><span class="line">            System.out.println(Key+<span class="string">&quot;---&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-10JDK9对集合添加的优化"><a href="#10-10JDK9对集合添加的优化" class="headerlink" title="10.10JDK9对集合添加的优化"></a>10.10JDK9对集合添加的优化</h2><hr><p>添加元素时，List和Set集合使用add方法，Map集合使用put方法</p><p>在<strong>JDK9</strong>时，新的List、Set、Map的静态工厂方法可以更方便地创建集合的不可变实例。</p><p><strong>of方法</strong>(了解即可)</p><hr><h1 id="附加：Debug追踪"><a href="#附加：Debug追踪" class="headerlink" title="附加：Debug追踪"></a>附加：Debug追踪</h1><hr><p><strong>Debug调试程序：</strong></p><p>​        可以让代码逐行执行，查看代码执行的过程，调试程序中出现的bug。</p><p><strong>使用方式：</strong></p><p>​        在行号的右边，鼠标左键单击，添加断点(每个方法的第一行，哪里有bug添加到哪里)</p><p>​        右键，选择Debug执行程序</p><p>​        程序就会停留在添加的第一个断点处</p><p><strong>执行程序：</strong></p><p>​         f8：逐行执行程序</p><p>​         f7：进入到方法中</p><p>​         shift+f8：跳出方法</p><p>​         f9：跳到下一个断点，如果没有下一个断点，那么就借书程序</p><p>​         ctrl+f2：退出debug模式，停止程序</p><p>​         Console：切换到控制台</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;第一章-Collection集合-单列集合&quot;&gt;&lt;a href=&quot;#第一章-Collection集合-单列集合&quot; class=&quot;headerlink&quot; title=&quot;第一章 Collection集合(单列集合)&quot;&gt;&lt;/a&gt;第一章 Collection集合(</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>留言功能上线~</title>
    <link href="https://www.stq555.com/2022/01/10/%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD%E4%B8%8A%E7%BA%BF/"/>
    <id>https://www.stq555.com/2022/01/10/%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD%E4%B8%8A%E7%BA%BF/</id>
    <published>2022-01-09T17:05:15.000Z</published>
    <updated>2022-01-09T17:07:49.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Valine留言功能上线"><a href="#Valine留言功能上线" class="headerlink" title="Valine留言功能上线~"></a>Valine留言功能上线~</h2><p>欢迎大家来评论</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Valine留言功能上线&quot;&gt;&lt;a href=&quot;#Valine留言功能上线&quot; class=&quot;headerlink&quot; title=&quot;Valine留言功能上线~&quot;&gt;&lt;/a&gt;Valine留言功能上线~&lt;/h2&gt;&lt;p&gt;欢迎大家来评论&lt;/p&gt;
</summary>
      
    
    
    
    <category term="First" scheme="https://www.stq555.com/categories/First/"/>
    
    
    <category term="留言" scheme="https://www.stq555.com/tags/%E7%95%99%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>README</title>
    <link href="https://www.stq555.com/2022/01/08/README/"/>
    <id>https://www.stq555.com/2022/01/08/README/</id>
    <published>2022-01-08T14:05:55.000Z</published>
    <updated>2022-01-09T17:42:34.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="README"><a href="#README" class="headerlink" title="README"></a>README</h1><p>说明：因为假期的原因，想试着搭一个属于自己的博客，会在这里发一些每天学习的知识，或是遇到的有意思的事，希望可以和大家相互交流，一起进步。</p><p>博客仅用于学习和交流。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;README&quot;&gt;&lt;a href=&quot;#README&quot; class=&quot;headerlink&quot; title=&quot;README&quot;&gt;&lt;/a&gt;README&lt;/h1&gt;&lt;p&gt;说明：因为假期的原因，想试着搭一个属于自己的博客，会在这里发一些每天学习的知识，或是遇到的有意思的事，希望可</summary>
      
    
    
    
    <category term="First" scheme="https://www.stq555.com/categories/First/"/>
    
    
    <category term="The One Day" scheme="https://www.stq555.com/tags/The-One-Day/"/>
    
  </entry>
  
</feed>
