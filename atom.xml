<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShanTianQi&#39;s Blog</title>
  
  
  <link href="https://www.stq555.com/atom.xml" rel="self"/>
  
  <link href="https://www.stq555.com/"/>
  <updated>2022-01-12T09:34:57.279Z</updated>
  <id>https://www.stq555.com/</id>
  
  <author>
    <name>ShanTianQi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Junit、反射、注解、枚举类</title>
    <link href="https://www.stq555.com/2022/01/12/Junit%E3%80%81%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    <id>https://www.stq555.com/2022/01/12/Junit%E3%80%81%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E6%9E%9A%E4%B8%BE%E7%B1%BB/</id>
    <published>2022-01-12T09:26:20.000Z</published>
    <updated>2022-01-12T09:34:57.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Junit单元测试"><a href="#第一章-Junit单元测试" class="headerlink" title="第一章    Junit单元测试"></a>第一章    Junit单元测试</h1><hr><h2 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h2><ul><li>测试分类：</li></ul><p>1.黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</p><p>2.白盒测试：需要写代码。关注程序具体的执行流程。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820172911.png" alt="QQ截图20210820172911"></p><hr><h2 id="1-2使用步骤"><a href="#1-2使用步骤" class="headerlink" title="1.2使用步骤"></a>1.2使用步骤</h2><p><strong>Junit(白盒测试)</strong></p><p><strong>步骤：</strong></p><p>1.定义一个测试类(测试用例)</p><p>建议：测试类名：被测试的类名Test</p><p>​           包名：xxx.xxx.xx.test</p><p>2.定义测试方法：可以独立运行</p><p>建议：方法名：test+测试的方法名</p><p>​           返回值：void</p><p>​           参数列表：空参</p><p>3.给方法加@Test</p><p>4.导入junit依赖环境</p><p><strong>判定结果：</strong></p><ul><li><p>红色：失败</p></li><li><p>绿色：成功</p></li></ul><p>一般我们会使用断言操作来处理结果</p><ul><li>Assert.assertEquals(期望的结果,运算的结果);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01Junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Junit</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.priv.demo01Junit.Demo01Junit;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01JunitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试add方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Demo01Junit d =<span class="keyword">new</span> Demo01Junit();</span><br><span class="line">        <span class="keyword">int</span> i = d.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Demo01Junit d =<span class="keyword">new</span> Demo01Junit();</span><br><span class="line">        <span class="keyword">int</span> i = d.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        Assert.assertEquals(-<span class="number">1</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-Before-amp-After"><a href="#1-3-Before-amp-After" class="headerlink" title="1.3@Before&amp;@After"></a>1.3@Before&amp;@After</h2><p>1.@Before：</p><ul><li>修饰的方法会在测试方法之前被自动执行</li></ul><p>2.@After：</p><ul><li>修饰的方法会在测试方法之后被自动执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化方法：</span></span><br><span class="line"><span class="comment"> *   用于资源申请，所有测试方法在执行之前都会执行该方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源方法：</span></span><br><span class="line"><span class="comment"> *   在所有测试方法执行完后，都会自动执行该方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;close...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第二章-反射"><a href="#第二章-反射" class="headerlink" title="第二章    反射"></a>第二章    反射</h1><hr><h2 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h2><p><strong>反射：框架设计的灵魂</strong></p><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</p><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820192313.png" alt="QQ截图20210820192313"></p><p>好处：</p><ul><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ul><hr><h2 id="2-2获取Class对象的方式"><a href="#2-2获取Class对象的方式" class="headerlink" title="2.2获取Class对象的方式"></a>2.2获取Class对象的方式</h2><p>1.Class.forName(“全类名”)：将字节码文件加载进内存，返回Class文件。</p><ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul><p>2.类名.class：通过类名的属性class获取。</p><ul><li>多用于参数的传递</li></ul><p>3.对象.getClass()：getClass()方法在Object类中定义着。</p><ul><li>多用于对象的获取字节码的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.Class.forName(&quot;全类名&quot;)：将字节码文件加载进内存，返回Class文件。</span></span><br><span class="line">        Class cls1 = Class.forName(<span class="string">&quot;com.priv.demo02Reflect.Person&quot;</span>);</span><br><span class="line">        System.out.println(cls1);<span class="comment">//class com.priv.demo02Reflect.Person</span></span><br><span class="line">        <span class="comment">//2.类名.class：通过类名的属性class获取。</span></span><br><span class="line">        Class cls2 = Person.class;</span><br><span class="line">        System.out.println(cls2);<span class="comment">//class com.priv.demo02Reflect.Person</span></span><br><span class="line">        <span class="comment">//3.对象.getClass()：getClass()方法在Object类中定义着。</span></span><br><span class="line">        Person person =<span class="keyword">new</span> Person();</span><br><span class="line">        Class cls3 = person.getClass();</span><br><span class="line">        System.out.println(cls3);<span class="comment">//class com.priv.demo02Reflect.Person</span></span><br><span class="line"></span><br><span class="line">        System.out.println(cls1==cls2);<span class="comment">//比较地址值是否相同  true</span></span><br><span class="line">        System.out.println(cls1==cls3);<span class="comment">//true</span></span><br><span class="line">        System.out.println(cls3==cls2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>同一字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li></ul><hr><h2 id="2-3Class对象功能"><a href="#2-3Class对象功能" class="headerlink" title="2.3Class对象功能"></a>2.3Class对象功能</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>1.获取功能：</strong></p><ul><li>获取成员变量们</li><li>获取构造方法们</li><li>获取成员方法们</li><li>获取类名</li></ul><h3 id="获取Field-成员变量"><a href="#获取Field-成员变量" class="headerlink" title="获取Field(成员变量)"></a>获取Field(成员变量)</h3><ul><li><p><code>Field[] getFields()：</code>返回一个包含某些 <code>Field</code> 对象的数组，这些对象反映此 <code>Class</code>  对象所表示的类或接口的所有可访问公共字段。**(获取所有public修饰的成员变量)**</p></li><li><p><code>Field[] getField(String name)：</code>返回一个 <code>Field</code> 对象，它反映此 <code>Class</code> 对象所表示的类或接口的指定公共成员字段。</p></li><li><p><code>Field[] getDeclaredFields()：</code>返回 <code>Field</code> 对象的一个数组，这些对象反映此 <code>Class</code> 对象所表示的类或接口所声明的所有字段。**(获取所有的成员变量，不考虑修饰符)**</p></li><li><p><code>Field[] getDeclaredField(String name)：</code>返回一个 <code>Field</code> 对象，该对象反映此 <code>Class</code> 对象所表示的类或接口的指定已声明字段。</p></li></ul><p><code>Field</code>：成员变量</p><p>操作：</p><p>1.设置值</p><ul><li><code>void set(Object obj,Object value)</code></li></ul><p>2.获取值</p><ul><li><code>get(Object obj)</code></li></ul><p>3.忽略访问权限修饰符的安全检查</p><ul><li>对象名.setAccessible(true)：暴力反射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">//`Field[] getFields()：`返回一个包含某些 `Field` 对象的数组，**(获取所有public修饰的成员变量)**</span></span><br><span class="line">        Field[] fields = personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field:fields) &#123;</span><br><span class="line">            System.out.println(field);<span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.sex</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`Field[] getField(String name)：`返回一个 `Field` 对象，</span></span><br><span class="line">        Field sex = personClass.getField(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        <span class="comment">//获取成员变量sex的值</span></span><br><span class="line">        Person p =<span class="keyword">new</span> Person();</span><br><span class="line">        Object value = sex.get(p);</span><br><span class="line">        System.out.println(value);<span class="comment">//没有初始值的String类型数据默认值为null</span></span><br><span class="line">        <span class="comment">//设置成员变量sex的值</span></span><br><span class="line">        sex.set(p,<span class="string">&quot;man&quot;</span>);</span><br><span class="line">        System.out.println(p);<span class="comment">//Person&#123;name=&#x27;null&#x27;, age=0, sex=&#x27;man&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`Field[] getDeclaredFields()：返回 `Field` 对象的一个数组，**(获取所有的成员变量，不考虑修饰符)**</span></span><br><span class="line">        Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field: declaredFields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">            <span class="comment">//private java.lang.String com.priv.demo02Reflect.Person.name</span></span><br><span class="line">            <span class="comment">//private int com.priv.demo02Reflect.Person.age</span></span><br><span class="line">            <span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.sex</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`Field[] getDeclaredField(String name)：`返回一个 `Field` 对象</span></span><br><span class="line">        Field name = personClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">///忽略访问权限修饰符的安全检查</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        Object value1 = name.get(p);</span><br><span class="line">        System.out.println(value1);<span class="comment">//如果直接打印私有成员变量的值会报错IllegalAccessException</span></span><br><span class="line">        <span class="comment">//null</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取Constructor-构造方法"><a href="#获取Constructor-构造方法" class="headerlink" title="获取Constructor(构造方法)"></a>获取Constructor(构造方法)</h3><ul><li><code>Constructor&lt;?&gt;[] getConstructors()：</code>返回一个包含某些 <code>Constructor</code> 对象的数组，这些对象反映此 <code>Class</code>  对象所表示的类的所有公共构造方法。**(获取所有public修饰的构造方法)**</li><li><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)：</code>返回一个 <code>Constructor</code> 对象，它反映此 <code>Class</code> 对象所表示的类的指定公共构造方法。</li><li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)：</code>返回一个 <code>Constructor</code> 对象，该对象反映此 <code>Class</code> 对象所表示的类或接口的指定构造方法。</li><li><code>Constructor&lt;?&gt; getDeclaredConstructors()：</code>返回 <code>Constructor</code> 对象的一个数组，这些对象反映此 <code>Class</code> 对象表示的类声明的所有构造方法。**(获取所有的构造方法，不考虑修饰符)**</li></ul><p><code>Constructor</code>：构造方法</p><p>创建对象：</p><ul><li><code>T newInstance(Object... initargs)</code></li><li>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</li><li>忽略访问权限修饰符的安全检查，对象名.setAccessible(true)：暴力反射</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03ReflectConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">//`Constructor&lt;?&gt;[] getConstructors()：`返回一个包含某些 `Constructor` 对象的数组</span></span><br><span class="line">        Constructor[] constructors = personClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor:constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">            <span class="comment">//public com.priv.demo02Reflect.Person()</span></span><br><span class="line">            <span class="comment">//public com.priv.demo02Reflect.Person(java.lang.String,int,java.lang.String)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)：`返回一个 `Constructor` 对象</span></span><br><span class="line">        <span class="comment">//满参</span></span><br><span class="line">        Constructor constructor = personClass.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">        System.out.println(constructor);<span class="comment">//public com.priv.demo02Reflect.Person(java.lang.String,int,java.lang.String)</span></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object person = constructor.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">24</span>, <span class="string">&quot;man&quot;</span>);</span><br><span class="line">        System.out.println(person);<span class="comment">//Person&#123;name=&#x27;张三&#x27;, age=24, sex=&#x27;man&#x27;&#125;</span></span><br><span class="line">        <span class="comment">//空参</span></span><br><span class="line">        Constructor constructor1 = personClass.getConstructor();</span><br><span class="line">        System.out.println(constructor1);<span class="comment">//public com.priv.demo02Reflect.Person()</span></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object person1 = constructor1.newInstance();</span><br><span class="line">        System.out.println(person1);<span class="comment">//Person&#123;name=&#x27;null&#x27;, age=0, sex=&#x27;null&#x27;&#125;</span></span><br><span class="line">        <span class="comment">//相当于Object o = personClass.newInstance();</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取Method-成员方法"><a href="#获取Method-成员方法" class="headerlink" title="获取Method(成员方法)"></a>获取Method(成员方法)</h3><ul><li><code>Method[] getMethods()：</code>返回一个包含某些 <code>Method</code> 对象的数组，这些对象反映此 <code>Class</code>  对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 <em>member</em> 方法。**(获取所有public修饰的成员方法)**</li><li><code>Method[] getMethod(String name,类&lt;?&gt;... parameterTypes)：</code>返回一个 <code>Method</code> 对象，它反映此 <code>Class</code> 对象所表示的类或接口的指定公共成员方法。</li><li><code>Method[] getDeclaredMethods()：</code>返回 <code>Method</code> 对象的一个数组，这些对象反映此 <code>Class</code>  对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。**(获取所有的成员方法，不考虑修饰符)**</li><li><code>Method[] getDeclaredMethod(String name,类&lt;?&gt;... parameterTypes)：</code>返回一个 <code>Method</code> 对象，该对象反映此 <code>Class</code> 对象所表示的类或接口的指定已声明方法。</li></ul><p>Method：方法对象</p><ul><li>执行方法：<code>Object invoke(Object obj,Object... args)</code></li><li>获取方法名称：<code>String getName</code>：获取方法名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04ReflectMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">        <span class="comment">//`Method[] getMethods()：`返回一个包含某些 `Method` 对象的数组</span></span><br><span class="line">        Method[] methods = personClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method:methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">            String name = method.getName();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.toString()</span></span><br><span class="line">            <span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.getName()</span></span><br><span class="line">            <span class="comment">//public void com.priv.demo02Reflect.Person.setName(java.lang.String)</span></span><br><span class="line">            <span class="comment">//public void com.priv.demo02Reflect.Person.setAge(int)</span></span><br><span class="line">            <span class="comment">//public java.lang.String com.priv.demo02Reflect.Person.getSex()</span></span><br><span class="line">            <span class="comment">//public void com.priv.demo02Reflect.Person.setSex(java.lang.String)</span></span><br><span class="line">            <span class="comment">//public int com.priv.demo02Reflect.Person.getAge()</span></span><br><span class="line">            <span class="comment">//public final void java.lang.Object.wait() throws java.lang.InterruptedException</span></span><br><span class="line">            <span class="comment">//public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span></span><br><span class="line">            <span class="comment">//public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span></span><br><span class="line">            <span class="comment">//public boolean java.lang.Object.equals(java.lang.Object)</span></span><br><span class="line">            <span class="comment">//public native int java.lang.Object.hashCode()</span></span><br><span class="line">            <span class="comment">//public final native java.lang.Class java.lang.Object.getClass()</span></span><br><span class="line">            <span class="comment">//public final native void java.lang.Object.notify()</span></span><br><span class="line">            <span class="comment">//public final native void java.lang.Object.notifyAll()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//`Method[] getMethod(String name,类&lt;?&gt;... parameterTypes)：`返回一个 `Method` 对象</span></span><br><span class="line">            Method eat = personClass.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">            System.out.println(eat);<span class="comment">//public void com.priv.demo02Reflect.Person.eat()</span></span><br><span class="line">            Person p =<span class="keyword">new</span> Person();</span><br><span class="line">            <span class="comment">//执行方法</span></span><br><span class="line">            eat.invoke(p);</span><br><span class="line"></span><br><span class="line">            Method eat1 = personClass.getMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">            eat1.invoke(p,<span class="string">&quot;饭&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="获取类名"><a href="#获取类名" class="headerlink" title="获取类名"></a>获取类名</h3><ul><li><code>String getName()：</code>以 <code>String</code> 的形式返回此 <code>Class</code> 对象所表示的实体（类、接口、数组类、基本类型或 void）名称。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05ReflectClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        String name = personClass.getName();</span><br><span class="line">        System.out.println(name);<span class="comment">//com.priv.demo02Reflect.Person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4案例"><a href="#2-4案例" class="headerlink" title="2.4案例"></a>2.4案例</h2><p>需求：写一个”框架”，不能改变该类任何代码的前提下，可以帮助我们创建任意类的对象，并且执行其中任意方法。</p><p><strong>1.实现：</strong></p><ul><li><p>配置对象</p></li><li><p>反射</p></li></ul><p><strong>2.步骤：</strong></p><ul><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">className=com.priv.demo02Reflect.Person</span><br><span class="line">methodName=eat</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//在程序中加载读取配置文件</span></span><br><span class="line">        Properties properties =<span class="keyword">new</span> Properties();</span><br><span class="line">        ClassLoader classLoader = Demo06ReflectTest.class.getClassLoader();</span><br><span class="line">        InputStream resourceAsStream = classLoader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line">        properties.load(resourceAsStream);</span><br><span class="line">        <span class="comment">//获取配置文件中的数据</span></span><br><span class="line">        String className = properties.getProperty(<span class="string">&quot;className&quot;</span>);<span class="comment">//获取全类名</span></span><br><span class="line">        String methodName = properties.getProperty(<span class="string">&quot;methodName&quot;</span>);<span class="comment">//获取方法名</span></span><br><span class="line">        <span class="comment">//使用反射技术来加载类文件进内存</span></span><br><span class="line">        Class aClass = Class.forName(className);<span class="comment">//获取Class对象aClass</span></span><br><span class="line">        Object obj = aClass.newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method = aClass.getMethod(methodName);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第三章-注解"><a href="#第三章-注解" class="headerlink" title="第三章    注解"></a>第三章    注解</h1><hr><h2 id="3-1概念"><a href="#3-1概念" class="headerlink" title="3.1概念"></a>3.1概念</h2><ul><li><p>注解：说明程序的。给计算机看</p></li><li><p>注释：用文字描述程序的。给程序员看</p></li></ul><p><strong>定义：</strong>注解(Annotation)，也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p><p><strong>概念描述：</strong></p><ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ul><p><strong>作用分类：</strong></p><ul><li><p>编写文档:通过代码里标识的注解生成文档【生成文档doc文档】javadoc命令生成文档</p></li><li><p>代码分析:通过代码里标识的注解对代码进行分析【使用反射】</p></li><li><p>编译检查:通过代码里标识的注解让编译器能够实现基本的编译检查【override】</p></li></ul><hr><h2 id="3-2JDK内置注解"><a href="#3-2JDK内置注解" class="headerlink" title="3.2JDK内置注解"></a>3.2JDK内置注解</h2><h3 id="1-Override"><a href="#1-Override" class="headerlink" title="1.@Override"></a>1.@Override</h3><p>检测被该注解标注的方法是否是继承自父类(接口)的</p><h3 id="2-Deprecated"><a href="#2-Deprecated" class="headerlink" title="2.@Deprecated"></a>2.@Deprecated</h3><p>将该注解标注的内容，表示<strong>已过时</strong></p><h3 id="3-SuppressWarnings"><a href="#3-SuppressWarnings" class="headerlink" title="3.@SuppressWarnings"></a>3.@SuppressWarnings</h3><p>压制警告</p><p>一般传递参数all：@SuppressWarnings(all)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK内置注解演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span><span class="comment">//压制所有的警告⚠</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//### 1.@Override</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//检测被该注解标注的方法是否是继承自父类(接口)的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//有缺陷</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//替代show01方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        show01();<span class="comment">//已过时  不建议使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3自定义注解"><a href="#3-3自定义注解" class="headerlink" title="3.3自定义注解"></a>3.3自定义注解</h2><h3 id="格式-amp-本质"><a href="#格式-amp-本质" class="headerlink" title="格式&amp;本质"></a>格式&amp;本质</h3><p><strong>格式：</strong></p><ul><li><p>元注解</p></li><li><p>```java<br>public @interface 注解名称{</p><pre><code>属性列表;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**本质：**</span><br><span class="line"></span><br><span class="line">注解本质上就是一个接口，该接口默认继承Annotation接口</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public interface Demo03MyAnnotation extends java.lang.annotation.Annotation &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><p><strong>属性：</strong>接口中的抽象方法</p><p>要求：</p><ul><li><strong>属性的返回类型有下列取值：</strong></li></ul><p>1.基本数据类型</p><p>2.String</p><p>3.枚举</p><p>4.注解</p><p>以上类型的数组</p><ul><li><strong>定义了属性，在使用时需要给属性赋值</strong></li></ul><p>1.如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</p><p>2.如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</p><p>3.数组赋值时，值使用{ }包裹。如果数组中只有一个值，则{ }可以省略。</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>用于描述注解的注解</p><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p><strong>描述注解能够作用的位置</strong></p><p>ElementType取值：</p><ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul><p>赋值时value可以省略</p><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p><strong>描述注解被保留的阶段</strong></p><ul><li>@Retention(RetentionPolicy.SOURCE)：当前被描述的注解，不会保留到class字节码文件中。</li><li>@Retention(RetentionPolicy.CLASS)：当前被描述的注解，会保留到class字节码文件中，但是不会JVM读取到。</li><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到。</li></ul><h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h4><p><strong>描述注解是否被抽取到api文档中</strong></p><p>加入此注解后的注解，在标记时，会在api文档中显示(显示的是被@Documented标注的那个注解)。</p><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p><strong>描述注解是否被子类继承</strong></p><p>当A注解被此注解描述时，一个类继承了被A注解标注的类时，这个子类会继承这个A注解。</p><hr><h2 id="3-4解析-使用-注解"><a href="#3-4解析-使用-注解" class="headerlink" title="3.4解析(使用)注解"></a>3.4解析(使用)注解</h2><p><strong>获取注解中定义的属性值</strong></p><p>1.获取注解定义的位置的对象(class,Method,Field)</p><p>2.获取指定的注解<br>       *getAnnotation(class)</p><p>3.调用注解中的抽象方法获取配置的属性值</p><blockquote><p>字节码文件对象.getAnnotation(注解名.class)来获取注解对象</p><p>注解对象.方法获取定义的抽象方法的返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *描述需要执行的类名，方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">      <span class="function">String <span class="title">className</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function">String <span class="title">MethodName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pro(className = &quot;com.priv.demo03Annotation.Demo06&quot;,MethodName = &quot;show01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.解析注解</span></span><br><span class="line">        <span class="comment">//1.1获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;Demo05ReflectTest&gt; d = Demo05ReflectTest.class;</span><br><span class="line">        <span class="comment">//2.获取上边的注解对象</span></span><br><span class="line">        Pro annotation = d.getAnnotation(Pro.class);<span class="comment">///其实就是在内存中生成了一个该注解接口的子类实现对象</span></span><br><span class="line">        <span class="comment">//3.调用注解对象中定义的抽象方法，获取返回值</span></span><br><span class="line">        String s = annotation.className();</span><br><span class="line">        String s1 = annotation.MethodName();</span><br><span class="line">        <span class="comment">//使用反射技术来加载类文件进内存</span></span><br><span class="line">        Class aClass = Class.forName(s);<span class="comment">//获取Class对象aClass</span></span><br><span class="line">        Object obj = aClass.newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method = aClass.getMethod(s1);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5案例：简单的测试框架"><a href="#3-5案例：简单的测试框架" class="headerlink" title="3.5案例：简单的测试框架"></a>3.5案例：简单的测试框架</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *描述需要执行的类名，方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">      <span class="function">String <span class="title">className</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function">String <span class="title">MethodName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1+0=&quot;</span>+(<span class="number">1</span>+<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sbu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-0=&quot;</span>+(<span class="number">1</span>-<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1*0=&quot;</span>+(<span class="number">1</span>*<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1/0=&quot;</span>+(<span class="number">1</span>/<span class="number">0</span>));<span class="comment">//InvocationTargetException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;永无bug...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类框架</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Pro(className = &quot;com.priv.demo03Annotation.Demo08Calculator&quot;,MethodName = &quot;show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析注解</span></span><br><span class="line">        <span class="comment">//获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;Demo09Test&gt; demo09TestClass = Demo09Test.class;</span><br><span class="line">        <span class="comment">//获取注解对象</span></span><br><span class="line">        Pro annotation = demo09TestClass.getAnnotation(Pro.class);</span><br><span class="line">        <span class="comment">//调用注解对象中定义的抽象方法，获取返回值</span></span><br><span class="line">        String s = annotation.MethodName();</span><br><span class="line">        String s1 = annotation.className();</span><br><span class="line">        <span class="comment">//使用反射技术来加载类文件进内存</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(s1);<span class="comment">//获取Class对象aClass</span></span><br><span class="line">        Object obj = aClass.newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method = aClass.getMethod(s);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第四章-枚举类"><a href="#第四章-枚举类" class="headerlink" title="第四章    枚举类"></a>第四章    枚举类</h1><hr><h2 id="4-1枚举类的使用"><a href="#4-1枚举类的使用" class="headerlink" title="4.1枚举类的使用"></a>4.1枚举类的使用</h2><ul><li>类的对象：有限个，确定的</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210821113625.png" alt="QQ截图20210821113625"></p><ul><li>当需要定义一组常量时，强烈建议使用枚举类</li><li>如果枚举类中只有一个对象，则可以作为单例模式的实现方式</li></ul><hr><h2 id="4-2定义枚举类"><a href="#4-2定义枚举类" class="headerlink" title="4.2定义枚举类"></a>4.2定义枚举类</h2><p>方式一：jdk5.0之前，自定义枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01Enum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Enum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season spring = Season.SPRING;</span><br><span class="line">        System.out.println(spring);<span class="comment">//Season&#123;seasonName=&#x27;春天&#x27;, seasonDesc=&#x27;春暖花开&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    <span class="comment">//声明Season对象的属性：private final修饰</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">    <span class="comment">//私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName, String seasonDesc)</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">         <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//提供当前枚举类的多个对象：public static final的</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING =<span class="keyword">new</span> Season(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER =<span class="keyword">new</span> Season(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN =<span class="keyword">new</span> Season(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER =<span class="keyword">new</span> Season(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> seasonName;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> seasonDesc;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                 <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                 <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                 <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>方式二：在jdk5.0，可以使用enum关键字定义枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01Enum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用enum关键字定义枚举类</span></span><br><span class="line"><span class="comment"> * 说明：定义的枚举类默认继承于java.lang.Enum类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021 8.21 上午 12：35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Enum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 spring = Season1.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">        System.out.println(Season1.class.getSuperclass());<span class="comment">//class java.lang.Enum</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span></span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    Season1(String seasonName, String seasonDesc)&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3Enum类中的常用方法"><a href="#4-3Enum类中的常用方法" class="headerlink" title="4.3Enum类中的常用方法"></a>4.3Enum类中的常用方法</h2><ul><li><code>values()：</code>返回枚举类型的对象数组。该方法可以很方便的遍历所有的枚举值。</li><li><code>valueOf(String str)：</code>可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常。</li><li><code>toString()：</code>返回当前枚举类对象常量的名称。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01Enum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用enum关键字定义枚举类</span></span><br><span class="line"><span class="comment"> * 说明：定义的枚举类默认继承于java.lang.Enum类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Echo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021 8.21 上午 12：35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Enum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 spring = Season1.SPRING;</span><br><span class="line">        <span class="comment">//`toString()：`返回当前枚举类对象常量的名称。</span></span><br><span class="line">        System.out.println(spring);</span><br><span class="line">        System.out.println(Season1.class.getSuperclass());<span class="comment">//class java.lang.Enum</span></span><br><span class="line">        <span class="comment">//`values()：`返回枚举类型的对象数组。该方法可以很方便的遍历所有的枚举值。</span></span><br><span class="line">        Season1[] values = Season1.values();</span><br><span class="line">        <span class="keyword">for</span> (Season1 value:values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">            <span class="comment">//SPRING</span></span><br><span class="line">            <span class="comment">//SUMMER</span></span><br><span class="line">            <span class="comment">//AUTUMN</span></span><br><span class="line">            <span class="comment">//WINTER</span></span><br><span class="line">        &#125;</span><br><span class="line">        Thread.State[] values1 = Thread.State.values();</span><br><span class="line">        <span class="keyword">for</span> (Thread.State s:values1) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            <span class="comment">//NEW</span></span><br><span class="line">            <span class="comment">//RUNNABLE</span></span><br><span class="line">            <span class="comment">//BLOCKED</span></span><br><span class="line">            <span class="comment">//WAITING</span></span><br><span class="line">            <span class="comment">//TIMED_WAITING</span></span><br><span class="line">            <span class="comment">//TERMINATED</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//`valueOf(String str)：`可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常。</span></span><br><span class="line">        Season1 winter = Season1.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line">        System.out.println(winter);<span class="comment">//WINTER 打印方法名</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span></span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    Season1(String seasonName, String seasonDesc)&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-4使用enum关键字定义的枚举类实现接口的情况"><a href="#4-4使用enum关键字定义的枚举类实现接口的情况" class="headerlink" title="4.4使用enum关键字定义的枚举类实现接口的情况"></a>4.4使用enum关键字定义的枚举类实现接口的情况</h2><p>情况一：实现接口，在enum类中实现抽象方法</p><p>情况二：让枚举类的对象分别实现接口中的抽象方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-Junit单元测试&quot;&gt;&lt;a href=&quot;#第一章-Junit单元测试&quot; class=&quot;headerlink&quot; title=&quot;第一章    Junit单元测试&quot;&gt;&lt;/a&gt;第一章    Junit单元测试&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1概述&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>File类、递归</title>
    <link href="https://www.stq555.com/2022/01/12/File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92/"/>
    <id>https://www.stq555.com/2022/01/12/File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92/</id>
    <published>2022-01-12T09:22:03.000Z</published>
    <updated>2022-01-12T09:23:27.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-File类"><a href="#第一章-File类" class="headerlink" title="第一章    File类"></a>第一章    File类</h1><hr><h2 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h2><p><code>java.io.File</code>类时文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><p>java把电脑中的文件和文件夹(目录)封装为了一个FiLe类,我们可以使用FiLe类对文件和文件夹进行操作</p><p>我们可以使用File类的方法</p><ul><li> 创建一个文件/文件夹</li><li> 删除文件/文件夹</li><li> 获取文件/文件夹</li><li> 判断文件/文件夹是否存在</li><li> 对文件夹进行遍历</li><li> 获取文件的大小</li></ul><p>File类是一个与系统无关的类,任何的操作系统都可以使用这个类中的方法</p><p>重点:记住这三个单词</p><ul><li> file:文件</li><li> directory :文件夹/目录</li><li> path :路径</li></ul><h3 id="File类的静态成员变量"><a href="#File类的静态成员变量" class="headerlink" title="File类的静态成员变量"></a>File类的静态成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01File</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String pathSeparator = File.pathSeparator;</span><br><span class="line">        System.out.println(pathSeparator);<span class="comment">//路径分隔符 windows;分号   Linux:冒号</span></span><br><span class="line"></span><br><span class="line">        String separator = File.separator;</span><br><span class="line">        System.out.println(separator);<span class="comment">//  \文件名称分隔符   windows\反斜杠  Linux/正斜杠</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        操作路径:路径不能写死了</span></span><br><span class="line"><span class="comment">//        C: \develop\a\a.txt    windows</span></span><br><span class="line"><span class="comment">//        C: /develop/a/a.txt    Linux</span></span><br><span class="line"><span class="comment">//        &quot;C:&quot;+File.separator+&quot;develop&quot;+File.separator+&quot;a&quot;+File.separator+&quot;a.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2构造方法"><a href="#1-2构造方法" class="headerlink" title="1.2构造方法"></a>1.2构造方法</h2><ul><li><code>public File(String pathname)</code>：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的File实例。</li><li><code>public File(String parent,String child)</code>：从<strong>父路径名字符串和子路径名字符串</strong>创建新的File实例。</li><li><code>public File(File parent,String child)</code>：从<strong>父抽象路径名和子路径名字符串</strong>创建新的File实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02File</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        show01();</span></span><br><span class="line"><span class="comment">//        show02(&quot;c:\\&quot;,&quot;a.txt&quot;);//c:\a.txt</span></span><br><span class="line">          show03();<span class="comment">//c:\Hello.java</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//`public File(File parent,String child)`：从**父抽象路径名和子路径名字符串**创建新的File实例。</span></span><br><span class="line"><span class="comment">//    好处：父路径和子路径,可以单独书写,使用起来非常灵活;</span></span><br><span class="line"><span class="comment">//    父路径和子路径都可以变化父路径是File类型,可以使用File的方法对路径进行―些操作,再使用路径创建对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File parent=<span class="keyword">new</span> File(<span class="string">&quot;c:\\&quot;</span>);</span><br><span class="line">        File f3 =<span class="keyword">new</span> File(parent,<span class="string">&quot;Hello.java&quot;</span>);</span><br><span class="line">        System.out.println(f3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//`public File(String parent,String child)`：从**父路径名字符串和子路径名字符串**创建新的File实例。</span></span><br><span class="line">    <span class="comment">// 好处：父路径和子路径,可以单独书写,使用起来非常灵活;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">(String parent,String child)</span> </span>&#123;</span><br><span class="line">        File f2 =<span class="keyword">new</span> File(parent,child);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//`public File(String pathname)`：通过将给定的**路径名字符串**转换为抽象路径名来创建新的File实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f1=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        File f2=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo&quot;</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        File f3=<span class="keyword">new</span> File(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">        System.out.println(f3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-3常用方法"><a href="#1-3常用方法" class="headerlink" title="1.3常用方法"></a>1.3常用方法</h2><h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul><li><code>public String getAbsolutePath()</code>：返回此File的<strong>绝对路径</strong>名字符串。</li><li><code>public String getPath()</code>：将此File转换为路径名字符串。</li></ul><p>​        tostring方法调用的就是getPath方法</p><p>源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> string <span class="title">tostring</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getPath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>public String getName()</code>：返回由此File表示的文件或目录的名称。</li><li><code>public long length()</code>：返回由此File表示的文件的长度。</li></ul><p>​     获取的是构造方法指定的文件的大小,以字节为单位</p><blockquote><p>注意:<br>文件夹是没有大小概念的,不能获取文件夹的大小<br>如果构造方法中给出的路径不存在,那么Length方法返回0</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03FileGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1 =<span class="keyword">new</span> File(<span class="string">&quot;d:/aaa/bbb.java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径&quot;</span>+f1.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件构造路径&quot;</span>+f1.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称&quot;</span>+f1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度&quot;</span>+f1.length()+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File f2 =<span class="keyword">new</span> File(<span class="string">&quot;d:/aaa&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;目录绝对路径&quot;</span>+f2.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录构造路径&quot;</span>+f2.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录名称&quot;</span>+f2.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录长度&quot;</span>+f2.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">//   输出结果：</span></span><br><span class="line"><span class="comment">//        文件绝对路径d:\aaa\bbb.java</span></span><br><span class="line"><span class="comment">//        文件构造路径d:\aaa\bbb.java</span></span><br><span class="line"><span class="comment">//        文件名称bbb.java</span></span><br><span class="line"><span class="comment">//        文件长度0字节</span></span><br><span class="line"><span class="comment">//        -------------------------------------</span></span><br><span class="line"><span class="comment">//        目录绝对路径d:\aaa</span></span><br><span class="line"><span class="comment">//        目录构造路径d:\aaa</span></span><br><span class="line"><span class="comment">//        目录名称aaa</span></span><br><span class="line"><span class="comment">//        目录长度0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><p>绝对路径：是一个完整的路径(以盘符开头)</p><p>相对路径：是一个简化的路径</p><p>如果使用当前项目的根目录，路径可以简化书写(可以省略项目的根目录)</p><blockquote><p>tips：1.路径是不区分大小写的</p><p>​         2.路径中的文件名称分隔符windows使用反斜杠，反斜杠是转义字符，两个反斜杠代表一个普通的反斜杠。</p></blockquote><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li><code>public boolean exists() </code>：此File表示的文件或目录是否真实存在。</li><li><code>public boolean isDirectory()</code>：此File表示的是否为目录。</li><li><code>public boolean isFile()</code>：此File表示的是否为文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04FileIs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt&quot;</span>);</span><br><span class="line">        File f2 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo&quot;</span>);</span><br><span class="line">        <span class="comment">//判断是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt是否存在：&quot;</span>+f1.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo是否存在：&quot;</span>+f2.exists());</span><br><span class="line">        <span class="comment">//判断是文件还是目录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt文件？：&quot;</span>+f1.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo\\a.txt目录？：&quot;</span>+f1.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo文件？：&quot;</span>+f2.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;C:\\Users\\97189\\IdeaProjects\\Demo目录？：&quot;</span>+f2.isDirectory());</span><br><span class="line">        <span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo是否存在：true</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo\a.txt文件？：false</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo\a.txt目录？：false</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo文件？：false</span></span><br><span class="line"><span class="comment">//        C:\Users\97189\IdeaProjects\Demo目录？：true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><ul><li><code>public boolean createNewFile()</code>：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。</li></ul><blockquote><p>注意:</p><ul><li>此方法只能创建文件,不能创建文件夹</li><li>创建文件的路径必须存在,否则会抛出异常</li></ul></blockquote><ul><li><code>public boolean delete() </code>：删除由此File表示的文件或目录。(都可以删除)</li></ul><blockquote><p>返回值:布尔值<br>true:文件/文件夹删除成功,返回true<br>false:文件夹中有内容,不会删除返回false;构造方法中路径不存在false</p><p>注意:<br>delete方法是直接在硬盘删除文件/文件夹,不走回收站,删除要谨慎。</p></blockquote><ul><li><p><code>public boolean mkdir() </code>：创建由此File表示的目录。(<strong>只能创建单级空文件夹</strong>)</p></li><li><p><code>public boolean mkdirs() </code>：创建由此File表示的目录，包括任何必需但不存在的父目录。(<strong>能创建单级空文件夹，也能创建多级空文件夹</strong>)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05File</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        show01();</span></span><br><span class="line"><span class="comment">//        show02();</span></span><br><span class="line">        show03();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f6 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\111\\222\\333\\444&quot;</span>);</span><br><span class="line">        System.out.println(f6.delete());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f3 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\aaa&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;aaa：&quot;</span>+f3.mkdir());<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        File f4 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\111\\222\\333\\444&quot;</span>);</span><br><span class="line">        System.out.println(f4.mkdir());<span class="comment">//false mkdir()方法不能创建多级空文件夹，但是可以调用mkdirs()方法创建</span></span><br><span class="line"></span><br><span class="line">        File f5 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\111\\222\\333\\444&quot;</span>);</span><br><span class="line">        System.out.println(f5.mkdirs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f1 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> newFile = f1.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;newFile&quot;</span>+newFile);</span><br><span class="line"></span><br><span class="line">        File f2 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Des\\s\\1.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2.createNewFile());<span class="comment">//会抛出IOException异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-4目录的遍历"><a href="#1-4目录的遍历" class="headerlink" title="1.4目录的遍历"></a>1.4目录的遍历</h2><ul><li><code>punlic String[] list()</code>：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li><code>public File[] listFiles()</code>：返回一个File数组，表示该File目录中的所有子文件或目录。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06FileFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1 =<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] names =f1.list();</span><br><span class="line">        <span class="keyword">for</span> (String name:names) &#123;</span><br><span class="line">            System.out.println(name);<span class="comment">//.idea</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File[] files = f1.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            System.out.println(files1);<span class="comment">//C:\Users\97189\Desktop\s\.idea</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：调用listFiles方法的File对象，表示的必须时实际存在的目录，否则返回null，无法进行遍历。<br>list方法和ListFiles方法遍历的是构造方法中给出的目录如果构造方法中给出的自录的路径不存在,会抛出空指针异常。如果构造方法中给出的路径不是一个自录,也会抛出空指针异常</p></blockquote><hr><h1 id="第二章-递归"><a href="#第二章-递归" class="headerlink" title="第二章    递归"></a>第二章    递归</h1><hr><h2 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h2><ul><li><strong>递归</strong>：指在当前方法内调用自己的这种现象。</li><li><strong>递归的分类</strong>：</li></ul><p>1.递归分为两种，直接递归和间接递归。</p><p>2.直接递归称为方法自身调用自己。</p><p>3.间接递归可以A方法调用B方法，B方法调用C方法，C方法调用A方法。</p><ul><li><strong>注意事项</strong>：</li></ul><p>1.递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</p><p>2.在递归中虽然有限定条件，但是递归次数不能太多，否则也会发生栈内存溢出。</p><p>3.构造方法，禁止递归。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Recursion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        a();</span></span><br><span class="line">        b(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);<span class="comment">//11416</span></span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">20000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//Exception in thread &quot;main&quot; java.lang.StackOverflowError</span></span><br><span class="line">        &#125;</span><br><span class="line">        b(++i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a方法！&quot;</span>);</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2递归累加求和"><a href="#2-2递归累加求和" class="headerlink" title="2.2递归累加求和"></a>2.2递归累加求和</h2><h3 id="计算1-n的和"><a href="#计算1-n的和" class="headerlink" title="计算1~n的和"></a>计算1~n的和</h3><p><strong>分析</strong>：num的累和=num+(num-1)的累和，所以可以把累和的操作定义成一个方法，递归调用。</p><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.security.provider.Sun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Recursion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = sum(<span class="number">3</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n+sum(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果仅仅是计算1-n之间的和，不推荐使用递归，使用for循环即可。</p><h3 id="代码执行图解"><a href="#代码执行图解" class="headerlink" title="代码执行图解"></a>代码执行图解</h3><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210814201633.png" alt="QQ截图20210814201633"></p><blockquote><p>tips：递归一定要有条件限定，保证递归能够停止下来，次数不要太多，否则会发生栈内存溢出。</p></blockquote><hr><h2 id="2-3递归求阶乘"><a href="#2-3递归求阶乘" class="headerlink" title="2.3递归求阶乘"></a>2.3递归求阶乘</h2><ul><li><strong>阶乘</strong>：n！= n * (n-1) * … * 3 * 2 * 1 </li></ul><p><strong>分析</strong>：n！= n * (n-1)！</p><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Factorial</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value =getValue(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;value=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n*getValue(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4递归打印多级目录"><a href="#2-4递归打印多级目录" class="headerlink" title="2.4递归打印多级目录"></a>2.4递归打印多级目录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Recursion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：如果在增强for中直接打印filse1，则不能打印出文件夹里面的文件，所以要加一个判断语句if。</p></blockquote><hr><h1 id="第三章-综合案例"><a href="#第三章-综合案例" class="headerlink" title="第三章    综合案例"></a>第三章    综合案例</h1><hr><h2 id="3-1文件搜索"><a href="#3-1文件搜索" class="headerlink" title="3.1文件搜索"></a>3.1文件搜索</h2><p>搜索<code>C:\Users\97189\Desktop\s</code>目录中的<code>.png</code>文件。</p><ul><li><strong>分析</strong>：</li></ul><p>1.目录搜索，无法判断多少级目录，所以使用递归，遍历所有目录。</p><p>2.遍历目录时，获取的子文件，通过文件名称，判断是否符合条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02Recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.midi.Soundbank;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Case</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>);</span><br><span class="line">        getAllFile(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.isDirectory())&#123;</span><br><span class="line">                getAllFile(f);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (f.getName().toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2文件过滤器优化"><a href="#3-2文件过滤器优化" class="headerlink" title="3.2文件过滤器优化"></a>3.2文件过滤器优化</h2><p>在FiLe类中有两个和ListFiles重载的方法,方法的参数传递的就是过滤器。</p><p><strong>1.File[ ] listFiLes (FileFilter filter)</strong><br><code>java.io.FileFilter</code>接口:用于抽象路径名(FiLe对象)的过滤器。</p><p>作用:用来过滤文件(FiLe对象)</p><p>抽象方法:用来过滤文件的方法</p><ul><li>boolean accept(File pathname）测试指定抽象路径名是否应该包含在某个路径名列表中。</li></ul><p>参数:<br>   File pathname :使用ListFiLes方法遍历目录,得到的每一个文件对象</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFilterImpl</span> <span class="keyword">implements</span> <span class="title">FileFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pathname.isDirectory())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pathname.getName().toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Filter</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilterImpl());<span class="comment">//传递过滤器对象</span></span><br><span class="line"><span class="comment">//        listFiles方法一共做了3件事情:</span></span><br><span class="line"><span class="comment">//        1.listFiles方法会对构造方法中传递的目录进行遍历,获取目录中的每一个文件/文件夹--&gt;封装为File对象</span></span><br><span class="line"><span class="comment">//        2.listFiles方法会调用参数传递的过滤器中的方法accept</span></span><br><span class="line"><span class="comment">//        3.listFiles方法会把遍历得到的每一个File对象,传递给accept方法的参数pathname</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化：<strong>使用匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Filter</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优化：使用匿名内部类</span></span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pathname.isDirectory()||pathname.getName().endsWith(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.FiLe[ ] listFiles(FiLenameFilter filter)</strong></p><p><code>java.io.FilenameFilter</code>接口:实现此接口的类实例可用于过滤器文件名。</p><p>作用:用于过滤文件名称</p><p>抽象方法:用来过滤文件的方法</p><ul><li>boolean accept(File dir，String name）测试指定文件是否应该包含在某一文件列表中。</li></ul><p>参数︰<br>File dir:构造方法中传递的被遍历的目录<br>String name :使用ListFiles方法遍历自录,获取的每一个文件/文件夹的名称</p><blockquote><p>注意:<br>两个过滤器接口是没有实现类的,需要我们自己写实现类,重写过滤的方法accept,在方法中自己定义过滤的规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FilenameFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优化：使用匿名内部类</span></span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> File(dir,name).isDirectory()||name.toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong>：</p><p>1.接口作为参数，需要传递子类对象，重写其中方法。我们选择匿名内部类方式，比较简单。</p><p>2.<code>accept</code>方法，参数为File，表示当前File下所有的子文件和子目录。保留住则返回true，过滤掉则返回false。</p><p>​        保留规则：</p><p>​           1.要么是.java文件。</p><p>​           2.要么是目录，用于继续遍历。</p><hr><h2 id="3-3Lambda优化"><a href="#3-3Lambda优化" class="headerlink" title="3.3Lambda优化"></a>3.3Lambda优化</h2><p><strong>1.File[ ] listFiLes (FileFilter filter)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优化：使用匿名内部类</span></span><br><span class="line">        File[] files = dir.listFiles(pathname-&gt;pathname.isDirectory()||pathname.getName().toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.FiLe[ ] listFiles(FiLenameFilter filter)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03FilenameFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getAllFile(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优化：使用Lambda表达式(接口中只有一个方法)</span></span><br><span class="line">        File[] files = dir.listFiles((dir1, name) -&gt; <span class="keyword">new</span> File(dir1,name).isDirectory()||name.toLowerCase().endsWith(<span class="string">&quot;.png&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (File files1:files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (files1.isDirectory())&#123;</span><br><span class="line">                getAllFile(files1);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                System.out.println(files1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-File类&quot;&gt;&lt;a href=&quot;#第一章-File类&quot; class=&quot;headerlink&quot; title=&quot;第一章    File类&quot;&gt;&lt;/a&gt;第一章    File类&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1概述&quot;&gt;&lt;a href=&quot;#1-1概述&quot; cl</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="https://www.stq555.com/2022/01/11/IO%E6%B5%81/"/>
    <id>https://www.stq555.com/2022/01/11/IO%E6%B5%81/</id>
    <published>2022-01-11T15:21:40.000Z</published>
    <updated>2022-01-11T15:28:10.020Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="第一章-IO概述"><a href="#第一章-IO概述" class="headerlink" title="第一章    IO概述"></a>第一章    IO概述</h1><hr><h2 id="1-1什么是IO"><a href="#1-1什么是IO" class="headerlink" title="1.1什么是IO"></a>1.1什么是IO</h2><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code>，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢?键盘、内存、硬盘、外接设备等等。</p><p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code>和<code>输出output</code>，即流向内存是输入流，流出内存的输出流。</p><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p><hr><h2 id="1-2IO的分类"><a href="#1-2IO的分类" class="headerlink" title="1.2IO的分类"></a>1.2IO的分类</h2><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong>：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。</li><li><strong>输出流</strong>：把数据从<code>内存</code>中写出到<code>其他设备</code>上的流。</li></ul><p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong>：以字节为单位，读写数据的流。</li><li><strong>字符流</strong>：以字符为单位，读写数据的流。</li></ul><hr><h2 id="1-3IO的流向说明图解"><a href="#1-3IO的流向说明图解" class="headerlink" title="1.3IO的流向说明图解"></a>1.3IO的流向说明图解</h2><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210815215009.png" alt="QQ截图20210815215009"></p><hr><h2 id="1-4顶级父类们"><a href="#1-4顶级父类们" class="headerlink" title="1.4顶级父类们"></a>1.4顶级父类们</h2><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210815215021.png" alt="QQ截图20210815215021"></p><hr><h1 id="第二章-字节流"><a href="#第二章-字节流" class="headerlink" title="第二章    字节流"></a>第二章    字节流</h1><hr><h2 id="2-1一切皆为字节"><a href="#2-1一切皆为字节" class="headerlink" title="2.1一切皆为字节"></a>2.1一切皆为字节</h2><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><hr><h2 id="2-2字节输出流【OutputStream】"><a href="#2-2字节输出流【OutputStream】" class="headerlink" title="2.2字节输出流【OutputStream】"></a>2.2字节输出流【OutputStream】</h2><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类型的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code>：关闭此输出流并释放与此流相关联的任何系统资源。</li><li><code>public void flush()</code>：刷新此输出流并强制任何缓冲的输出字节被写出。</li><li><code>public void write(byte[] b)</code>：将b.length字节从指定的字节数组写入此输出流。</li></ul><blockquote><p>一次写多个字节:<br>1.如果写的第一个字节是正数(0-127),那么显示的时候会查询ASCII表<br>2.如果写的第一个字节是负数,那第一个字节会和第二个字节,两个字节组成一个中文显示,查询系统默认码表(GBK)</p></blockquote><ul><li><code>public void write(byte[] b,int off,int len)</code>：从指定的字节数组写入len字节，从偏移量off开始输出到此输入流。</li></ul><blockquote><p>int off：数组的开始索引</p><p>int len：写几个字节</p></blockquote><ul><li><code>public abstract void write(int b)</code>：将指定的字节输出流。</li></ul><blockquote><p>tips：close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><hr><h2 id="2-3FileOutputStream类"><a href="#2-3FileOutputStream类" class="headerlink" title="2.3FileOutputStream类"></a>2.3FileOutputStream类</h2><p>java.io.FileOutputStream extends OutputStream</p><p>FileOutputStream：文件字节输出流</p><p><strong>作用：</strong>把内存中的数据写入到硬盘的文件中</p><p><strong>字节输出流的使用步骤(重点)∶</strong></p><ul><li>创建一个Fileoutputstream对象,构造方法中传递写入数据的目的地</li><li>调用Fileoutputstream对象中的方法write,把数据写入到文件中</li><li>释放资源(流使用会占用一定的内存,使用完毕要把内存清空,提供程序的效率)</li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p>FileOutputStream(String name)：创建一个向具有指定名称的文件中写入数据的输出文件流。</p></li><li><p>FileOutputStream(File file)：创建一个向指定File对象表示的文件中写入数据的文件输出流。</p></li></ul><p>参数：写入数据的目的地</p><ul><li>String name：目的地是一个文件的路径</li><li>File file：目的地是一个文件</li></ul><p>构造方法的作用：</p><ul><li>创建一个FileOutputStream对象</li><li>会根据构造方法中传递的文件/文件路径，创建一个空的文件</li><li>会把FileOutputStream对象指向创建好的文件</li></ul><h3 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h3><p>写入数据的原理(内存—&gt;硬盘)</p><p>  java程序–&gt;JVM(java虚拟机)–&gt;OS(操作系统)–&gt;OS调用写数据的方法–&gt;把数据写入到文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01OutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//`public abstract void write(int b)`：将指定的字节输出流。</span></span><br><span class="line">        fos.write(<span class="number">97</span>);<span class="comment">//ASCII码 a</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`public void write(byte[] b)`：将b.length字节从指定的字节数组写入此输出流。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes=&#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;</span><br><span class="line">        fos.write(bytes);<span class="comment">//ABCDE</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes1=&#123;-<span class="number">65</span>,-<span class="number">66</span>,-<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;</span><br><span class="line">        fos.write(bytes1);<span class="comment">//烤紻E</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`public void write(byte[] b,int off,int len)`：从指定的字节数组写入len字节，从偏移量off开始输出到此输入流。</span></span><br><span class="line">        fos.write(bytes,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//BC</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入字符的方法:可以使用string类中的方法把字符串,转换为字节数组</span></span><br><span class="line">        <span class="comment">//byte[] getBytes()把字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes2=<span class="string">&quot;你好&quot;</span>.getBytes();</span><br><span class="line">        System.out.println(Arrays.toString(bytes2));<span class="comment">//[-28, -67, -96, -27, -91, -67]</span></span><br><span class="line">        fos.write(bytes2);<span class="comment">//你好</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h3><p>追加写/续写：使用两个参数的构造方法。</p><ul><li><code>public FileOutputStream(File file,boolean append)</code>：创建文件输出流以写入由指定的File对象表示的文件。</li><li><code>public FileOutputStream(String name,boolean append)</code>：创建文件输出流以指定的名称写入文件。</li></ul><p><strong>参数：</strong></p><ul><li><p>Stream name,File file：写入数据的目的地</p></li><li><p>boolean append：追加写开关</p></li></ul><p>true：创建对象不会覆盖源文件，继续在文件的末尾追加写数据。</p><p>false：创建一个新文件，覆盖源文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02OutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        fos.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行多少次，就会有多少个你好，不会覆盖掉源文件。</p><h3 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h3><p>写换行：写换行符号</p><ul><li>windows：\r\n</li><li>linux：/n</li><li>mac：/r</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03OutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fos.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4字节输入流【InputStream】"><a href="#2-4字节输入流【InputStream】" class="headerlink" title="2.4字节输入流【InputStream】"></a>2.4字节输入流【InputStream】</h2><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public void close()</code>：关闭此输入流并释放与此流相关联的任何系统资源。</li><li><code>public abstract int read()</code>：从输入流读取数据的下一个字节。</li><li><code>public int read(byte[] b)</code>：从输入流中读取一些字节数，并将它们存储到字节数组b中。</li></ul><blockquote><p>tips：close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><hr><h2 id="2-5FileInputStream类"><a href="#2-5FileInputStream类" class="headerlink" title="2.5FileInputStream类"></a>2.5FileInputStream类</h2><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p><p><strong>作用：</strong>把硬盘文件中的数据，读取到内存中使用</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileInputStream(File file)</code>：通过打开与实际文件的连接来创建一个FileInputStream，该文件由文件系统中的File对象file命名。</li><li><code>FileInputStream(String name)</code>：通过打开与实际文件的连接来创建一个FileInputStream，该文件由文件系统中的路径名name命名。</li></ul><p>参数：读取文件的数据源</p><ul><li>String name：文件的路径</li><li>File file：文件</li></ul><p>构造方法的作用：</p><ul><li>会创建一个FileInputStream对象</li><li>会把FileInputStream对象指向构造方法中要读取的文件</li></ul><h3 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h3><p><strong>1.读取字节</strong></p><p><code>read</code>方法，每此可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</p><p>读取数据的原理(硬盘–&gt;内存)</p><p>   java程序–&gt;JVM–&gt;OS–&gt;OS读取数据的方法–&gt;读取文件</p><p>字节输入流的使用步骤(重点)∶</p><ul><li>创建FileInputstream对象,构造方法中绑定要读取的数据</li><li>使用FileInputStream对象中的方法read,读取文件</li><li>释放资源</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210816183222.png" alt="QQ截图20210816183222"></p><p>1.<code>public abstract int read()</code>：从输入流读取数据的下一个字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//一个字节一个字节的读，读到最后返回-1</span></span><br><span class="line"><span class="comment">//        int len = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//97</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//98</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//99</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//-1</span></span><br><span class="line">        <span class="comment">//使用while循环优化</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) len);<span class="comment">//abc</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<code>public int read(byte[] b)</code>：从输入流中读取一些字节数，并将它们存储到字节数组b中。</p><p>输出时需要调用：</p><p>String类的构造方法：</p><ul><li>String(byte[ ] bytes)：把字节数组转换为字符串</li><li>String(byte[ ] bytes，int offset, int length）：把字节数组的一部分转换为字符串 </li><li>offset :数组的开始索引</li><li>Length:转换的字节个数</li></ul><p><strong>数组：缓存作用，存储读取到的多个字节</strong></p><p>数组的长度一般定义为1024(1kb)或者1024的整数倍</p><p><strong>方法的返回值int</strong>是每次读取的有效字节个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//1.String(byte[ ] bytes)：把字节数组转换为字符串</span></span><br><span class="line"><span class="comment">//        byte[] bytes =new byte[2];</span></span><br><span class="line"><span class="comment">//        int len=fis.read(bytes);</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//2</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(bytes));//ab</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len=fis.read(bytes);</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//1</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(bytes));//cb</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        len=fis.read(bytes);</span></span><br><span class="line"><span class="comment">//        System.out.println(len);//-1</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(bytes));//cb</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用while循环优化</span></span><br><span class="line">        <span class="comment">//2.String(byte[ ] bytes，int offset, int length）：把字节数组的一部分转换为字符串 </span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));<span class="comment">//abc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-6字节流练习：图片复制"><a href="#2-6字节流练习：图片复制" class="headerlink" title="2.6字节流练习：图片复制"></a>2.6字节流练习：图片复制</h2><h3 id="复制原理图解"><a href="#复制原理图解" class="headerlink" title="复制原理图解"></a>复制原理图解</h3><p><strong>原理：</strong>从已有文件中读取字节，将该字节写出到另一个文件中。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210816192552.png" alt="QQ截图20210816192552"></p><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03FileCopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01FileCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s=System.currentTimeMillis();</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\1.png&quot;</span>);</span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\1.png&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先关写的</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">long</span> e =System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span>+(e-s)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第三章-字符流"><a href="#第三章-字符流" class="headerlink" title="第三章    字符流"></a>第三章    字符流</h1><hr><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04Reader;</span><br><span class="line"><span class="comment">//使用字节流读取中文文件</span></span><br><span class="line"><span class="comment">//1个中文</span></span><br><span class="line"><span class="comment">//GBK:占用两个字节</span></span><br><span class="line"><span class="comment">//UTF-8:占用3个字节</span></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//        while ((len=fis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(len);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) len);<span class="comment">//读取中文会出现乱码问题</span></span><br><span class="line">            <span class="comment">//ä</span></span><br><span class="line">            <span class="comment">//½</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">//å</span></span><br><span class="line">            <span class="comment">//¥</span></span><br><span class="line">            <span class="comment">//½</span></span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//228</span></span><br><span class="line"><span class="comment">//189</span></span><br><span class="line"><span class="comment">//160  组成 你</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//229</span></span><br><span class="line"><span class="comment">//165</span></span><br><span class="line"><span class="comment">//189  组成 好</span></span><br></pre></td></tr></table></figure><h2 id="3-1字符输入流【Reader】"><a href="#3-1字符输入流【Reader】" class="headerlink" title="3.1字符输入流【Reader】"></a>3.1字符输入流【Reader】</h2><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public void close()</code>：关闭此流并释放与此流相关联的任何系统资源。</li><li><code>public int read()</code>：从输入流读取一个字符。</li><li><code>public int read(char[] cbuf)</code>：从输入流中读取一些字符，并将它们存储到字符数组cbuf中。</li></ul><hr><h2 id="3-2FileReader类"><a href="#3-2FileReader类" class="headerlink" title="3.2FileReader类"></a>3.2FileReader类</h2><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>FileReader(String fileName)</li><li>FileReader(File file)</li></ul><p>参数：读取文件的数据源</p><ul><li>String fileName：文件的路径</li><li>File file：一个文件</li></ul><p>FileReader构造方法的<strong>作用</strong>：</p><ul><li>创建一个FileReader对象</li><li>会把FileReader对象指向要读取的文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03FileReaderConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//使用File对象创建流对象</span></span><br><span class="line">        File file =<span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileReader fileReader =<span class="keyword">new</span> FileReader(file);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用文件名称创建流对象</span></span><br><span class="line">        FileReader fileReader1 =<span class="keyword">new</span> FileReader(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h3><p>1.<strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取。</p><p><strong>字符输入流的使用步骤:</strong></p><ul><li>创建FiLeReader对象,构造方法中绑定要读取的数据源</li><li>使用FileReader对象中的方法read读取文件</li><li>释放资源</li></ul><p>输出时需要调用：</p><p><strong>String类的构造方法</strong></p><ul><li>String ( char[ ] value)把字符数组转换为字符串</li><li>String(char[ ] value，int offset,int count）把字符数组的一部分转换为字符串offset数组的开始索引count转换的个数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Reader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s=System.currentTimeMillis();</span><br><span class="line">        FileReader fileReader=<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//        `public int read()`：从输入流读取一个字符。</span></span><br><span class="line"><span class="comment">//        while ((len=fileReader.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)len);</span></span><br><span class="line"><span class="comment">//            //你好</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//`public int read(char[] cbuf)`：从输入流中读取一些字符，并将它们存储到字符数组cbuf中。</span></span><br><span class="line">        <span class="keyword">char</span>[] cs =<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=fileReader.read(cs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(cs,<span class="number">0</span>,len));</span><br><span class="line">            <span class="comment">//你好</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> e=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;所用时间为：&quot;</span>+(e-s)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3字符输出流【Writer】"><a href="#3-3字符输出流【Writer】" class="headerlink" title="3.3字符输出流【Writer】"></a>3.3字符输出流【Writer】</h2><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void writer(int c)</code>：写入单个字符。</li><li><code>void writer(char[] cbuf)</code>：写入字符数组。</li><li><code>abstract void writer(char[] cbuf,int off,int len)</code>：写入字符数组的某一部分，off是数组的开始索引，len是写的字符个数。</li><li><code>void writer(String str)</code>：写入字符串。</li><li><code>void writer(String str，int off,int len)</code>：写入字符串的某一部分，off是字符串的开始索引，len是写的字符个数。</li><li><code>void flush()</code>：刷新该流的缓冲。</li><li><code>void close()</code>：关闭此流，但要刷新它。</li></ul><hr><h2 id="3-4FileWriter类"><a href="#3-4FileWriter类" class="headerlink" title="3.4FileWriter类"></a>3.4FileWriter类</h2><p>文件字符输出流</p><p><strong>作用：</strong>  把内存中字符数据写入到文件中。</p><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>FileWriter(File file)：根据给定的File 对象构造一个 FileWriter对象。</li><li>FileWriter(String fileName)：根据给定的文件名构造一个FileWriter对象。</li></ul><p>参数：写入数据的目的地</p><ul><li>String fileName：文件的路径</li><li>File file：是一个文件</li></ul><p>构造方法的作用：</p><ul><li>会创建一个FileWriter对象</li><li>会根据构造方法中传递的文件/文件的路径，创建文件</li><li>会把FileWriter对象指向创建好的文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FileWriterConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//使用File对象创建流对象</span></span><br><span class="line">        File file =<span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fileWriter1 =<span class="keyword">new</span> FileWriter(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h3><p><strong>写出字符：</strong> <code>write(int b)</code>方法，每次可以写出一个字符数据。</p><p>字符输出流的使用步骤(重点):</p><ul><li>创建FiLewriter对象,构造方法中绑定要写入数据的目的地</li><li>使用Filelwriter中的方法vrite,把数据写入到内存缓冲区中(字符转换为字节的过程)</li><li>使用Filewriter中的方法fLush,把内存缓冲区中的数据,刷新到文件中</li><li>释放资源(会先把内存缓冲区中的数据刷新到文件中)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Writer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//`void writer(int c)`：写入单个字符。</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;97&quot;</span>);</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：</p><p>1.虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</p><p>2.未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</p></blockquote><h3 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h3><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code>方法了。</p><ul><li><code>flush</code>：刷新缓冲区，流对象可以继续使用。</li><li><code>close</code>：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p><strong>flush方法和close方法的区别</strong></p><ul><li>flush：刷新缓冲区，流对象可以继续使用。</li><li>close：先刷新缓冲区，然后通知系统释放资源，流对象不可以再被使用了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03CloseAndFlush</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//`void writer(int c)`：写入单个字符。</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;97&quot;</span>);</span><br><span class="line">        fileWriter.flush();</span><br><span class="line">        <span class="comment">//刷新之后流可以继续使用</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;98&quot;</span>);</span><br><span class="line">        fileWriter.close();</span><br><span class="line"><span class="comment">//        fileWriter.write(&quot;99&quot;);</span></span><br><span class="line"><span class="comment">// close方法之后流已经关闭了,已经从内存中消失了,流就不能再使用了会报错 ：IOException:Stream closed</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p></blockquote><h3 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h3><p><strong>1.写出字符数组</strong>：<code>write(char[ ] cbuf)</code>和<code>write(char[ ] cbuf，int off，int len)</code>，每次可以写出字符数组中的数据，用法类似FileOutputStream。</p><p><strong>2.写出字符串</strong></p><ul><li><code>void writer(String str)</code>：写入字符串。</li><li><code>void writer(String str，int off,int len)</code>：写入字符串的某一部分，off是字符串的开始索引，len是写的字符个数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Writer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\3.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span>[] cs=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">//`void writer(char[] cbuf)`：写入字符数组。</span></span><br><span class="line">        fileWriter.write(cs);<span class="comment">//abcde</span></span><br><span class="line">        <span class="comment">//`abstract void writer(char[] cbuf,int off,int len)`：写入字符数组的某一部分，off是数组的开始索引，len是写的字符个数。</span></span><br><span class="line">        fileWriter.write(cs,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//abc</span></span><br><span class="line">        <span class="comment">//`void writer(String str)`：写入字符串。</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        <span class="comment">//`void writer(String str，int off,int len)`：写入字符串的某一部分，off是字符串的开始索引，len是写的字符个数。</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;Java&quot;</span>,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.续写和换行</strong>：操作类似于FileOutputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Writer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//使用文件名称创建流对象，可续写数据</span></span><br><span class="line">        FileWriter fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\4.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//写出字符串</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">        <span class="comment">//换行</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        <span class="comment">//写出字符串</span></span><br><span class="line">        fileWriter.write(<span class="string">&quot;JAVA&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。当我们单纯读或写文本文件时，使用字符流 其他情况使用字节流。</p></blockquote><hr><h1 id="第四章-IO异常的处理"><a href="#第四章-IO异常的处理" class="headerlink" title="第四章    IO异常的处理"></a>第四章    IO异常的处理</h1><hr><h3 id="JDK7前处理"><a href="#JDK7前处理" class="headerlink" title="JDK7前处理"></a>JDK7前处理</h3><p>之前的练习，我们一直把异常抛出，而实际开发中并不能这样处理，建议使用<code>try...catch...finally</code>代码块，处理异常部分。</p><p>在jdk1.7之前使用<code>try...catch...finally</code>处理流中的异常</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能会产生出异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类变量 变量名)&#123;</span><br><span class="line">    异常的处理逻辑</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    一定会指定的代码</span><br><span class="line">    资源释放</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo06TryCatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01TryCatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//提高变量fileWriter的作用域,让finally可以使用</span></span><br><span class="line">        FileWriter fileWriter=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用文件名称创建流对象，可续写数据</span></span><br><span class="line">            fileWriter =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\4.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//写出字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;博客&quot;</span>);</span><br><span class="line">            <span class="comment">//换行</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="comment">//写出字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;JAVA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="comment">//异常的处理逻辑</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//创建对象失败了,fileWriter的默认值就是null,null是不能调用方法的,会抛出Null.PointerException ,需要增加一个判断,不是null再把资源释放。</span></span><br><span class="line">            <span class="keyword">if</span> (fileWriter!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//关闭资源</span></span><br><span class="line">                    fileWriter.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK7的处理-扩展知识点了解内容"><a href="#JDK7的处理-扩展知识点了解内容" class="headerlink" title="JDK7的处理(扩展知识点了解内容)"></a>JDK7的处理(扩展知识点了解内容)</h3><p><strong>JDK7的新特性</strong><br>在try的后边可以增加一个(),在括号中可以定义流对象那么这个流对象的作用域就在try中有效<br>try中的代码执行完毕,会自动把流对象释放,不用写finally</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(定义流对象；定义流对象...)&#123;</span><br><span class="line">    可能会产生出异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类变量 变量名)&#123;</span><br><span class="line">    异常的处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo06TryCatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02JDK7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\1.png&quot;</span>);</span><br><span class="line">             FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\1.png&quot;</span>);</span><br><span class="line">        )&#123;<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(len);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="comment">//异常的处理逻辑</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK9的改进-扩展知识点了解内容"><a href="#JDK9的改进-扩展知识点了解内容" class="headerlink" title="JDK9的改进(扩展知识点了解内容)"></a>JDK9的改进(扩展知识点了解内容)</h3><p><strong>JDK9新特性</strong><br>try的前边可以定义流对象<br>在try后边的()中可以直接引入流对象的名称(变量名)<br>在try代码执行完毕之后,流对象也可以释放掉,不用写finally</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A a =<span class="keyword">new</span> A();</span><br><span class="line">B b =<span class="keyword">new</span> B();</span><br><span class="line"><span class="keyword">try</span>(a;b)&#123;</span><br><span class="line">    可能会产生出异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类变量 变量名)&#123;</span><br><span class="line">    异常的处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo06TryCatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03JDK9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\1.png&quot;</span>);</span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\1.png&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (fis;fos)&#123;</span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        fos.write(&quot;97&quot;);//Stream Closed  流已经关闭了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第五章-属性集"><a href="#第五章-属性集" class="headerlink" title="第五章    属性集"></a>第五章    属性集</h1><hr><h2 id="5-1概述"><a href="#5-1概述" class="headerlink" title="5.1概述"></a>5.1概述</h2><p><code>java.util.Properties</code>继承于<code>Hashtable</code>，来表示一个持久的属性集。<code>java.util.Properties集合extends Hashtable&lt;k, v&gt; implements Map&lt;k , v&gt;</code>，它使用键值结构存储数据，<code>Properties</code>集合是一个双列集合, <code>key</code>和<code>value</code>默认都是字符串，该类也被许多Java类使用，比如获取系统属性时，<code>System.getProperties</code>方法返回一个<code>Properties</code>对象。</p><p><code>Properties</code>集合是唯一一个和IO流相结合的集合。</p><ul><li>可以使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</li><li>可以使用Properties集合中的方法Load,把硬盘中保存的文件(键值对),读取到集合中使用</li></ul><hr><h2 id="5-2Properties类"><a href="#5-2Properties类" class="headerlink" title="5.2Properties类"></a>5.2Properties类</h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><p><code>Properties()</code>  创建一个没有默认值的空属性列表。 </p><p><code>Properties(Properties defaults)</code>  创建具有指定默认值的空属性列表。 </p><h3 id="基本的储存方法"><a href="#基本的储存方法" class="headerlink" title="基本的储存方法"></a>基本的储存方法</h3><p><strong>Properties集合有一些操作字符串的特有方法</strong></p><ul><li>object setProperty(String key, String value）：调用Hashtable 的方法 put。</li><li>string getProperty(String key)：通过key找到value值,此方法相当于Nap集合中的get(key)方法</li><li>set<string> stringPropertyNames()：返回此属性列表中的键集，其中该键及其对应值是字符串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo07Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Properties</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//object setProperty(String key, String value）：调用Hashtable 的方法 put。</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小林&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小李&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        System.out.println(properties);<span class="comment">//&#123;小林=15, 小李=20, 小明=19&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//set&lt;string&gt; stringPropertyNames()：返回此属性列表中的键集，其中该键及其对应值是字符串。</span></span><br><span class="line">        Set&lt;String&gt; set = properties.stringPropertyNames();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.print(iterator.next());<span class="comment">//小林小李小明</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        string getProperty(String key)：通过key找到value值,此方法相当于Nap集合中的get(key)方法</span></span><br><span class="line">        String s = properties.getProperty(<span class="string">&quot;小林&quot;</span>);</span><br><span class="line">        System.out.println(s);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果输入的Key不存在则返回null</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s1 = properties.getProperty(scanner.next());</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="store方法与load方法"><a href="#store方法与load方法" class="headerlink" title="store方法与load方法"></a>store方法与load方法</h3><p><strong>stroe方法</strong></p><p>可以使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储.</p><ul><li>void store ( outputStream out,String comments)</li><li>void store (iriter wuriter,String comments)</li></ul><p>参数：</p><p>OutputStream out：字节输出流，不能写入中文</p><p>Writer writer：字符输出流，可以写中文</p><p>String comments：注释，用来解释说明保存的文件是做什么用的，不能使用中文，会产生乱码，默认是Unicode编码，一般使用”空字符串”。</p><p>使用步骤:</p><ul><li>创建Properties集合对象,添加数据</li><li>创建字节输出流/字符输出流对象,构造方法中绑定要输出的目的地</li><li>使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo07Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02PropertiesStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Properties集合对象,添加数据</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小林&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;小李&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节输出流/字符输出流对象,构造方法中绑定要输出的目的地</span></span><br><span class="line">        FileWriter fw =<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\4.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//使用Properties集合中的方法store,把集合中的临时数据,持久化写入到硬盘中存储</span></span><br><span class="line">        properties.store(fw,<span class="string">&quot;save data&quot;</span>);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#save data</span></span><br><span class="line"><span class="comment">//#Thu Aug 19 17:17:58 CST 2021</span></span><br><span class="line"><span class="comment">//小林=15</span></span><br><span class="line"><span class="comment">//小李=20</span></span><br><span class="line"><span class="comment">//小明=19</span></span><br></pre></td></tr></table></figure><p><strong>load方法</strong></p><p>可以使用Properties集合中的方法Load,把硬盘中保存的文件(键值对) ,读取到集合中使用</p><ul><li>void load( inputstream inStream)</li><li>void load ( Reader reader)</li></ul><p><strong>参数：</strong></p><ul><li>InputStream instream:字节输入流,不能读取含有中文的键值对</li><li>Reader reader:字符输入流,能读取含有中文的键值对</li></ul><p><strong>使用步骤：</strong></p><ul><li>创建Properties集合对象</li><li>使用Properties集合对象中的方法load读取保存键值对的文件</li><li>遍历Properties集合</li></ul><p><strong>注意：</strong></p><ul><li>存储键值对的文件中,键与值默认的连接符号可以使用=或者空格(其他符号)</li><li>存储键值对的文件中,可以使用#进行注释,被注释的键值对不会再被读取</li><li>存储键值对的文件中,键与值默认都是字符串,不用再加引号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo07Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03PropertiesLoad</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Properties集合对象</span></span><br><span class="line">        Properties properties =<span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//使用Properties集合对象中的方法load读取保存键值对的文件</span></span><br><span class="line">        FileReader fileReader =<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\4.txt&quot;</span>);</span><br><span class="line">        properties.load(fileReader);</span><br><span class="line">        fileReader.close();</span><br><span class="line">        <span class="comment">//遍历Properties集合</span></span><br><span class="line">        Set&lt;String&gt; set = properties.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key:set) &#123;</span><br><span class="line">            String property = properties.getProperty(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+property);</span><br><span class="line">            <span class="comment">//小林=15</span></span><br><span class="line">            <span class="comment">//小李=20</span></span><br><span class="line">            <span class="comment">//小明=19</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第六章-缓冲流"><a href="#第六章-缓冲流" class="headerlink" title="第六章    缓冲流"></a>第六章    缓冲流</h1><hr><h2 id="6-1概述"><a href="#6-1概述" class="headerlink" title="6.1概述"></a>6.1概述</h2><p>缓冲流，也叫高效流，是对4个基本的流的增强，按照数据类型分类：</p><ul><li><strong>字节缓冲流：</strong> <code>BufferedInputStream</code>，<code>BufferedOutputStream</code></li><li><strong>字符缓冲流：</strong> <code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写效率。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210819184022.png" alt="QQ截图20210819184022"></p><hr><h2 id="6-2字节缓冲流"><a href="#6-2字节缓冲流" class="headerlink" title="6.2字节缓冲流"></a>6.2字节缓冲流</h2><h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>** <code>public BufferedOutputStream(OutputStream out)</code>：创建一个新的缓冲输出流。**</li></ul><p><code>java.io.BufferedOutputStream extends OutputStream</code>                      Bufferedoutputstream:字节缓冲输出流</p><p>继承自父类的共性成员方法:</p><ul><li>public void close() :关闭此输出流并释放与此流相关联的任何系统资源。</li><li>public void flush( ):刷新此输出流并强制任何缓冲的输出字节被写出。</li><li>public void write(byte[ ] b):将b.length字节从指定的字节数组写入此输出流。</li><li>public void write(byte[ ] b， int off, int len):从指定的字节数组写入、len字节，从偏移量off开始输出到此输出流。</li><li>public abstract void write(int b):将指定的字节输出流。</li></ul><p><strong>构造方法：</strong></p><ul><li>BufferedOutputStream(OutputStream out)创建一个新的缓冲输出流，以将数据写入指定的底层输出流。</li><li>BufferedOutputStream(OutputStream out，int size)创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。</li></ul><p><strong>参数：</strong></p><ul><li>OutputStream out：字节输出流，我们可以传递FileOutputStream，缓冲流会给FileOutputStream增加一个缓冲区，提高FileOutputStream的写入效率</li><li>int size：指定缓冲流内部缓冲流区的大小，不指定默认</li></ul><p><strong>使用步骤(重点)</strong></p><ul><li>创建FileOutputStream对象，构造方法中绑定要输出的目的地。</li><li>创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率</li><li>使用BufferedOutputStream对象中的方法write，把数据写入到内部缓冲区中</li><li>使用BufferedOutputStream对象中的方法flush，把内部缓冲区的数据，刷新到文件中</li><li>释放资源(会现调用flush方法刷新数据，第4步可以省略)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BufferedOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line">        FileOutputStream fom =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\5.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率</span></span><br><span class="line">        BufferedOutputStream bof =<span class="keyword">new</span> BufferedOutputStream(fom);</span><br><span class="line">        <span class="comment">//使用BufferedOutputStream对象中的方法write，把数据写入到内部缓冲区中</span></span><br><span class="line">        bof.write(<span class="string">&quot;我们把数据写入文件中&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">//        bof.flush();//调用close方法时默认先调用flush方法刷新数据所以此步骤可以省略</span></span><br><span class="line">        bof.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>** <code>public BufferedInputStream(InputStream in)</code>：创建一个新的缓冲输入流。**</li></ul><p><code>java.io.BufferedInputstream extends Inputstream</code>                         BufferedInputstream :字节缓冲输入流</p><p>继承自父类的共性成员方法:</p><ul><li><code>public void close()</code>：关闭此输入流并释放与此流相关联的任何系统资源。</li><li><code>public abstract int read()</code>：从输入流读取数据的下一个字节。</li><li><code>public int read(byte[] b)</code>：从输入流中读取一些字节数，并将它们存储到字节数组b中。</li></ul><p><strong>构造方法：</strong></p><ul><li>BufferedInputStreom(InputStream in)：创建一个BufferedInputStream并保存其参数，即输入流 in，以便将来使用。</li><li>BufferedInputStream(Inputstream in，int size)：创建具有指定缓冲区大小的 BufferedInputStream并保存其参数，即输入流in，以便将来使用。</li></ul><p><strong>参数：</strong></p><ul><li>InputStream in：字节输入流，我们可以传递FileInputStream，缓冲流会给FileInputStream增加一个缓冲区，提高FileInputStream的读取效率</li><li>int size：指定缓冲流内部缓冲流区的大小，不指定默认</li></ul><p><strong>使用步骤(重点)</strong></p><ul><li>创建FileInputStream对象，构造方法中绑定要读取的数据源。</li><li>创建BufferedInputStream对象，构造方法中传递FileInputStream对象，提高FileInputStream对象的读取效率</li><li>使用BufferedInputStream对象中的方法read，读取文件</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BufferedInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\5.txt&quot;</span>);</span><br><span class="line">        BufferedInputStream bis =<span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();<span class="comment">//关闭bis时fis自动关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h3><p><strong>文件复制的步骤：</strong></p><ul><li>创建字节缓冲输入流对象,构造方法中传递字节输入流</li><li>创建字节缓冲输出流对象,构造方法中传递字节输出流</li><li>使用字节缓冲输入流对象中的方法read,读取文件</li><li>使用字节缓冲输出流中的方法write,把读取的数据写入到内部缓冲区中</li><li>释放资源(会先把缓冲区中的数据,刷新到文件中)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo02CopyFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01CopeFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s=System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//创建字节缓冲输入流对象,构造方法中传递字节输入流</span></span><br><span class="line">        BufferedInputStream bis =<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\1.png&quot;</span>));</span><br><span class="line">        <span class="comment">//创建字节缓冲输出流对象,构造方法中传递字节输出流</span></span><br><span class="line">        BufferedOutputStream bos =<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\1.png&quot;</span>));</span><br><span class="line">        <span class="comment">//使用字节缓冲输入流对象中的方法read,读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//使用字节缓冲输出流中的方法write,把读取的数据写入到内部缓冲区中</span></span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源(会先把缓冲区中的数据,刷新到文件中)</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        <span class="keyword">long</span> e =System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span>+(e-s)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-3字符缓冲流"><a href="#6-3字符缓冲流" class="headerlink" title="6.3字符缓冲流"></a>6.3字符缓冲流</h2><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>** <code>public BufferedWriter(Writer out)</code>：创建一个新的缓冲输出流。**</li></ul><p><strong>构造方法：</strong></p><ul><li>Bufferediwriter(writer out）创建一个使用默认大小输出缓冲区的缓冲字符输出流。</li><li>Bufferedwriter(writer out, int sz）创建一个使用给定大小输出缓冲区的新缓冲字符输出流。</li></ul><p><strong>参数：</strong></p><ul><li>writer out:字符输出流，我们可以传递Filewriter ,缓冲流会给FiLewriter增加一个缓冲区,提高FiLewriter的写入效率</li><li>int sz:指定缓冲区的大小,不与默认大小</li></ul><p><strong>特有方法：</strong></p><p>BufferedWriter : <code>public void newLine()：</code>写一行行分隔符,由系统属性定义符号。</p><p><strong>使用步骤(重点)</strong></p><ul><li>创建字符缓冲输出流对象,构造方法中传递字符输出流</li><li>调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中</li><li>调用字符缓冲输出流中的方法flush,把内存缓冲区中的数据,刷新到文件中</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03BufferedWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象,构造方法中传递字符输出流</span></span><br><span class="line">        BufferedWriter bw =<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\6.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;我们把数据写入文件中&quot;</span>);</span><br><span class="line">            <span class="comment">//调用字符缓冲输出流中的方法flush,把内存缓冲区中的数据,刷新到文件中</span></span><br><span class="line"><span class="comment">//            bw.write(&quot;\r\n&quot;);</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.flush();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>** <code>public BufferedReader(Reader in)</code>：创建一个新的缓冲输入流。**</li></ul><p><strong>构造方法：</strong></p><ul><li><code>BufferedReader(Reader in)：</code>创建一个使用认大小输入缓冲区的缓冲字符输入流。</li><li><code>BufferedReader (Reader in, int sz)：</code>创建一个使用指定大小输入缓冲区的缓冲字符输入流。</li></ul><p><strong>参数：</strong></p><ul><li>Reader in：字符输入流，我们可以传递FileReader ,缓冲流会给FiLeReader增加一个缓冲区,提高FiLeReader的读取效率。</li><li>int sz:指定缓冲区的大小,不与默认大小</li></ul><p><strong>特有方法：</strong></p><p>BufferedReader : <code>public string readLine()：</code>读一行文字。</p><p>读取一个文本行。通过下列字符之一即可认为某行已终止:换行(‘\n’)、回车（’\r’）或回车后直接跟着换行。</p><p>返回:<br>包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回null。</p><p>抛出:<br>IOException -如果发生I/o错误。</p><p><strong>使用步骤(重点)</strong></p><ul><li>创建字符缓冲输入流对象,构造方法中传递字符输入流</li><li>使用字符缓冲输入流对象中的方法read/readline读取文本</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04BufferedReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br =<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\6.txt&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li>BufferedWriter : <code>public void newLine()：</code>写一行行分隔符,由系统属性定义符号。</li></ul><blockquote><p>println方法调用的就是 <code>public void newLine()：</code></p></blockquote><ul><li>BufferedReader : <code>public string readLine()：</code>读一行文字。</li></ul><hr><h2 id="6-4练习：文本排序"><a href="#6-4练习：文本排序" class="headerlink" title="6.4练习：文本排序"></a>6.4练习：文本排序</h2><p>请将文本信息恢复顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line">8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎﹔陛下亦宜自谋，以咨锻善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line">4 .将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line">2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line">1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">9.今当远离，临表涕零，不知所言。</span><br><span class="line">6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line">7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line">5.亲贤臣，远小人，此先汉所以兴隆也;亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ul><li>创建一个HashMap集合对象,可以:存储每行文本的序号(1,2,3,.. ) ;value:存储每行的文本</li><li>创建字符缓冲输入流对象,构造方法中绑定字符输入流</li><li>创建字符缓冲输出流对象,构造方法中绑定字符输出流</li><li>使用字符缓冲输入流中的方法readline,逐行读取文本</li><li>对读取到的文本进行切割,获取行中的序号和文本内容</li><li>把切割好的序号和文本的内容存储到HashMap集合中(key序号是有序的,会自动排序1,2,3,4..)</li><li>遍历HashMap集合,获取每一个键值对</li><li>把每一个键值对,拼接为一个文本行</li><li>把拼接好的文本,使用字符缓冲输出流中的方法write,写入到文件中</li><li>释放资源</li></ul><h3 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo01BufferedStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个HashMap集合对象,Key:存储每行文本的序号(1,2,3,.. ) ;value:存储每行的文本</span></span><br><span class="line">        HashMap&lt;String,String&gt; hashMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象,构造方法中绑定字符输入流</span></span><br><span class="line">        BufferedReader br =<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\6.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象,构造方法中绑定字符输出流</span></span><br><span class="line">        BufferedWriter bw =<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\7.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用字符缓冲输入流中的方法readline,逐行读取文本</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//对读取到的文本进行切割,获取行中的序号和文本内容</span></span><br><span class="line">            String[] arr = line.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">            <span class="comment">//把切割好的序号和文本的内容存储到HashMap集合中(key序号是有序的,会自动排序1,2,3,4..)</span></span><br><span class="line">            hashMap.put(arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历HashMap集合,获取每一个键值对</span></span><br><span class="line">        <span class="keyword">for</span> (String key:hashMap.keySet()) &#123;</span><br><span class="line">            String value = hashMap.get(key);</span><br><span class="line">            <span class="comment">//把每一个键值对,拼接为一个文本行</span></span><br><span class="line">            line=key+<span class="string">&quot;.&quot;</span>+value;</span><br><span class="line">            <span class="comment">//把拼接好的文本,使用字符缓冲输出流中的方法write,写入到文件中</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();<span class="comment">//写换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第七章-转换流"><a href="#第七章-转换流" class="headerlink" title="第七章    转换流"></a>第七章    转换流</h1><hr><h2 id="7-1字符编码和字符集"><a href="#7-1字符编码和字符集" class="headerlink" title="7.1字符编码和字符集"></a>7.1字符编码和字符集</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong>。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong>。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p>编码：字符(能看懂的)—&gt;字节(看不懂的)</p><p>解码：字节(看不懂的)—&gt;字符(能看懂的)</p><ul><li>**字符编码<code>Character Encoding</code>**：就是一套自然语言的字符与二进制数之间的对应规则。</li></ul><p>编码表：生活中文字和计算机中二进制的对应规则。</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li>**字符集<code>Charset</code>**：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820082714.png" alt="QQ截图20210820082714"></p><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就制定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><strong>ASSII字符集：</strong></li></ul><p>1.ASCll ( American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符(回车键、退格、换行键等）和可显示字符(英文大小写字符、阿拉伯数字和西文符号)。</p><p>2.基本的ASCII字符集，使用7位( bits )表示一个字符，共128字符。ASCII的扩展字符集使用8位( bits )表示一个字符，共256字符，方便支持欧洲常用字符。</p><ul><li><strong>ISO-8859-1字符集：</strong></li></ul><p>1.拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</p><p>2.ISO-5559-1使用单字节编码，兼容ASCII编码。</p><ul><li><strong>GBxxx字符集：</strong></li></ul><p>1.GB就是国标的意思，是为了显示中文而设计的一套字符集。</p><p>2.GB2312∶简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p><p>3.GBK∶最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了<br>21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</p><p>4.GB18030∶最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</p><ul><li><strong>Unicode字符集：</strong></li></ul><p>1.Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</p><p>2.它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</p><p>3.UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组(IETF ） 要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则∶</p><ul><li>128个US-ASCl字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。</li><li>大部分常用字(含中文)，使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ul><hr><h2 id="7-2编码引出的问题"><a href="#7-2编码引出的问题" class="headerlink" title="7.2编码引出的问题"></a>7.2编码引出的问题</h2><p>在IDEA中，使用<code>FileReader</code>读取项目中的文本文件。由于IDEA的设置，都是默认的UTF-8编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01FileReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr =<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\11.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) len);<span class="comment">//���</span></span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-3InputStreamReader类"><a href="#7-3InputStreamReader类" class="headerlink" title="7.3InputStreamReader类"></a>7.3InputStreamReader类</h2><p><code>java.io.InputStreamReader extends Reader</code></p><p>InputStreamReader：是字节流通向字符流的桥梁:它使用指定的charset读取字节并将其解码为字符。(解码:把看不懂的变成能看懂的)</p><p>继承自父类的共性成员方法:</p><ul><li>int read()：读取单个字符并返回。</li><li>int read ( char[ ] cbuf)：一次读取多个字符,将字符读入数组。</li><li>void close()：关闭该流并释放与之关联的所有资源。</li></ul><h3 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><code>InputStreamReader(InputStream in)</code>：创建一个使用默认字符集的字符流。</p></li><li><p><code>InputStreamReader(InputStream in,String charsetName)</code>：创建一个指定字符集的字符流。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputstreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputstream( <span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line">InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;in.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>InputStream in：字节输入流，用来读取文件中保存的字节</li><li>String charsetName：指定的编码表名称,不区分大小写,可以是utf-8/UTF-8,gbk/GBK….不指定默认使用UTF-8</li></ul><h3 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h3><p><strong>使用步骤(重点)</strong></p><ul><li>创建InputStreamReader对象,构造方法中传递字节输入流和指定的编码表名称</li><li>使用InputStreamReader对象中的方法read读取文件</li><li>释放资源</li></ul><blockquote><p>tips：构造方法中指定的编码表名称要和文件的编码相同,否则会发生乱码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03InputStreamReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        read_UTF_8();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read_UTF_8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建InputStreamReader对象,构造方法中传递字节输入流和指定的编码表名称</span></span><br><span class="line">        InputStreamReader isr =<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//使用InputStreamReader对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) len);<span class="comment">//你好</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-4OutputStreamWriter类"><a href="#7-4OutputStreamWriter类" class="headerlink" title="7.4OutputStreamWriter类"></a>7.4OutputStreamWriter类</h2><p><code>java.io.OutputStreamWriter extends Writer</code></p><p>OutputStreamWriter:是字符流通向字节流的桥梁:可使用指定的 charset将要写入流中的字符编码成字节。(编码:把能看懂的变成看不懂)</p><p>继续自父类的共性成员方法:</p><ul><li>void write(int c)写入单个字符。</li><li>void write(char[ ]  cbuf)写入字符数组。</li><li>abstract void write(char[ ] cbuf，int off， int len)写入字符数组的某一部分, off数组的开始索引, len写的字符个数。</li><li>void write ( String str)写入字符串。</li><li>void write( String str，int off， int len)写入字符串的某一部分, off字符串的开始索引, Len写的字符个数。</li><li>void flush ()刷新该流的缓冲。</li><li>void close()关闭此流，但要先刷新它。</li></ul><h3 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>OutputStreamWriter(OutputStream out)：</code>创建使用黑认字符编码的 OutputStreamWriter。</li><li><code>OutputStreamWriter(OutputStream out，String charsetName)：</code>创建使用指定字符集的OutputStreamWriter。</li></ul><p><strong>参数：</strong></p><ul><li>OutputStream out：字节输出流,可以用来写转换之后的字节到文件中</li><li>String charsetName：指定的编码表名称,不区分大小写,可以是utf-8/UTF-8,gbk/GBK….不指定默认使用UTF-8</li></ul><h3 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h3><p><strong>使用步骤(重点)</strong></p><ul><li>创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称</li><li>使用OutputStreamWriter对象中的方法write,把字符转换为字节存储缓冲区中(编码)</li><li>使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中(使用字节流写字节的过程)</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02OutputStreamWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        write_UTF_8();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_UTF_8</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称</span></span><br><span class="line">        OutputStreamWriter osw =<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//不指定默认是UTF-8</span></span><br><span class="line">        <span class="comment">//使用OutputStreamWriter对象中的方法write,把字符转换为字节存储缓冲区中(编码)</span></span><br><span class="line">        osw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        <span class="comment">//使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中(使用字节流写字节的过程)</span></span><br><span class="line">        osw.flush();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-5练习：转换文件编码"><a href="#7-5练习：转换文件编码" class="headerlink" title="7.5练习：转换文件编码"></a>7.5练习：转换文件编码</h2><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><ul><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ul><h3 id="案例实现-2"><a href="#案例实现-2" class="headerlink" title="案例实现"></a>案例实现</h3><p><strong>使用步骤(重点)</strong></p><ul><li>创建InputStreamReader对象，构造方法中传递字节输入流和指定的编码表名称GBK</li><li>创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称UTF-8</li><li>使用InputStreamReader对象中的方法read读取文件</li><li>使用OutputStreamWriter对象中的方法write,把读取的数据写入到文件中</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo03ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//创建InputStreamReader对象，构造方法中传递字节输入流和指定的编码表名称GBK</span></span><br><span class="line">        InputStreamReader isr =<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\11.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">//创建OutputStreamWriter对象,构造方法中传递字节输出流和指定的编码表名称UTF-8</span></span><br><span class="line">        OutputStreamWriter osw =<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\12.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//使用InputStreamReader对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//使用OutputStreamWriter对象中的方法write,把读取的数据写入到文件中</span></span><br><span class="line">            osw.write(len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第八章-序列化"><a href="#第八章-序列化" class="headerlink" title="第八章    序列化"></a>第八章    序列化</h1><hr><h2 id="8-1概述"><a href="#8-1概述" class="headerlink" title="8.1概述"></a>8.1概述</h2><p>Java提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>，<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。</p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>，<code>对象的类型</code>和<code>对象中存储的属性</code>信息，都可以用来在内存中创建对象。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820125126.png" alt="QQ截图20210820125126"></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820125835.png" alt="QQ截图20210820125835"></p><hr><h2 id="8-2ObjectOutputStream类"><a href="#8-2ObjectOutputStream类" class="headerlink" title="8.2ObjectOutputStream类"></a>8.2ObjectOutputStream类</h2><p><code>java.io.ObjectOutputStream</code>类，将Java对象的原始数据类型写出到文件，实现对象的持久储存。ObjectOutputStream：对象的序列化流。</p><h3 id="构造方法-9"><a href="#构造方法-9" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public 0bjectOutputStream(OutputStream out) </code>:创建一个指定OutputStream的ObjectOutputStream。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>OutputStream out：字节输出流</li></ul><p><strong>特有的成员方法：</strong></p><ul><li>void writeObject(Object obj)：将指定的对象写入ObjectOutputStream。</li></ul><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><p>1.一个对象要想序列化，必须满足两个条件:</p><ul><li>该类必须实现<code>java.io.Serializable</code>接口，<code>Serializable</code>是一个标记接口(<strong>里面是空的</strong>)，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code>关键字修饰。</li></ul><p>1.static关键字:静态关键字<br>静态优先于非静态加载到内存中(静态优先于对象进入到内存中)被static修饰的成员变量不能被序列化的,序列化的都是对象</p><p>2.transient关键字:瞬态关键字<br>被transient修饰成员变量,不能被序列化</p><p><strong>使用步骤(重点)</strong></p><ul><li>创建ObjectOutputStream对象,构造方法中传递字节输出流</li><li>使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ObjectOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ObjectOutputStream对象,构造方法中传递字节输出流</span></span><br><span class="line">        ObjectOutputStream oos =<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-3ObjectInputStream类"><a href="#8-3ObjectInputStream类" class="headerlink" title="8.3ObjectInputStream类"></a>8.3ObjectInputStream类</h2><p>ObjectInputStream：对象的反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。</p><p>作用：把文件中保存的对象，以流的方式读取出来使用。</p><h3 id="构造方法-10"><a href="#构造方法-10" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ObjectInputStream(InputStream in):</code>创建一个指定InputStream的ObjectInputStream。</li></ul><p><strong>参数：</strong></p><ul><li>InputStream in：字节输入流</li></ul><p><strong>特有的成员方法：</strong></p><ul><li><code>Object readObject()：</code>从ObjectInputStream读取对象</li></ul><h3 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h3><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用ObjectInputStream读取对象的方法:</p><ul><li><code>public final Object readObject ()∶</code>读取一个对象。</li></ul><p><strong>使用步骤(重点)</strong></p><ul><li>创建ObjectInputStream对象,构造方法中传递字节输入流</li><li>使用ObjectInputStream对象中的方法readObject读取保存对象的文件</li><li>释放资源</li><li>使用读取出来的对象(打印)</li></ul><blockquote><p>tips：read0bject方法声明抛出了classNotFoundException(class文件找不到异常)当不存在对象的class文件时抛出此异常<br>反序列化的前提:</p><ul><li>类必须实现Serializable</li><li>必须存在类对应的class文件</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ObjectInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ObjectInputStream对象,构造方法中传递字节输入流</span></span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用ObjectInputStream对象中的方法readObject读取保存对象的文件</span></span><br><span class="line">        Object o = ois.readObject();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="comment">//使用读取出来的对象(打印)</span></span><br><span class="line">        System.out.println(o);<span class="comment">//Person&#123;name=&#x27;小明&#x27;, age=19&#125;</span></span><br><span class="line">        Person p=(Person)o;</span><br><span class="line">        System.out.println(p.getName()+p.getAge());<span class="comment">//小明19</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个ClassNotFoundException异常。</strong></p><h3 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a>反序列化操作2</h3><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。发生这个异常的原因如下∶</strong></p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配</li><li>该类包含未知数据类型</li><li>该类没有可访问的无参数构造方法</li></ul><p><code>Serializable</code>接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code>该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210820135233.png" alt="QQ截图20210820135233"></p><p>在Person类中添加一个自定义的序列号，序列化之后再对Person类修改时反序列化时就不会抛出<code>InvalidClassException</code>异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID =<span class="number">1L</span>;<span class="comment">//在类里方法外添加</span></span><br></pre></td></tr></table></figure><hr><h2 id="8-4练习：序列化集合"><a href="#8-4练习：序列化集合" class="headerlink" title="8.4练习：序列化集合"></a>8.4练习：序列化集合</h2><ul><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code>，并遍历集合，打印对象信息。</li></ul><h3 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h3><ul><li>定义一个存储Person对象的ArrayList集合</li><li>往Arraylist集合中存储Person对象</li><li>创建一个序列化流ObjectOutputStream对象</li><li>使用ObjectOutputStream对象中的方法writeObject ,对集合进行序列化</li><li>创建一个反序列化ObjectInputStream对象</li><li>使用ObjectInputStream对象中的方法readObject读取文件中保存的集合</li><li>把Object类型的集合转换为Arraylist类型</li><li>遍历Arraylist集合</li><li>释放资源</li></ul><h3 id="案例实现-3"><a href="#案例实现-3" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo04ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个存储Person对象的ArrayList集合</span></span><br><span class="line">        ArrayList&lt;Person&gt; arrayList =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往Arraylist集合中存储Person对象</span></span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小李&quot;</span>,<span class="number">17</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小林&quot;</span>,<span class="number">16</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小刚&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小金&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Person(<span class="string">&quot;小吴&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        <span class="comment">//创建一个序列化流ObjectOutputStream对象</span></span><br><span class="line">        ObjectOutputStream oos =<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\list.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用ObjectOutputStream对象中的方法writeObject ,对集合进行序列化</span></span><br><span class="line">        oos.writeObject(arrayList);</span><br><span class="line">        <span class="comment">//创建一个反序列化ObjectInputStream对象</span></span><br><span class="line">        ObjectInputStream ois =<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\list.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//使用ObjectInputStream对象中的方法readObject读取文件中保存的集合</span></span><br><span class="line">        Object o = ois.readObject();</span><br><span class="line">        <span class="comment">//把Object类型的集合转换为Arraylist类型</span></span><br><span class="line">        ArrayList&lt;Person&gt; arrayList1=(ArrayList)o;</span><br><span class="line">        <span class="comment">//遍历Arraylist集合</span></span><br><span class="line">        Iterator&lt;Person&gt; iterator =arrayList1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小明&#x27;, age=19&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小李&#x27;, age=17&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小林&#x27;, age=16&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小刚&#x27;, age=22&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小金&#x27;, age=19&#125;</span></span><br><span class="line">            <span class="comment">//Person&#123;name=&#x27;小吴&#x27;, age=18&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第九章-打印流"><a href="#第九章-打印流" class="headerlink" title="第九章    打印流"></a>第九章    打印流</h1><hr><h2 id="9-1概述"><a href="#9-1概述" class="headerlink" title="9.1概述"></a>9.1概述</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><hr><h2 id="9-2PrintStream类"><a href="#9-2PrintStream类" class="headerlink" title="9.2PrintStream类"></a>9.2PrintStream类</h2><p><code>java.io.Printstream:</code>打印流<br>PrintStream：为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。</p><p>PrintStream特点:</p><ul><li>只负责数据的输出,不负责数据的读取</li><li>与其他输出流不同，PrintStream永远不会抛出IOException</li><li>有特有的方法, print , println<br>void print(任意类型的值)<br>void println(任意类型的值并换行)</li></ul><h3 id="构造方法-11"><a href="#构造方法-11" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>PrintStream(FiLe file):输出的目的地是一个文件</li><li>PrintStream(OutputStream out):输出的目的地是一个字节输出流</li><li>PrintStream(String fileName):输出的目的地是一个文件路径</li></ul><p><code>PrintStream extends OutputStream</code>继承自父类的成员方法:</p><ul><li><code>public void close( ) :</code>关闭此输出流并释放与此流相关联的任何系统资源。</li><li><code>public void flush():</code>刷新此输出流并强制任何缓冲的输出字节被写出。</li><li><code>public void write(byte[] b):</code>将b.length字节从指定的字节数组写入此输出流。</li><li><code>public void write(byte[] b，int off, int len) :</code>从指定的字节数组写入<code>len</code>字节，从偏移量<code>off</code>开始输出到此输出流。</li><li><code>public abstract void write(int b):</code>将指定的字节输出流。</li></ul><blockquote><p>tips：</p><ul><li>如果使用继承自父类的write方法写数据,那么查看数据的时候会查询编码表97-&gt;a</li><li>如果使用自己特有的方法print/println方法写数据，写的数据原样输出97-&gt;97</li></ul></blockquote><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;ps.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h3><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p><p>使用<code>System.setOut</code>方法改变输出语句的目的地改为参数中传递的打印流的目的地</p><ul><li>static void setOut (PrintStream out)<br>重新分配“标准”输出流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.priv.demo05PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是在控制台输出的&quot;</span>);</span><br><span class="line">        PrintStream ps =<span class="keyword">new</span> PrintStream(<span class="string">&quot;C:\\Users\\97189\\Desktop\\s\\1.txt&quot;</span>);</span><br><span class="line">        System.setOut(ps);<span class="comment">//把输出语句的自的地改变为打印流的目的地</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我在打印流的目的地输出&quot;</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;第一章-IO概述&quot;&gt;&lt;a href=&quot;#第一章-IO概述&quot; class=&quot;headerlink&quot; title=&quot;第一章    IO概述&quot;&gt;&lt;/a&gt;第一章    IO概述&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1什么是IO&quot;&gt;&lt;a href=&quot;#1-1什么</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>线程</title>
    <link href="https://www.stq555.com/2022/01/11/%E7%BA%BF%E7%A8%8B/"/>
    <id>https://www.stq555.com/2022/01/11/%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-01-11T14:33:11.000Z</published>
    <updated>2022-01-11T15:16:52.980Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="第一章-多线程"><a href="#第一章-多线程" class="headerlink" title="第一章 多线程"></a>第一章 多线程</h1><p>学习的程序在没有跳转语句的前提下，都是由上至下依次执行，那么现在详设计一个程序，边打游戏边听歌，要解决这个问题，就需要使用多进程或多线程</p><hr><h2 id="1-1并发与并行"><a href="#1-1并发与并行" class="headerlink" title="1.1并发与并行"></a>1.1并发与并行</h2><ul><li><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生。</li><li><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生。</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708223907.png"></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708224345.png"></p><blockquote><p>注意：单核处理器的计算机肯定是不能并行处理多个任务的，只能是多个任务在单个CPU上并发运行。同理，线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><hr><h2 id="1-2线程与进程"><a href="#1-2线程与进程" class="headerlink" title="1.2线程与进程"></a>1.2线程与进程</h2><ul><li><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</li></ul><p><strong>进入到内存的程序叫进程</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708231151.png"></p><ul><li><strong>线程</strong>：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</li></ul><p><strong>应用程序到CPU的执行路径叫做线程</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708232046.png"></p><blockquote><p>tips：一个程序运行后至少有一个进程，一个进程可以包含多个线程</p></blockquote><p><strong>线程调度</strong></p><ul><li><p>分时调度</p><p>所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间。</p></li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210708235938.png"></p><ul><li><p>抢先式调度</p><p>优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p></li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210709000000.png"></p><p><strong>主线程</strong></p><p>执行main方法的线程</p><p>单线程程序：java程序中只有一个线程</p><p>执行从main方法开始，从上到下依次执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MainThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        p1.run();</span><br><span class="line"></span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;小林&quot;</span>);</span><br><span class="line">        p2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(name+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210709105448.png"></p><hr><h2 id="1-3创建线程方式一"><a href="#1-3创建线程方式一" class="headerlink" title="1.3创建线程方式一"></a>1.3创建线程方式一</h2><hr><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。</p><p><strong>第一种方法</strong>：Java中通过<strong>继承Thread类</strong>来创建并启动多线程的步骤如下：</p><ul><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务，因此把run()方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的start()方法来启动该线程</li></ul><p>void start()使该线程开始执行；java虚拟机调用该线程的run方法。结果是两个线程并发的运行，当前线程(main方法)和另一个线程(创建的新线程，执行其run方法)。多次启动一个线程是非法的，特别是当前线程已经结束执行后，不能再重新启动，java程序属于抢占式调度，哪个线程的优先级高，哪个线程就优先执行，同一优先级，随机选择一个执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      MyThread mt=<span class="keyword">new</span> MyThread();</span><br><span class="line">      mt.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第二章-线程"><a href="#第二章-线程" class="headerlink" title="第二章 线程"></a>第二章 线程</h1><hr><h2 id="2-1多线程原理"><a href="#2-1多线程原理" class="headerlink" title="2.1多线程原理"></a>2.1多线程原理</h2><p><strong>1.随机性打印结果</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210709111740.png"></p><p><strong>2.多线程内存图解</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210809181832.png"></p><hr><h2 id="2-2Thread类"><a href="#2-2Thread类" class="headerlink" title="2.2Thread类"></a>2.2Thread类</h2><p><strong>构造方法：</strong></p><ul><li><code>public Thread()</code>：分配一个新的线程对象。</li><li><code>public Thread(String name)</code>：分配一个指定名字的新的线程对象。</li><li><code>public Thread(Runnable target)</code>：分配一个带有指定目标的新的线程对象。</li><li><code>public Thread(Runnable target,String name)</code>：分配一个带有指定目标的并指定名字的新的线程对象。</li></ul><p><strong>常用方法：</strong></p><ul><li><code>public String getName()</code>：获取当前线程名称。</li><li><code>public void start()</code>：导致此线程开始执行；Java虚拟机调用此线程的run方法。</li><li><code>public void run()</code>：此线程要执行的任务在此处定义代码。</li><li><code>public static void sleep(long millis)</code>：使当前正在执行的线程以指定的毫秒数暂停(暂时停止执行)。</li><li><code>public static Thread currentThread()</code>：返回对当前正在执行的线程对象的引用</li></ul><p><strong>1.获取当前线程名称</strong></p><ul><li>使用Thread类中的方法getName()<br>String getName()返回该线程的名称。</li><li>可以先获取到当前正在执行的线程,使用线程中的方法getName()获取线程的名称<br>static Thread currentThread(）返回对当前正在执行的线程对象的引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread2 mt=<span class="keyword">new</span> MyThread2();</span><br><span class="line">        mt.start();<span class="comment">//Thread-0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line"><span class="comment">//        String name = getName();</span></span><br><span class="line"><span class="comment">//        System.out.println(name);</span></span><br><span class="line">        <span class="comment">//第二种方法</span></span><br><span class="line"><span class="comment">//        Thread thread = Thread.currentThread();</span></span><br><span class="line"><span class="comment">//        String name = thread.getName();</span></span><br><span class="line"><span class="comment">//        System.out.println(name);</span></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.设置线程的名称:(了解)</strong></p><ul><li>使用Thread类中的方法setName(名字)<br>void setName ( String name）改变线程名称，使之与参数name 相同。</li><li>创建一个带参数的构造方法，参数传递线程的名称;调用父类的带参构造方法,把线程名称传递给父类,让父类(Thread)给子线程起一个名字<br>Thread ( String name)分配新的 Thread 对象。</li></ul><p><strong>3.sleep</strong></p><p><code>public static void sleep(long millis)</code>：使当前正在执行的线程以指定的毫秒数暂停(暂时停止执行)。毫秒数结束后，线程继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Sleep</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模拟秒表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="comment">//使用Thread类的sleep方法让程序睡眠1秒钟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3创建线程方式二"><a href="#2-3创建线程方式二" class="headerlink" title="2.3创建线程方式二"></a>2.3创建线程方式二</h2><p>采用<code>java.lang.Runnable</code>，我们只需要重写run方法即可。</p><p>步骤：</p><ul><li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动线程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            RunnableImpl run =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">            Thread t =<span class="keyword">new</span> Thread(run);</span><br><span class="line">            t.start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4Thread和Runnable的区别"><a href="#2-4Thread和Runnable的区别" class="headerlink" title="2.4Thread和Runnable的区别"></a>2.4Thread和Runnable的区别</h2><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runnable接口的话，则很容易实现资源共享。</p><p><strong>总结：</strong></p><p><strong>实现Runnable接口比继承Thread类所具有的优势：</strong></p><p>1.适合多个相同的程序代码的线程去共享同一个资源。</p><p>2.可以避免Java中的单继承的局限性。</p><p>3.增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</p><p>4.线程池只能放入实现Runnable或Callable类线程，不能直接放入继承Thread的类。</p><blockquote><p>扩充：在Java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用Java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实就是在操作系统中启动了一个进程。</p></blockquote><hr><h2 id="2-5匿名内部类方式实现线程的创建"><a href="#2-5匿名内部类方式实现线程的创建" class="headerlink" title="2.5匿名内部类方式实现线程的创建"></a>2.5匿名内部类方式实现线程的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06InnerClassThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程的父类是Thread</span></span><br><span class="line">        <span class="comment">//new MyThread().start();</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="comment">//线程的接口Runnable</span></span><br><span class="line">        <span class="comment">//Runnable r =new RunnableImpl();//多态</span></span><br><span class="line">        Runnable t=<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="comment">//重写run方法，设置线程任务</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">       <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">       <span class="comment">//简化接口的方式</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第三章-线程安全"><a href="#第三章-线程安全" class="headerlink" title="第三章    线程安全"></a>第三章    线程安全</h1><hr><h2 id="3-1线程安全"><a href="#3-1线程安全" class="headerlink" title="3.1线程安全"></a>3.1线程安全</h2><p>如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><p>我们通过一个案例，演示线程的安全问题:</p><p>电影院要卖票，我们模拟电影院的卖票过程。假设要播放的电影是”“战狼三”，本次电影的座位共100个(本场电影只能卖100张票)。</p><p>我们来模拟电影院的售票窗口，实现多个窗口同时卖“葫芦娃大战奥特曼”这场电影票(多个窗口一起卖这100张票)</p><p>需要窗口，采用线程对象来模拟;需要票，Runnable接口子类来模拟</p><p>模拟票︰</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810131523.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo06.ThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo07.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   解决线程安全问题的第一种方案：使用同步代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个多个线程共享的票源</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line"><span class="comment">//     设置线程任务：卖票</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        使用死循环，让卖票操作重复执行</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//            先判断票是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//提高安全问题出现的概率，让程序睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>卖票案例出现了线程安全问题，卖出了不存在的票和重复的票。</p><hr><h2 id="3-2线程同步"><a href="#3-2线程同步" class="headerlink" title="3.2线程同步"></a>3.2线程同步</h2><p>当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。</p><p>要解决上述多线程并发访问一个资源的安全性问题：也就是解决重复票与不存在票问题，Java提供了同步机制(<strong>synchronized</strong>)来解决。</p><p>根据案例简述︰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>线程进入操作的时候，窗口<span class="number">2</span>和窗口<span class="number">3</span>线程只能在外等着，窗口<span class="number">1</span>操作结束，窗口<span class="number">1</span>和窗口<span class="number">2</span>和窗口<span class="number">3</span>才有机会进入代码去执行。也就是说在某个钱程修改共享资源的时候，其他线程不能修改该资源，等待修改完毕同步之后，才能去抢夺CPU资源，完成对应的操作，保证了数据的同步性，解决了线程不安全的现象。</span><br></pre></td></tr></table></figure><p>有三种方式完成同步操作：</p><ul><li>同步代码块</li><li>同步方法</li><li>锁机制</li></ul><hr><h2 id="3-3同步代码块"><a href="#3-3同步代码块" class="headerlink" title="3.3同步代码块"></a>3.3同步代码块</h2><ul><li><strong>同步代码块</strong>：<code>synchronized</code>关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。</li></ul><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">    需要同步操作的代码(访问了共享数据的代码)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同步锁</strong></p><p>对象的同步锁只是一个概念，可以想象为在对象上标记了一个锁。</p><p>1.锁对象 可以是任意类型。</p><p>2.多个线程对象 要使用同一把锁。</p><p>3.锁对象作用：把同步代码块锁住，只让一个线程在同步代码块中执行。</p><blockquote><p>注意：在任何时候，最多允许一个线程拥有同步锁，谁拿到锁就能进入代码块，其他的线程只能在外等着(BLOCKED)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo07.Synchronized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo07.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   解决线程安全问题的第一种方案：使用同步代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个多个线程共享的票源</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">     Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">//     设置线程任务：卖票</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        使用死循环，让卖票操作重复执行</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">            <span class="comment">//            先判断票是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//提高安全问题出现的概率，让程序睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810164723.png"></p><hr><h2 id="3-4同步方法"><a href="#3-4同步方法" class="headerlink" title="3.4同步方法"></a>3.4同步方法</h2><ul><li><strong>同步方法</strong>：使用synchronized修饰的方法，就叫做同步方法，保证A线程执行该方法的时候，其他线程只能在方法外等着。</li></ul><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同步锁是Who？</p><ul><li>对于非static方法，同步锁就是this</li><li>对于static方法，静态方法的锁对象是本类的class属性—&gt;calss文件对象(反射)</li></ul></blockquote><p>1.非静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo08.Synchronized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo08.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    解决线程安全问题的第二种方案：使用同步方法</span></span><br><span class="line"><span class="comment">    步骤：</span></span><br><span class="line"><span class="comment">        1.把访问了共享数据的代码抽取出来，放到一个方法中</span></span><br><span class="line"><span class="comment">        2.在方法上添加synchronized修饰符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            payTicket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">payTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo08.Synchronized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo08.Synchronized;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    解决线程安全问题的第二种方案：使用同步方法</span></span><br><span class="line"><span class="comment">    步骤：</span></span><br><span class="line"><span class="comment">        1.把访问了共享数据的代码抽取出来，放到一个方法中</span></span><br><span class="line"><span class="comment">        2.在方法上添加synchronized修饰符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            payTicket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">payTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(RunnableImpl.class)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5Lock锁"><a href="#3-5Lock锁" class="headerlink" title="3.5Lock锁"></a>3.5Lock锁</h2><p><code>java.util.concurrent.locks.Lock</code>机制提供了比<strong>synchronized</strong>代码块和<strong>synchronized</strong>方法更广泛的锁定操作，同步代码块/同步方法具有的功能Lock都有，除此之外更强大，更体现面向对象。</p><p>Lock锁也称同步锁，加锁与释放锁方法：</p><ul><li><code>public void lock()</code>：加同步锁</li><li><code>public void unlock()</code>：释放同步锁</li></ul><p>java.util.concurrent.locks.ReentrantLock impLements Lock接口</p><p><strong>使用步骤:</strong></p><ul><li>在成员位置创建一个ReentrantLock对象</li><li>在可能会出现安全问题的代码前调用Lock接口中的方法Lock获取锁</li><li>在可能会出现安全问题的代码后调用Lock接口中的方法unLock释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo09.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Ticket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      RunnableImpl mt =<span class="keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread t0 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t1 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      Thread t2 =<span class="keyword">new</span> Thread(mt);</span><br><span class="line">      t0.start();</span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo09.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 解决线程安全问题的第三种方案：使用Lock锁</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//1.在成员位置创建一个ReentrantLock对象</span></span><br><span class="line">    Lock l =<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            l.lock();</span><br><span class="line">            <span class="keyword">if</span> (ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    l.unlock();<span class="comment">//无论程序是否异常，都会把锁释放</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第四章-线程状态"><a href="#第四章-线程状态" class="headerlink" title="第四章    线程状态"></a>第四章    线程状态</h1><hr><h2 id="4-1线程状态概述"><a href="#4-1线程状态概述" class="headerlink" title="4.1线程状态概述"></a>4.1线程状态概述</h2><p>当线程被创建并启用后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。</p><p>在线程的生命周期中，API中<code>java.lang.Thread.State</code>这个枚举中给出了六种线程状态：</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810174734.png"></p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810174638.png"></p><hr><h2 id="4-2Timed-Waiting-计时等待"><a href="#4-2Timed-Waiting-计时等待" class="headerlink" title="4.2Timed Waiting(计时等待)"></a>4.2Timed Waiting(计时等待)</h2><p><strong>倒计时</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo05.Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Sleep</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模拟秒表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="comment">//使用Thread类的sleep方法让程序睡眠1秒钟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入TIMED_WAITING状态的一种常见情形是调用sleep方法，单独的线程也可以调用，不一定非要有协作关系。</li><li>为了让其他的线程有机会执行，可以将Thread.sleep()的调用<strong>放在线程run()之内</strong>。这样才能保证该线程执行过程中会睡眠。</li><li>sleep与锁无关，线程睡眠到期自动苏醒，并返回到Runnable(可运行)状态。</li></ul><blockquote><p>tips：sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始立刻执行。</p></blockquote><p>Timed Waiting线程状态图：</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810174841.png"></p><hr><h2 id="4-3BLOCKED-锁阻塞"><a href="#4-3BLOCKED-锁阻塞" class="headerlink" title="4.3BLOCKED(锁阻塞)"></a>4.3BLOCKED(锁阻塞)</h2><p>Blocked状态在API中的介绍为：一个正在阻塞等待一个监视器锁(锁对象)的线程处于这一状态。</p><p>如，线程A与线程B代码中使用同一锁，如果线程A获取到锁，线程A进入到Runnable状态，那么线程B就进入到Blocked锁阻塞状态。</p><p>这是由Runnable状态进入Blocked状态。除此Waiting以及Time Waiting状态也会在某种情况下进入阻塞状态。</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810175943.png"></p><hr><h2 id="4-4Waiting-无限等待"><a href="#4-4Waiting-无限等待" class="headerlink" title="4.4Waiting(无限等待)"></a>4.4Waiting(无限等待)</h2><p>Waiting状态在API中介绍为：一个正在无限期等待另一个线程执行一个特别的(唤醒)动作的线程处于这一状态。</p><p>Runnable—wait()—&gt;Waiting—notify()—&gt;Runnable</p><p><strong>等待唤醒案例:线程之间的通信</strong><br>        创建一个顾客线程(消费者):告知老板要的包子的种类和数量,调用wait方法,放弃cpu的执行,进入到WAITING状态(无限等待)</p><p>​        创建一个老板线程(生产者):花了5秒做包子,做好包子之后,调用notify方法,唤醒顾客吃包子</p><p>注意:<br>       顾客和老板线程必须使用同步代码块包裹起来,保证等待和唤醒只能有一个在执行</p><p>​       同步使用的锁对象必须保证唯—<br>​       只有锁对象才能调用wait和notify方法</p><p>Obejct类中的方法<br>void wait()<br>         在其他线程调用此对象的notify()方法或notifyAll()方法前，导致当前线程等待。</p><p>void notify()<br>         唤醒在此对象监视器上等待的单个线程。</p><p>​         会继续执行wait方法之后的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo10WaitAndNotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj =<span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;告知老板要的包子的种类和数量&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            obj.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//唤醒之后的代码</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;开吃！&quot;</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">          <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                      <span class="keyword">try</span> &#123;</span><br><span class="line">                          Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                          e.printStackTrace();</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                          System.out.println(<span class="string">&quot;老板5秒钟之后做好包子，告知顾客，可以吃包子了&quot;</span>);</span><br><span class="line">                          obj.notify();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>进入到Timelwaiting (计时等待)有两种方式</strong></p><ul><li>使用sleep(Long m)方法,在毫秒值结束之后,线程睡醒进入到RunnablLe/BLocked状态</li><li>使用wait(Long m)方法, wait方法如果在毫秒值结束之后,还没有被notify唤醒,就会自动醒来，线程睡醒进入到Runmable/Blocked状态</li></ul><p><strong>唤醒的方法:</strong></p><ul><li>void notify()：唤醒在此对象监视器上等待的单个线程。</li><li>void notifyAll()：唤醒在此对象监视器上等待的所有线程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo10WaitAndNotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj =<span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客1告知老板要的包子的种类和数量&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//唤醒之后的代码</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客1开吃！&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客2告知老板要的包子的种类和数量&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//唤醒之后的代码</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客2开吃！&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;老板5秒钟之后做好包子，告知顾客，可以吃包子了&quot;</span>);</span><br><span class="line"><span class="comment">//                        obj.notify();//如果有多个等待线程，随机唤醒一个</span></span><br><span class="line">                          obj.notifyAll();<span class="comment">//全部唤醒</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第五章-等待唤醒机制"><a href="#第五章-等待唤醒机制" class="headerlink" title="第五章    等待唤醒机制"></a>第五章    等待唤醒机制</h1><hr><h2 id="5-1线程间通讯"><a href="#5-1线程间通讯" class="headerlink" title="5.1线程间通讯"></a>5.1线程间通讯</h2><p><strong>概念：</strong>多个线程在处理同一个资源，但是处理的动作(线程的任务)却不相同。</p><p>比如：线程A用来生产商品，线程B用来购买商品，商品可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，那么线程A与线程B之间就存在线程通信问题。</p><p><strong>为什么要处理线程间通信：</strong></p><p>多个线程并发执行时，在默认情况下CPU是随机切换线程的，当我们需要多个线程来共同完成一件任务时，并且我们希望他们有规律的执行，那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p><p><strong>如何保证线程间通信有效利用资源：</strong></p><p>多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作。就是多个线程在操作同一份数据时，避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个线程能有效的利用资源。而这种手段即–<strong>等待唤醒机制</strong>。</p><hr><h2 id="5-2等待唤醒机制"><a href="#5-2等待唤醒机制" class="headerlink" title="5.2等待唤醒机制"></a>5.2等待唤醒机制</h2><p><strong>什么是等待唤醒机制</strong><br>这是多个线程间的一种<strong>协作</strong>机制。谈到线程我们经常想到的是线程间的**竞争 ( race )**，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。</p><p>就是在一个线程进行了规定操作后，就进入等待状态 ( <strong>wait()</strong>)，等待其他线程执行完他们的指定代码过后再将其唤醒( <strong>notify()</strong>) ;在有多个线程进行等待时，如果需要，可以使用**notifyAll()**来唤醒所有的等待线程。</p><p>wait/notify 就是线程间的一种协作机制。</p><p><strong>等待唤醒中的方法</strong><br>等待唤醒机制就是用于解决线程间通信的问题的，使用到的3个方法的含义如下︰</p><ul><li>wait :线程不再活动，不再参与调度，进入wait set中，因此不会浪费CPU资源，也不会去竞争锁了，这时的线程状态即是WAITING。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即是”<strong>通知( notify )</strong> “在这个对象上等待的线程队wait set中释放出来，重新进入到调度队列( ready queue )中</li><li>notify :则选取所通知对象的wait set中的一个线程释放;唤醒等待时间最长的那个线程。</li><li>notifyAll:则释放所通知对象的wait set 上的全部线程。</li></ul><blockquote><p>tips：哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以她需要再次尝试去获取锁(很可能面临其它线程的竞争），成功后才能在当初调用wait方法之后的地方恢复执行。</p><p>总结：</p><ul><li>如果能获取锁，线程就从WAITING状态变成RUNNABLE状态</li><li>否则，总wait set 出来，又进入entry set，线程就从WAITING状态又变成BLOCKED状态</li></ul></blockquote><p><strong>调用wait和notify方法需要注意的细节</strong></p><ul><li>wait方法与notify方法必须要由同一个锁对象调用。因为∶对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li><li>wait方法与notify方法是属于Object类的方法的。因为︰锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li><li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为∶必须要通过锁对象调用这2个方法。</li></ul><hr><h2 id="5-3生产者与消费者问题"><a href="#5-3生产者与消费者问题" class="headerlink" title="5.3生产者与消费者问题"></a>5.3生产者与消费者问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo11case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     shangPin sp=<span class="keyword">new</span> shangPin();</span><br><span class="line">     <span class="keyword">new</span> ThreadA(sp).start();</span><br><span class="line">     <span class="keyword">new</span> ThreadB(sp).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo11case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">shangPin</span> </span>&#123;</span><br><span class="line">    String goods;</span><br><span class="line">    String box;</span><br><span class="line">    <span class="keyword">boolean</span> flag =<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo11case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> shangPin sp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(shangPin sp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sp=sp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (sp)&#123;</span><br><span class="line">                <span class="keyword">if</span> (sp.flag=<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sp.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    sp.goods=<span class="string">&quot;aj1&quot;</span>;</span><br><span class="line">                    sp.box=<span class="string">&quot;塑料盒&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    sp.goods=<span class="string">&quot;af1&quot;</span>;</span><br><span class="line">                    sp.box=<span class="string">&quot;纸盒&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadA正在生产&quot;</span>+sp.goods+sp.box);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                sp.flag=<span class="keyword">true</span>;</span><br><span class="line">                sp.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadA已经生产好了&quot;</span>+sp.goods+sp.box+<span class="string">&quot;ThreadB可以开始购买了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo11case;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> shangPin sp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(shangPin sp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sp=sp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (sp)&#123;</span><br><span class="line">                <span class="keyword">if</span> (sp.flag=<span class="keyword">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sp.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadB正在购买：&quot;</span>+sp.goods+sp.box+<span class="string">&quot;商品&quot;</span>);</span><br><span class="line">                sp.flag=<span class="keyword">false</span>;</span><br><span class="line">                sp.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadB已经把：&quot;</span>+sp.goods+sp.box+<span class="string">&quot;商品购买完了，ThreadA开始生产商品&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;----------------------------------------------------------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第六章-线程池"><a href="#第六章-线程池" class="headerlink" title="第六章    线程池"></a>第六章    线程池</h1><hr><h2 id="6-1线程池思想概述"><a href="#6-1线程池思想概述" class="headerlink" title="6.1线程池思想概述"></a>6.1线程池思想概述</h2><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810212906.png"></p><p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题:</p><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p><p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务?</p><p>在Java中可以通过线程池来达到这样的效果。</p><hr><h2 id="6-2线程池概念"><a href="#6-2线程池概念" class="headerlink" title="6.2线程池概念"></a>6.2线程池概念</h2><ul><li><strong>线程池</strong>：其实就是一个容纳多个线程的容器，其中的线程可以重复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</li></ul><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810214141.png"></p><p>线程池工作原理图：</p><p><img src="https://gitee.com/are-you-a-cookie/cloudimages/raw/master/img/QQ%E6%88%AA%E5%9B%BE20210810214223.png"></p><p>合理利用线程池能够带来三个好处：</p><ul><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ul><hr><h2 id="6-3线程池的使用"><a href="#6-3线程池的使用" class="headerlink" title="6.3线程池的使用"></a>6.3线程池的使用</h2><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置线程池不是较优的，因此在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p><p>Executors类中有创建线程池的方法如下：</p><ul><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：返回线程池对象。(创建的是有界线程池，也就是池中的线程个数可以指定最大数量)</li></ul><p>获取到了一个线程池ExecutorService对象，那么怎么使用呢，在这里定义了一个使用线程池对象的方法如下:</p><ul><li><code>public Future&lt;?&gt; submit(Runnable task)</code>：获取线程池中的某一个线程对象，并执行。</li></ul><blockquote><p>Future接口：用来记录线程任务执行完毕后产生的结果。线程池创建与使用。</p></blockquote><p>使用线程池中线程对象的步骤：</p><p>1.创建线程池对象。</p><p>2.创建Runnable接口子类对象。(task)</p><p>3.提交Runnable接口子类对象。(take task)</p><p>4.关闭线程池(一般不做)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo12ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">        executorService.shutdown();<span class="comment">//不建议执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.indi.demo12ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;创建了一个新的线程执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;第一章-多线程&quot;&gt;&lt;a href=&quot;#第一章-多线程&quot; class=&quot;headerlink&quot; title=&quot;第一章 多线程&quot;&gt;&lt;/a&gt;第一章 多线程&lt;/h1&gt;&lt;p&gt;学习的程序在没有跳转语句的前提下，都是由上至下依次执行，那么现在详设计一个程序，边打游戏边</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://www.stq555.com/2022/01/11/%E9%9B%86%E5%90%88/"/>
    <id>https://www.stq555.com/2022/01/11/%E9%9B%86%E5%90%88/</id>
    <published>2022-01-11T04:17:54.000Z</published>
    <updated>2022-01-11T14:29:10.639Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="第一章-Collection集合-单列集合"><a href="#第一章-Collection集合-单列集合" class="headerlink" title="第一章 Collection集合(单列集合)"></a>第一章 Collection集合(单列集合)</h1><h2 id="1-1集合概述"><a href="#1-1集合概述" class="headerlink" title="1.1集合概述"></a>1.1集合概述</h2><hr><ul><li>集合：集合是Java中提供的一种容器，可以用来存储多个数据。</li></ul><p>集合和数组的区别：</p><p>1.数组的长度是固定的。</p><p>   集合的长度是可变的。</p><p>2.数组中存储的是同一种元素，可以存储基本类型数据值。</p><p>   集合存储的都是对象，而且对象的类型可以不一致，在开发中一般当对象多的时候，使用集合进行存储。</p><hr><h2 id="1-2集合框架"><a href="#1-2集合框架" class="headerlink" title="1.2集合框架"></a>1.2集合框架</h2><hr><p>集合按照其存储结构可以分为两大类：分别是==单列集合==<strong>(java.util.Collection)<strong>和==双列集合==</strong>(java.util.Map)</strong></p><ul><li><strong>Collection</strong>:单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<strong>java.util.List</strong>和<strong>java.util.Set</strong>，其中List的特点是元素有序、元素可重复。Set的特点是元素无序，而且不可重复。List接口的主要实现类有<strong>java.util.ArrayList</strong>和<strong>java.util.LinkedList</strong>，Set接口的主要实现类有<strong>java.util.HashSet</strong>和<strong>java.util.TreeSet</strong></li></ul><p><img src="https://s2.loli.net/2022/01/11/kJzBVUpWIOrX4Z8.png"></p><ul><li>橙色框里填写的都是接口类型，而蓝色框里填写的都是具体的实现类</li><li>集合本身是一个工具，它存放在java.util包中。在<strong>Collection</strong>接口定义着单列集合框架中最最共性的内容</li></ul><p><img src="https://s2.loli.net/2022/01/11/OlFna5j4kIuobPi.png"></p><h2 id="1-3Collection常用功能"><a href="#1-3Collection常用功能" class="headerlink" title="1.3Collection常用功能"></a><strong>1.3Collection常用功能</strong></h2><hr><p><strong>Collection</strong>是所有单列集合的父接口，因此在<strong>Collection</strong>中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。</p><ul><li><p>public boolean add(E e)：把给定的对象添加到当前集合中</p></li><li><p>public void clear()：清空集合中所有的元素</p></li><li><p>public boolean remove(E e)：把给定的对象在当前集合中删除</p></li><li><p>public boolean contains(E e)：判断当前集合中是否包含给定的对象</p></li><li><p>public boolean isEmpty()：判断当前集合是否为空</p></li><li><p>public int size()：返回集合中元素的个数</p></li><li><p>public object[ ] toArray()：把集合中的元素，存储到数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rosyday01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rosy10Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; coll=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(coll);<span class="comment">//重写了toString方法 []</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.public boolean add(E e)：把给定的对象添加到当前集合中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b1=coll.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;田七&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;孙八&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b1:&quot;</span>+b1);<span class="comment">//b1:true</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三, 李四, 王五, 赵六, 田七, 孙八]</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2.public boolean remove(E e)：把给定的对象在当前集合中删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b2=coll.remove(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b2:&quot;</span>+b2);<span class="comment">//b2:true</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[李四, 王五, 赵六, 田七, 孙八]</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        3.public boolean contains(E e)：判断当前集合中是否包含给定的对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b3=coll.contains(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b3:&quot;</span>+b3);<span class="comment">//b3:true</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        4.public int size()：返回集合中元素的个数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> b4=coll.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中元素的个数是：&quot;</span>+b4);<span class="comment">//集合中元素的个数是：5</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        5.public boolean isEmpty()：判断当前集合是否为空</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b5=coll.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">&quot;b5:&quot;</span>+b5);<span class="comment">//b5:false</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        6.public object[ ] toArray()：把集合中的元素，存储到数组中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        7.public void clear()：清空集合中所有的元素，但集合还在</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        coll.clear();</span><br><span class="line">        System.out.println(coll);<span class="comment">//[]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="第二章-Iterator迭代器"><a href="#第二章-Iterator迭代器" class="headerlink" title="第二章 Iterator迭代器"></a>第二章 Iterator迭代器</h1><hr><h2 id="2-1Iterator接口"><a href="#2-1Iterator接口" class="headerlink" title="2.1Iterator接口"></a>2.1Iterator接口</h2><hr><p>​     在程序开发中，要遍历集合中的所有元素，jdk专门提供了一个接口<strong>java.util,Iterator</strong>。<strong>Colection</strong>和<strong>Map</strong>接口主要用于存储数据，而<strong>Iterator</strong>接口主要用于迭代访问(即遍历)<strong>Colection</strong>中的元素，因此<strong>Iterator</strong>对象也被称作迭代器。</p><p>  1.获取迭代器的方法：</p><ul><li><p>**public Iterator iterator( )**：获取集合对应的迭代器，用于遍历集合中的元素</p><p>2.迭代的概念：</p></li><li><p><strong>迭代</strong>：即<strong>Collection</strong>集合元素的通用获取方法。在取元素之前要判断集合中有没有元素，如果有就把这个元素取出来，继续再判断，如果还有就再取出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p></li></ul><p>​    3.<strong>Iterator</strong>接口的常用方法如下：</p><ul><li>**public E next( )**：返回迭代的下一个元素</li><li>**public boolean hasNext( )**：如果仍有元素可以迭代，则返回true</li></ul><p>​    4.迭代器的使用步骤(==重点==)：</p><p>​        1.使用集合中的方法iterator( )获取迭代器的实现类对象，使用Iterator接口接收(多态)</p><p>​        2.使用Iterator接口中的方法hasNext判断还有没有下一个元素</p><p>​        3.使用Iterator接口中的方法next取出集合中的下一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt;coll=<span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//使用多态方式创建对象</span></span><br><span class="line">        <span class="comment">//添加元素到集合</span></span><br><span class="line">        coll.add(<span class="string">&quot;叽叽叽&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;啦啦啦&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;略略略&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;啧啧啧&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;呵呵呵&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator=coll.iterator();</span><br><span class="line">        <span class="comment">// 1.使用集合中的方法iterator( )获取迭代器的实现类对象，使用Iterator接口接收(多态)</span></span><br><span class="line">        <span class="comment">//注意:Iterator&lt;E&gt;接口也是有泛型的，泛型的类型跟集合泛型的类型保持一致</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;<span class="comment">//2.使用Iterator接口中的方法hasNext判断还有没有下一个元素</span></span><br><span class="line">            System.out.println(iterator.next());<span class="comment">//3.使用Iterator接口中的方法next取出集合中的下一个元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2迭代器的实现原理"><a href="#2-2迭代器的实现原理" class="headerlink" title="2.2迭代器的实现原理"></a>2.2迭代器的实现原理</h2><hr><ul><li><p>java.util.Iterator接口：迭代器(对集合进行遍历)</p><pre><code>1.boolean hasNext() 如果仍有元素可以迭代，则返回true，没有返回false2.E next() 返回迭代的下一个元素                 取出集合中的下一个元素</code></pre><p> Iterator迭代器，是一个接口，我们无法直接使用，需要使用Iterator接口的实现类对象，获取实现类的方法比较特殊<br> Collection接口中有一个方法，叫iterator(),这个方法返回的就是迭代器的实现类对象</p><pre><code> Iterator&lt;E&gt; iterator() 返回在此 collection的元素上进行迭代的迭代器</code></pre></li><li><p>当没有元素可取时，<strong>iterator.hasNext()<strong>返回值为false，再输出</strong>iterator.next()<strong>时程序会报错，显示</strong>Exception in thread “main” java.util.NoSuchElementException</strong>，==NoSuchElementException没有元素异常==</p></li><li><p>Iterator<String> iterator===coll.iterator();==高亮部分是实现类对象，获取迭代器的实现类对象，并把指针(索引)指向集合的-1索引</p></li><li><p>iterator.next() 1.取出下一个元素</p><p>​                      2.会把指针向后移动一位</p></li></ul><h2 id="2-3增强for"><a href="#2-3增强for" class="headerlink" title="2.3增强for"></a>2.3增强for</h2><hr><p>​    增强for循环(也称for each循环)jdk1.5以后，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以在遍历过程中，不能对集合中的元素进行增删操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(集合/数组元素的数据类型  变量名：集合名/数组名)&#123;</span><br><span class="line">        <span class="comment">//写操作代码</span></span><br><span class="line">    System.out.println(变量名);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>底层使用的也是迭代器，使用for循环的格式，简化了迭代器的书写</p></li><li><p>**Collection<E>extends Iterable<E>**：所有单列集合都可以使用增强for </p><p>**public interface Iterable<T>**实现了这个接口，允许对象成为”foreach”语句的目标 </p></li></ul><h3 id="例一：遍历数组"><a href="#例一：遍历数组" class="headerlink" title="例一：遍历数组"></a>例一：遍历数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01foreach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> []arr=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//使用增强for遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a:arr) &#123;<span class="comment">//a代表数组中的每个元素</span></span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例二：遍历集合"><a href="#例二：遍历集合" class="headerlink" title="例二：遍历集合"></a>例二：遍历集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01foreach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; coll=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">&quot;科比&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;艾弗森&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;奥尼尔&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;姚明&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;乔丹&quot;</span>);</span><br><span class="line">        <span class="comment">//使用增强for遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String a:coll) &#123;<span class="comment">//接收变量a代表  代表被遍历到的集合元素</span></span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：增强for循环必须有遍历的目标。目标只能是Collection集合或者数组。增强for循环仅仅作为遍历出现</p></blockquote><hr><h1 id="第三章-泛型"><a href="#第三章-泛型" class="headerlink" title="第三章 泛型"></a>第三章 泛型</h1><hr><h2 id="3-1泛型概述"><a href="#3-1泛型概述" class="headerlink" title="3.1泛型概述"></a>3.1泛型概述</h2><hr><p>​    集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升为Object类型，当我们在取出每一个对象，并进行相应的操作，这时必须采用类型转换。</p><h2 id="3-2使用泛型的好处"><a href="#3-2使用泛型的好处" class="headerlink" title="3.2使用泛型的好处"></a>3.2使用泛型的好处</h2><hr><p>  1.创建集合对象，不使用泛型</p><ul><li>好处：集合不使用泛型，默认类型就是Object类型，可以存储任意类型的数据</li><li>弊端：不安全，会引发异常</li></ul><p>观察以下代码(==创建集合对象，不使用泛型==)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Collection coll=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        coll.add(<span class="number">5</span>);<span class="comment">//由于集合没有做任何限定，任何类型都可以在此存放</span></span><br><span class="line">        Iterator it=coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext)&#123;</span><br><span class="line">            <span class="comment">//需要打印每个字符串的长度，使用String类特有方法length获取字符串长度，就要把迭代出的对象转成String类型即向下转型</span></span><br><span class="line">            String str=(String)it.next();</span><br><span class="line">            System.out.println(str.length());<span class="comment">//会抛出ClassCastException类型转换异常，不能把Integer类型转换成String类型</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  2.==创建集合对象，使用泛型==</p><ul><li><p>好处：1.避免了类型转换的麻烦，存储的是什么类型，取出的就是什么类型</p><p>​           2.把运行期异常(代码运行之后会抛出的异常)，提升到了编译期异常(写代码的时候会报错)</p></li><li><p>弊端：泛型是什么类型，只能存储什么类型的数据</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;abb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;cdd&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            String s=iterator.next();<span class="comment">//使用泛型，不需要进行类型转换</span></span><br><span class="line">            System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：泛型是数据类型的一部分，我们将类名与泛型合并一起看作数据类型。</p></blockquote><h2 id="3-3泛型的定义与使用"><a href="#3-3泛型的定义与使用" class="headerlink" title="3.3泛型的定义与使用"></a>3.3泛型的定义与使用</h2><hr><p>​    泛型，用来灵活地将数据类型应用到不同的类，方法，接口当中。将数据类型作为参数进行传递。</p><h3 id="定义和使用含有泛型的类"><a href="#定义和使用含有泛型的类" class="headerlink" title="定义和使用含有泛型的类"></a>定义和使用含有泛型的类</h3><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，API中的ArrayList集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">pubilc <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型：即什么时候确定泛型。</p><p><strong>在创建对象的时候确定泛型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不写泛型默认Object类型</span></span><br><span class="line">        Name a1=<span class="keyword">new</span> Name();</span><br><span class="line">        a1.setName(<span class="number">1</span>);</span><br><span class="line">        System.out.println(a1.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Name对象，泛型使用Integer类型</span></span><br><span class="line">        Name&lt;Integer&gt; a2=<span class="keyword">new</span> Name&lt;&gt;();<span class="comment">//Integer类型</span></span><br><span class="line">        a2.setName(<span class="number">331</span>);</span><br><span class="line">        System.out.println(a2.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Name对象，泛型使用String类型</span></span><br><span class="line">        Name&lt;String&gt; a3=<span class="keyword">new</span> Name&lt;&gt;();<span class="comment">//字符串类型</span></span><br><span class="line">        a3.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        System.out.println(a3.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Name</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(E name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="含有泛型的方法"><a href="#含有泛型的方法" class="headerlink" title="含有泛型的方法"></a>含有泛型的方法</h3><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123;   &#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">(MVP mvp)</span></span>&#123;</span><br><span class="line">       System.out.println(mvp.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">(MVP mvp)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：<strong>调用方法时，确定泛型的类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02GenericMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericMethod it=<span class="keyword">new</span> GenericMethod();</span><br><span class="line">        it.method01(<span class="number">331</span>);</span><br><span class="line">        it.method01(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        it.method01(<span class="number">8.8</span>);</span><br><span class="line">        it.method01(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">        it.method02(<span class="string">&quot;静态方法不建议创建对象使用&quot;</span>);</span><br><span class="line">        GenericMethod.method02(<span class="number">331</span>);</span><br><span class="line">        GenericMethod.method02(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        GenericMethod.method02(<span class="string">&quot;8.8&quot;</span>);</span><br><span class="line">        GenericMethod.method02(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个含有泛型的方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;M&gt; <span class="function"><span class="keyword">void</span> <span class="title">method01</span><span class="params">(M m)</span></span>&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个含有泛型的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function"><span class="keyword">void</span> <span class="title">method02</span><span class="params">(S s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="含有泛型的接口"><a href="#含有泛型的接口" class="headerlink" title="含有泛型的接口"></a>含有泛型的接口</h3><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span>接口名&lt;代表泛型的变量&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title">getE</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：</p><p><strong>1.定义类时确定泛型的类型</strong></p><p><strong>2.接口使用什么泛型实现类就使用什么泛型</strong></p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试含有泛型的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl1对象</span></span><br><span class="line">        GenericInterfaceImpl1 it1=<span class="keyword">new</span> GenericInterfaceImpl1();</span><br><span class="line">        it1.method(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl2对象</span></span><br><span class="line">        GenericInterfaceImpl2&lt;Integer&gt; it2=<span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        it2.method(<span class="number">331</span>);</span><br><span class="line">        GenericInterfaceImpl2&lt;Double&gt; it3=<span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        it3.method(<span class="number">8.8</span>);</span><br><span class="line">        GenericInterfaceImpl2&lt;Boolean&gt; it4=<span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        it4.method(<span class="keyword">true</span>);</span><br><span class="line">        GenericInterfaceImpl2&lt;String&gt; it5=<span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        it5.method(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt;</span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">     含有泛型的接口，第一种使用方式：定义接口的实现类，实现接口，指定接口的泛型</span></span><br><span class="line"><span class="comment">     public interface Iterator&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">     E next();</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     Scanner类实现了Iterator接口，并指定接口的泛型为String，所以重写的next方法泛型默认就是String</span></span><br><span class="line"><span class="comment">     public final class Scanner implements Iterator&lt;String&gt;&#123;</span></span><br><span class="line"><span class="comment">           public String next() &#123; &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl1</span> <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">         System.out.println(s);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">       含有泛型的接口，第二种使用方式：接口使用什么泛型，实现类就使用什么泛型，类跟着接口走</span></span><br><span class="line"><span class="comment">       就相当于定义了一个含有泛型的类，创建对象的时候确定泛型的类型</span></span><br><span class="line"><span class="comment">       public interface list(E)&#123;</span></span><br><span class="line"><span class="comment">           boolean add(E e);</span></span><br><span class="line"><span class="comment">           E get(int index);</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">       public class ArrayList&lt;E&gt; implements List&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">           public boolean add(E e) &#123; &#125;</span></span><br><span class="line"><span class="comment">           public E get(int index) &#123; &#125;</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl2</span>&lt;<span class="title">I</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4泛型通配符"><a href="#3-4泛型通配符" class="headerlink" title="3.4泛型通配符"></a>3.4泛型通配符</h2><hr><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示，但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h3 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h3><p>泛型的通配符：<strong>不知道使用什么类型来接收的时候，此时可以使用？，？表示未知通配符</strong>。？：代表任意的数据类型</p><p>此时只能接受数据，不能往该集合中存储数据。</p><ul><li>使用方式：不能创建对象使用，只能作为方法的参数使用</li></ul><blockquote><p>tips：泛型是没有继承概念的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; a1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        a1.add(<span class="number">3</span>);</span><br><span class="line">        a1.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; a2=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        a2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        a2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">        printArray(a1);</span><br><span class="line">        printArray(a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;<span class="comment">//不知道集合里存储的是什么类型的数据时，我们使用泛型的通配符来接受数据</span></span><br><span class="line">        Iterator&lt;?&gt; iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通配符高级使用—受限泛型"><a href="#通配符高级使用—受限泛型" class="headerlink" title="通配符高级使用—受限泛型"></a>通配符高级使用—受限泛型</h3><p>在java的泛型中可以指定一个泛型的上限和下限</p><p><strong>泛型的上限</strong>：</p><ul><li>格式：<strong>类型名称 &lt;?  extends 类&gt; 对象名称</strong></li><li>意义：<strong>只能接收该类型及其子类</strong></li></ul><p><strong>泛型的下限</strong>：</p><ul><li>格式：<strong>类型名称 &lt;?  super类&gt; 对象名称</strong></li><li>意义：<strong>只能接收该类型及其父类</strong></li></ul><p>比如：现已知Object类，String类，Number类，Integer类，Number是Integer的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;Integer&gt; list1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;String&gt; list2=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;Number&gt; list3=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;Object&gt; list4=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        getElement1(list1);</span><br><span class="line">        getElement1(list2);<span class="comment">//报错</span></span><br><span class="line">        getElement1(list3);</span><br><span class="line">        getElement1(list4);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">        getElement2(list1);<span class="comment">//报错</span></span><br><span class="line">        getElement2(list2);<span class="comment">//报错</span></span><br><span class="line">        getElement2(list3);</span><br><span class="line">        getElement2(list4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span> <span class="params">(Collection&lt;? extends Number&gt; cool)</span></span>&#123;  &#125;</span><br><span class="line">    <span class="comment">//泛型的上限：此时的泛型？，必须是Number类型或者Number类型的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span> <span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; cool)</span></span>&#123;  &#125;</span><br><span class="line">    <span class="comment">//泛型的下限：此时的泛型？，必须是Number类型或者Number类型的父类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的继承关系：</p><p>Integer extends Number extends Object</p><p>String extends Object</p><h1 id="第四章-集合综合案例"><a href="#第四章-集合综合案例" class="headerlink" title="第四章 集合综合案例"></a>第四章 集合综合案例</h1><hr><h2 id="4-1案例介绍"><a href="#4-1案例介绍" class="headerlink" title="4.1案例介绍"></a>4.1案例介绍</h2><hr><p>按照斗地主的规则，完成发牌洗牌的动作。</p><p>具体规则：</p><p>使用54张牌打乱顺序，三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</p><h2 id="4-2案例分析"><a href="#4-2案例分析" class="headerlink" title="4.2案例分析"></a>4.2案例分析</h2><hr><ul><li><p>准备牌：</p><p>牌可以设计为一个ArrayList<String>，每个字符串为一张牌。</p><p>每张牌由花色数字两部分组成，我们可以使用花色集合和数字集合嵌套迭代完成每张牌的组装。</p></li><li><p>牌由Collection类的<strong>shuffle方法</strong>进行随机排序。</p><p>使用集合工具类Collections的方法</p><p>static void shuffle(List&lt;?&gt; list)使用指定的随机源对指定列表进行置换。</p><p>会随机的打乱集合中元素的顺序</p></li><li><p>发牌：</p><p>将每个人以及底牌设计为ArrayList<String>，将最后3张牌直接存放于底牌，剩余牌通过对3取模一次发牌。</p></li><li><p>看牌：直接打印每一个集合。</p></li></ul><p><img src="https://s2.loli.net/2022/01/11/KV8BOgCljD21w4s.png"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; poker=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] colors=&#123;<span class="string">&quot;♠&quot;</span>,<span class="string">&quot;♥&quot;</span>,<span class="string">&quot;♣&quot;</span>,<span class="string">&quot;♦&quot;</span> &#125;;</span><br><span class="line">        String[] numbers=&#123;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;J&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        poker.add(<span class="string">&quot;大王&quot;</span>);</span><br><span class="line">        poker.add(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String color:colors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String number:numbers) &#123;</span><br><span class="line">                poker.add(color+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line">        ArrayList&lt;String&gt; player01=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player02=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player03=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dipai=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;poker.size() ; i++) &#123;</span><br><span class="line">            String s = poker.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                dipai.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                player01.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                player02.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                player03.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家一&quot;</span>+player01);</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家二&quot;</span>+player02);</span><br><span class="line">        System.out.println(<span class="string">&quot;玩家三&quot;</span>+player03);</span><br><span class="line">        System.out.println(<span class="string">&quot;底牌&quot;</span>+dipai);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第五章数据结构"><a href="#第五章数据结构" class="headerlink" title="第五章数据结构"></a>第五章数据结构</h1><hr><h2 id="5-1常见的数据结构"><a href="#5-1常见的数据结构" class="headerlink" title="5.1常见的数据结构"></a>5.1常见的数据结构</h2><hr><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1.栈"></a>1.栈</h3><ul><li><strong>栈：stack</strong>，又称堆栈，它是运算受限的线性表，其限制是允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</li></ul><p>简单的说：采用该结构的集合，对元素的存取有如下的特点</p><ul><li>==先进后出==(即，存进去的元素，要在它后面的元素依次取出后，才能取出该元素)。</li><li>栈的入口、出口的都是栈的顶端位置。</li></ul><p><img src="https://s2.loli.net/2022/01/11/g9I8OseTiumWFMw.png"></p><h3 id="2-队列"><a href="#2-队列" class="headerlink" title="2.队列"></a>2.队列</h3><ul><li><strong>队列：queue</strong>，简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li></ul><p>简单的说，采用该结构的集合，对元素的存取有如下特点：</p><ul><li>先进先出：(即，存进去的元素，要在它前面的元素依次取出后，才能取出该元素)。例如：火车进山洞</li><li>队列的入口、出口各站一侧。如下图：左侧为入口，右侧为出口。</li></ul><p><img src="https://s2.loli.net/2022/01/11/XHl4w3sdRTbhWZS.png"></p><p><img src="https://s2.loli.net/2022/01/11/4JMvSHsQyGRjLda.png"></p><h3 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h3><ul><li><p><strong>数组：Array</strong>：是有序的元素序列，数组是在内存中开辟一段连续的空间，并在空间存放元素。就像酒店，有100个房间，从001到100每个房间都有固定编号，通过编号就可以迅速找到住在房间里的人。</p><p>特点：1.查询快：数组的地址是连续的，我们通过数组的首地址可以找到数组，通过数组的索引可以快速查找某一元素</p><p>​           2.增删慢：数组的长度是固定的，我们想要增加/删除一个元素，必须创建一个新数组，把源数组的数据复制过来</p></li><li><p>查找元素快：通过索引，可以快速访问指定位置的元素</p><p><img src="https://s2.loli.net/2022/01/11/lvrotH3FVb1mnJh.png"></p></li><li><p>增删元素慢</p><p><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把元素组元素根据索引，复制到新数组对应索引的位置。</p></li></ul><p><img src="https://s2.loli.net/2022/01/11/yJTkuwC6jQAaNZh.png"></p><h3 id="4-链表"><a href="#4-链表" class="headerlink" title="4.链表"></a>4.链表</h3><ul><li><strong>链表：linked list</strong>，由一系列结点node(链表中每一个元素称为结点)组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，这里记录的是<strong>单向链表</strong>。</li></ul><p><img src="https://s2.loli.net/2022/01/11/Tx6FJyLSqnz491R.png"></p><p>简单的说，采用该结构的集合，对元素的存取有如下特点：</p><ul><li><p>多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下一个人的左手，以此类推，这样多个人就在一起了。</p><p><img src="https://s2.loli.net/2022/01/11/5XDy8YlAwfV1uFM.png"></p></li><li><p>查找元素慢：想查找某个元素，需要通过连接的结点，依次向后查找指定元素，链表中地址不是连续的，每次查询元素，都必须从头开始查询</p></li><li><p>增删元素快：链表结构，增加/删除一个元素，对链表的整体结构没有影响，所以增删快</p></li></ul><p><img src="https://s2.loli.net/2022/01/11/HBbTIjs9fdkcQxO.png"></p><h3 id="5-红黑树"><a href="#5-红黑树" class="headerlink" title="5.红黑树"></a>5.红黑树</h3><ul><li><strong>二叉树：binary tree</strong>，是每个结点不超过二的有序**树(tree)**。</li></ul><p>简单的理解，就是一种类似于我们生活中的树的结构，只不过每个结点上都最多只能有两个子结点。</p><p>二叉树是每个结点最多有两个子树的树结构。顶上：根节点，两侧：“左子树”，“右子树”。</p><ul><li><p>排序树/查找树</p><p>在二叉树的基础上，元素是有大小顺序的，左子树小，右子树大。</p><p><img src="https://s2.loli.net/2022/01/11/3EnktBm8luvs6FH.png"></p></li><li><p>平衡树</p><p><img src="https://s2.loli.net/2022/01/11/GNvTJpixAj5zgQc.png"></p></li><li><p>不平衡树</p><p><img src="https://s2.loli.net/2022/01/11/eydx2ESmpZPN17Q.png"></p></li><li><p><strong>红黑树</strong></p><p>特点：趋近于平衡树，查询的速度非常的快，查询叶子节点最大次数和最小次数不能超过二倍(找到一个元素的次数不能是其他的二倍)</p><p>性质1：每个节点要么是黑色，要么是红色。</p><p>性质2：根节点是黑色。</p><p>性质3：每个叶子节点（NIL）是黑色。</p><p>性质4：每个红色结点的两个子结点一定都是黑色。</p><p><strong>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong></p><p>性质5.1：如果一个结点存在黑子结点，那么该结点肯定有两个子结点</p><p><img src="https://s2.loli.net/2022/01/11/1fO6nDC5WqhwLNs.png"></p></li></ul><hr><h1 id="第六章-List集合"><a href="#第六章-List集合" class="headerlink" title="第六章 List集合"></a>第六章 List集合</h1><hr><h2 id="6-1List接口介绍"><a href="#6-1List接口介绍" class="headerlink" title="6.1List接口介绍"></a>6.1List接口介绍</h2><hr><p><strong>java.util.List</strong>接口继承自<strong>Collection</strong>接口，是单列集合的重要分支，实现了List接口的对象称为List集合。在List集合中允许出现重复的元素，所有元素以一种线性方式进行存储，在程序中可以通过索引来访问集合中的指定元素。List集合的特点：元素有序，即元素的存入顺序和取出顺序一致。</p><p>List接口的特点：</p><p>1.元素存取有序的集合。(存储123，取出123)</p><p>2.带索引的集合，通过索引就可以精确的操作集合中的元素。</p><p>3.集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</p><h2 id="6-2List接口中常用方法"><a href="#6-2List接口中常用方法" class="headerlink" title="6.2List接口中常用方法"></a>6.2List接口中常用方法</h2><hr><p>List作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还新增了一些根据元素索引来操作集合的特有方法，如下：</p><ul><li>**public void add (int index,E element)**：将指定的元素，添加到该集合的指定位置上。</li><li>**public E get(int index)**：返回集合指定位置上的元素。</li><li>**public E remove(int index)**：移除列表中指定位置的元素，返回的是被移除的元素。</li><li>**public E set(int index,E element)**：用指定元素替换集合中指定位置的元素，返回值的更新前的元素。</li></ul><hr><h1 id="第七章-List的子类"><a href="#第七章-List的子类" class="headerlink" title="第七章 List的子类"></a>第七章 List的子类</h1><hr><h2 id="7-1ArrayList集合"><a href="#7-1ArrayList集合" class="headerlink" title="7.1ArrayList集合"></a>7.1ArrayList集合</h2><hr><p>​         对象数组   ：直接打印得到的是null</p><p>​         数组里放的是对象的地址值。</p><p>缺点：一旦创建，程序运行期间数组的长度不可以改变。（为了解决这个问题，我们推出了ArralyList       即长度可变的数组）</p><p><strong>ArralyList集合的概述和基本使用</strong></p><p>​     1.对于ArrayList集合来说，有一个尖括号<E>代表泛型。</p><p>​     2.泛型：也就是装在集合当中的所有元素，全都是统一的什么类型。</p><p>​     3.注意：泛型只能是引用类型，不能是基本类型。</p><ul><li>对于ArrayList集合来说，直接打印得到的不是地址值而是内容。</li></ul><p>​       如果内容是空，得到的是空的中括号[ ]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deom02ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//创建一个集合，集合里元素的数据类型是String类型</span></span><br><span class="line"><span class="comment">//        System.out.println(list);//[]</span></span><br><span class="line">        <span class="comment">//如何向集合当中添加数据</span></span><br><span class="line">        list.add(<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ArralyList集合的常用方法</strong></p><ul><li><p>public boolean add(E e):向集合当中添加元素，参数的类型和泛型一致。返回值代表添加是否成功。</p><p>备注：对于ArralyList集合来说add动作一定会成功，但是对于其他集合来说add动作不一定成功。</p></li><li><p>public E get(int index):从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素。</p></li><li><p>public E remove(int index)：从集合当中删除元素，参数是索引编号，返回值就是被删除掉的元素。</p></li><li><p>public int size():获取集合的尺寸长度，返回值是集合当中包含的元素个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rosy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rosy03ArrayListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//向集合中添加元素   add 是有返回值的</span></span><br><span class="line">        <span class="keyword">boolean</span> success=list.add(<span class="string">&quot;西瓜&quot;</span>);<span class="comment">//返回值代表添加是否成功</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(success);<span class="comment">//ture</span></span><br><span class="line">        list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;芒果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;火龙果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柚子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;哈密瓜&quot;</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[西瓜, 苹果, 芒果, 火龙果, 柚子, 哈密瓜]</span></span><br><span class="line">        <span class="comment">//从集合中获取元素   get    索引值从0开始</span></span><br><span class="line">        String fruit=list.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二号索引位置：&quot;</span>+fruit);</span><br><span class="line">        <span class="comment">//从集合中删除元素   remove 索引值从0开始</span></span><br><span class="line">        String whoremoved=list.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被删除的元素为：&quot;</span>+whoremoved);<span class="comment">//火龙果</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[西瓜, 苹果, 芒果,  柚子, 哈密瓜]</span></span><br><span class="line">        <span class="comment">//获取集合的长度尺寸，也就是其中元素的个数     size</span></span><br><span class="line">        <span class="keyword">int</span> size=list.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;此时集合的长度为：&quot;</span>+size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>遍历集合</strong></p><p>   ArralyListEach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rosy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RosyArrayListEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt;list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;火龙果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;芒果&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;哈密瓜&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;木瓜&quot;</span>);</span><br><span class="line"><span class="comment">//for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强for循环</span></span><br><span class="line">        <span class="keyword">for</span>(String str : list)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ArrayList集合存储基本数据</strong></p><ul><li>如果希望向集合ArrayList中存储基本数据类型，必须使用基本类型对应的“包装类”。</li></ul><p>基本类型                                                   包装类（引用类型，包装类都位于java.lang包下）</p><p>byte                                                            Byte</p><p>short                                                           Short</p><p>int                                                               Integer                   【特殊】</p><p>long                                                            Long</p><p>float                                                            Float</p><p>double                                                        Double</p><p>char                                                            Character               【特殊】</p><p>boolean                                                      Boolean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rosy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RosyArrayListBasic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; listA=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listA.add(<span class="number">3</span>);</span><br><span class="line">        listA.add(<span class="number">8</span>);</span><br><span class="line">        listA.add(<span class="number">7</span>);</span><br><span class="line">        Iterator&lt;Integer&gt;iterator=listA.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==从jdk1.5开始，支持自动装箱拆箱==</p><p><strong>自动装箱</strong></p><p>基本数据类型自动转换为包装类型</p><p><strong>自动拆箱</strong></p><p>包装数据类型自动转换为基本类型</p><p>例一：生成六个1~33之间的随机数，并放在集合中，且遍历集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random=<span class="keyword">new</span> Random();</span><br><span class="line">        ArrayList&lt;Integer&gt;list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r=random.nextInt(<span class="number">33</span>)+<span class="number">1</span>;</span><br><span class="line">            list.add(r);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Integer&gt;iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2LinkedList集合"><a href="#7-2LinkedList集合" class="headerlink" title="7.2LinkedList集合"></a>7.2LinkedList集合</h2><hr><p><strong>java.util.LinkedList</strong>集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><p><strong>java.util.LinkedList</strong>集合 implement List接口</p><p>LinkedList集合的特点：</p><ul><li><p>底层是一个双向链表结构，查询慢，增删快</p></li><li><p>里面包含了大量操作首尾元素的方法</p><p>注意：使用LinkedList集合特有的方法，不能使用多态</p></li></ul><blockquote><p>LinkedList是一个双向链表</p></blockquote><p><img src="https://s2.loli.net/2022/01/11/PQJCovsDIBiUqy4.png"></p><p>实际开发中对一个集合元素的增添和删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法</p><ul><li><code>public void addFirst(E e)====push()压栈</code>：将指定元素插入此列表的开头。</li><li><code>public void addLast(E e)</code>：将指定元素添加到此列表的结尾。</li><li><code>getFirst()       getLast()</code>：返回此列表的第一个元素/返回此列表的最后一个元素</li><li><code>removeFirst()==pop() 弹栈      removeLast()</code>：移除并返回此列表的第一个元素/移除并返回此列表的最后一个元素</li></ul><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list01=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        list01.add(<span class="string">&quot;小华&quot;</span>);</span><br><span class="line">        list01.add(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        想添加【小金】到表头</span></span><br><span class="line"><span class="comment">        使用addFirst();或push();方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        list01.addFirst(&quot;小金&quot;);</span></span><br><span class="line">        list01.push(<span class="string">&quot;小金&quot;</span>);<span class="comment">//进栈</span></span><br><span class="line">        Iterator&lt;String&gt; iterator01=list01.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator01.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator01.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         想添加【小许】到表尾</span></span><br><span class="line"><span class="comment">         使用addLast();方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        list01.addLast(<span class="string">&quot;小许&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator02=list01.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator02.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator02.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           返回列表的第一个和最后一个元素   getFirst();和getLast()方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">        System.out.println(list01.getFirst());</span><br><span class="line">        System.out.println(list01.getLast());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        移除列表的第一个元素</span></span><br><span class="line"><span class="comment">        使用removeFirst();或pop();方法 弹栈</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        list01.removeFirst();</span></span><br><span class="line">        list01.pop();</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        移除列表的最后一个元素</span></span><br><span class="line"><span class="comment">        使用removeLast();方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        list01.removeLast();</span><br><span class="line">        System.out.println(list01);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-3Vector集合"><a href="#7-3Vector集合" class="headerlink" title="7.3Vector集合"></a>7.3Vector集合</h2><p>​    <code> Vector</code>  类可以实现可增长的对象数组。与数组一样，它包含可以使用整数索引进行访问的组件。但是，<code>Vector</code>  的大小可以根据需要增大或缩小，以适应创建 <code>Vector</code> 后进行添加或移除项的操作。(了解即可)   单线程，速度慢</p><hr><h1 id="第八章-Set集合"><a href="#第八章-Set集合" class="headerlink" title="第八章 Set集合"></a>第八章 Set集合</h1><p><code>java.util.Set</code>接口和<code>java.util.List</code>接口一样，同样继承自<code>Collection</code>接口，它与<code>Collection</code>接口中的方法基本一致，并没有对<code>Collection</code>接口进行功能上的扩充，只是比<code>Collection</code>接口更加严格了。与<code>List</code>接口不同的是，<code>Set</code>接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。</p><p><code>Set</code>集合有多个子类，我们介绍的是<code>java.util.HashSet</code>和<code>java.util.LinkedHashSet</code>这两个集合</p><blockquote><p>tips：Set集合取出元素的方式可以采用：迭代器、增强for。</p></blockquote><h2 id="8-1HashSet集合"><a href="#8-1HashSet集合" class="headerlink" title="8.1HashSet集合"></a>8.1HashSet集合</h2><hr><p><code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的(即存取顺序不一致)。<code>java.util.HashSet</code>底层其实是一个<code>java.util.HashMap</code>支持。</p><p>HashSet是根据对象的哈希值来确定元素在集合中的存储位置，因此和具有良好的存取和查找性能。保证元素唯一性的方式依赖于：<code>hashCode</code>和<code>equals</code>方法</p><p>特点：</p><ul><li>不允许存储重复的元素</li><li>没有索引，没有带索引的方法，也不能使用普通的for循环遍历</li><li>是一个无序的集合，存储元素和取出元素的顺序有可能不一致</li><li>底层是一个哈希表结构(查询的速度非常的快)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11Set</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">3</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());<span class="comment">//1,2,3</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer a:set) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2哈希表"><a href="#8-2哈希表" class="headerlink" title="8.2哈希表"></a>8.2哈希表</h2><hr><p>HashSet集合存储数据的结构</p><p>在<strong>JDK1.8</strong>之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过Key值依次查找的效率较低。</p><p>在<strong>JDK1.8</strong>中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值(8)时，将链表转换为红黑树，这样大大减少了查询时间。</p><p>哈希值(Hash Code)：是一个十进制的整数，由系统随即给出(就是对象的地址值，是一个逻辑地址，是模拟出来的，不是数据实际存储的物理地址)</p><p>在Object类有一个<code>hashCode();</code>方法，返回该对象的哈希码值。</p><p>源码：public native int hashCode( );       <strong>native</strong>：代表该方法调用的是本地操作系统的方法</p><blockquote><p>tips：toString方法返回的就是哈希值的十六进制值，哈希值和toString返回的值，都不是真正物理意义上的地址值，是模拟的假的地址值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12HashCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        persion p1=<span class="keyword">new</span> persion();</span><br><span class="line">        persion p2=<span class="keyword">new</span> persion();</span><br><span class="line">        <span class="keyword">int</span> code1 = p1.hashCode();</span><br><span class="line">        <span class="keyword">int</span> code2 = p2.hashCode();</span><br><span class="line">        System.out.println(code1);<span class="comment">//重写前：460141958     重写后：1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        System.out.println(code2);<span class="comment">//重写前：1163157884    重写后：1</span></span><br><span class="line">        System.out.println(p1);<span class="comment">//重写前：Demo02.persion@1b6d3586  重写后：Demo02.persion@1</span></span><br><span class="line">        System.out.println(p2);<span class="comment">//重写前：Demo02.persion@4554617c  重写后：Demo02.persion@1</span></span><br><span class="line">        System.out.println(p1==p2);<span class="comment">//false  即真正意义上的地址值不相等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     1b6d3586(十六进制)---&gt;(十进制)460141958</span></span><br><span class="line"><span class="comment">     4554617c(十六进制)---&gt;(十进制)1163157884</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">persion</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    return super.hashCode();源码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//重写hashCode方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：String类里重写了hashCode方法</p></blockquote><p><strong>hashCode</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public int hashCode()</span><br></pre></td></tr></table></figure><p>返回此字符串的哈希码。String 对象的哈希码根据以下公式计算： </p><p> **s[0]<em>31^(n-1) + s[1]<em>31^(n-2) + … + s[n-1]</em></em></p><p> <strong>使用 int 算法</strong>，这里 s[i] 是字符串的第 i 个字符，n 是字符串的长度，^ 表示求幂。（空字符串的哈希值为 0。）</p><hr><p><strong>哈希冲突</strong></p><p>两个元素不同，但是哈希值相同</p><p><img src="https://s2.loli.net/2022/01/11/gkRGWCfBNmIUXvZ.png"></p><p>数组超过8位</p><p>少6变回数组</p><p>解决办法：</p><ul><li>拉链法</li><li>开放寻址</li></ul><h2 id="8-3Set集合存储元素不重复原理"><a href="#8-3Set集合存储元素不重复原理" class="headerlink" title="8.3Set集合存储元素不重复原理"></a>8.3Set集合存储元素不重复原理</h2><hr><p>哈希表中，没有重复元素的原因：集合在调用add方法时，add方法会调用元素的hashCode方法和equals方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo13HashSetSaveString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String s1=<span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        String s2=<span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        set.add(s1);</span><br><span class="line">        set.add(s2);</span><br><span class="line">        set.add(<span class="string">&quot;重地&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;通话&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//[重地, 通话, abc]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/11/DP92zZ1wRh5vnAg.png"></p><hr><h2 id="8-4HashSet存储自定义类型元素"><a href="#8-4HashSet存储自定义类型元素" class="headerlink" title="8.4HashSet存储自定义类型元素"></a>8.4HashSet存储自定义类型元素</h2><p>给HashSet中存放自定义类型元素时，需要重写对象中的hashCode和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo14HashSetSavePersion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;persions&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        persions p1=<span class="keyword">new</span> persions(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        persions p2=<span class="keyword">new</span> persions(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        persions p3=<span class="keyword">new</span> persions(<span class="string">&quot;小明&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        set.add(p3);</span><br><span class="line">        System.out.println(p1.hashCode());<span class="comment">//hashCode和equals方法重写前：460141958</span></span><br><span class="line">        <span class="comment">//重写后：23458775</span></span><br><span class="line">        System.out.println(p2.hashCode());<span class="comment">//hashCode和equals方法重写前：1163157884</span></span><br><span class="line">        <span class="comment">//重写后：23458775</span></span><br><span class="line">        System.out.println(p1==p2);<span class="comment">//hashCode和equals方法重写前：false</span></span><br><span class="line">        <span class="comment">//重写后：false</span></span><br><span class="line">        System.out.println(p1.equals(p2));<span class="comment">//hashCode和equals方法重写前：false</span></span><br><span class="line">        <span class="comment">//重写后：true</span></span><br><span class="line">        System.out.println(set);<span class="comment">//hashCode和equals方法重写前：[persions&#123;name=&#x27;小明&#x27;, age=24&#125;, persions&#123;name=&#x27;小明&#x27;, age=21&#125;, persions&#123;name=&#x27;小明&#x27;, age=21&#125;]</span></span><br><span class="line">        <span class="comment">//重写后：[persions&#123;name=&#x27;小明&#x27;, age=21&#125;, persions&#123;name=&#x27;小明&#x27;, age=24&#125;]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">persions</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">persions</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        persions persions = (persions) o;</span><br><span class="line">        <span class="keyword">return</span> age == persions.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, persions.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;persions&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-5LinkedHashSet"><a href="#8-5LinkedHashSet" class="headerlink" title="8.5LinkedHashSet"></a>8.5LinkedHashSet</h2><hr><p>我们知道HashSet保证元素唯一，但是元素存进去是没有顺序的，要保证有序如何实现。</p><p>在HashSet下面有一个子类<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构。</p><p>代码演示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo15LinkedHashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set=<span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator=set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  具有可预知迭代顺序的 <code>Set</code> 接口的哈希表和链接列表实现。此实现与 <code>HashSet</code>  的不同之外在于，后者维护着一个运行于所有条目的双重链接列表。此链接列表定义了迭代顺序，即按照将元素插入到 set  中的顺序（<em>插入顺序</em>）进行迭代。注意，插入顺序<em>不</em> 受在 set 中<em>重新插入的</em> 元素的影响。（如果在  <code>s.contains(e)</code> 返回 <code>true</code> 后立即调用 <code>s.add(e)</code>，则元素 <code>e</code>  会被重新插入到 set <code>s</code> 中。） </p><p>  此实现可以让客户免遭未指定的、由HashSet提供的通常杂乱无章的排序工作，而又不致引起与TreeSet关联的成本增加。使用它可以生成一个与原来顺序相同的 set 副本，并且与原 set 的实现无关： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void foo(Set s) &#123;</span><br><span class="line">    Set copy = new LinkedHashSet(s);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果模块通过输入得到一个 set，复制这个  set，然后返回由此副本决定了顺序的结果，这种情况下这项技术特别有用。（客户通常期望内容返回的顺序与它们出现的顺序相同。） </p><p>  此类提供所有可选的 <code>Set</code> 操作，并且允许 null 元素。与 <code>HashSet</code>  一样，它可以为基本操作（<code>add</code>、<code>contains</code> 和  <code>remove</code>）提供稳定的性能，假定哈希函数将元素正确地分布到存储段中。由于增加了维护链接列表的开支，其性能很可能会比  <code>HashSet</code> 稍逊一筹，不过，这一点例外：<code>LinkedHashSet</code> 迭代所需时间与 set 的<em>大小</em>  成正比，而与容量无关。<code>HashSet</code> 迭代很可能支出较大，因为它所需迭代时间与其<em>容量</em> 成正比。 </p><p>  链接的哈希 set 有两个影响其性能的参数：<em>初始容量</em> 和<em>加载因子</em>。它们与 <code>HashSet</code>  中的定义极其相同。注意，为初始容量选择非常高的值对此类的影响比对 <code>HashSet</code> 要小，因为此类的迭代时间不受容量的影响。 </p><p>  <strong>注意，此实现不是同步的。</strong>如果多个线程同时访问链接的哈希 set，而其中至少一个线程修改了该  set，则它<em>必须</em> 保持外部同步。这一般通过对自然封装该 set 的对象进行同步操作来完成。如果不存在这样的对象，则应该使用 Collections.synchronizedSet方法来“包装”该 set。最好在创建时完成这一操作，以防止意外的非同步访问： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set s = Collections.synchronizedSet(new LinkedHashSet(...));</span><br></pre></td></tr></table></figure><p>此类的 <code>iterator</code> 方法返回的迭代器是<em>快速失败</em> 的：在迭代器创建之后，如果对 set  进行修改，除非通过迭代器自身的 <code>remove</code> 方法，其他任何时间任何方式的修改，迭代器都将抛出 ConcurrentModificationException，因此，面对并发的修改，迭代器很快就会完全失败，而不冒将来不确定的时间任意发生不确定行为的风险。 </p><p>注意，迭代器的快速失败行为不能得到保证，一般来说，存在不同步的并发修改时，不可能作出任何强有力的保证。快速失败迭代器尽最大努力抛出  <code>ConcurrentModificationException</code>。因此，编写依赖于此异常的程序的方式是错误的，正确做法是：<em>迭代器的快速失败行为应该仅用于检测程序错误。</em> </p><p>此类是 <a href="../../../technotes/guides/collections/index.html">Java  Collections Framework</a> 的成员。 </p><h2 id="8-6-可变参数"><a href="#8-6-可变参数" class="headerlink" title="8.6 可变参数"></a>8.6 可变参数</h2><hr><blockquote><p>tips：当使用参数类型确定，而个数不确定时，可以使用可变参数</p></blockquote><p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化成如下格式：</p><p><code>修饰符 返回值类型 方法名(参数类型...形参名)&#123;  &#125;</code></p><p>等价于</p><p><code>修饰符 返回值类型 方法名(参数类型[] 形参名)&#123;  &#125;</code></p><p>只是后面这种定义，在调用时必须传递数组，而前者可以直接传递数据即可。</p><p><strong>JDK1.5</strong>以后。出现了简化操作。…用在参数上，称之为可变参数。</p><p>同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组(这就是简单之处)，直接将数组中的元素作为实际参数进行传递，其实编译成的class文件，将这些元素先封装到一个数组中，在进行传递。这些动作都在编译.class文件时，自动完成了。</p><p><strong>原理：</strong>可变参数底层就是一个数组，根据传递参数个数不同，会创建不同长度的数组，来存储这些参数，传递的参数个数，可以是0个(不传递)，1，2. . .多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16VarArgs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int i = add();</span></span><br><span class="line"><span class="comment">//        System.out.println(i);[I @1b6d3586  [代表数组        I代表int类型</span></span><br><span class="line">        <span class="keyword">int</span> s=add(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br><span class="line">        System.out.println(s);<span class="comment">//100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...arr)</span></span>&#123;</span><br><span class="line">        System.out.println(arr.length);<span class="comment">//4</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i:arr) &#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：1.一个方法的参数列表，只能有一个可变参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    public static void method(int...a,String...b)&#123;  会报错</span></span><br><span class="line"><span class="comment">//    </span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String...b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                  2.如果方法的参数有多个，那么可变参数必须写在参数列表的末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    public static void method(int...i,int a,String b,double c)&#123;  会报错</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String b,<span class="keyword">int</span> a,<span class="keyword">double</span> c,<span class="keyword">int</span>...i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第九章-Collections"><a href="#第九章-Collections" class="headerlink" title="第九章 Collections"></a>第九章 Collections</h1><hr><h2 id="9-1常用功能"><a href="#9-1常用功能" class="headerlink" title="9.1常用功能"></a>9.1常用功能</h2><hr><ul><li><code>java.util.Collections</code>是集合工具类，用来对集合进行操作，部分方法如下：</li><li><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c,T... elements)</code>：向集合中添加一些元素。</li><li><code>public static void shuffle(List&lt;?&gt; list)</code>：打乱集合元素的顺序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>：将集合中元素按照默认规则排序</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list,Comparator&lt;? super T&gt;)</code>：将集合中元素按照指定规则排序</li></ul><blockquote><p>tips：sort(List<T> list)使用前提：被排序的集合里的元素，必须实现Comparable，重写接口中的方法comparTo定义排序的规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo17Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        向集合中添加多个元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, e]</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        打乱集合中元素的顺序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        集合中元素按照默认方式排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.sort(list);<span class="comment">//默认是升序</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        集合中元素按照指定方式排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义类型</strong></p><p>Comparable接口的排序顺序：</p><p>自己(this)-参数：升序</p><p>参数-自己(this)：降序</p><p><strong>Comparator和Comparable的区别</strong></p><p>Comparable:自己(this )和别人(参数)比较,自己需要实现comparable接口,重写比较的规则compareTo方法</p><p>Comparator:相当于找—个第三方的裁判,比较两个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo18Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Persion&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Persion(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Persion(<span class="string">&quot;a小李&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Persion(<span class="string">&quot;小张&quot;</span>,<span class="number">29</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Persion(<span class="string">&quot;b小王&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//[Persion&#123;name=&#x27;小明&#x27;, age=21&#125;, Persion&#123;name=&#x27;小李&#x27;, age=22&#125;, Persion&#123;name=&#x27;小张&#x27;, age=29&#125;, Persion&#123;name=&#x27;小王&#x27;, age=19&#125;]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Persion&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Persion o1, Persion o2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                return o1.getAge()-o2.getAge();按年龄升序排序</span></span><br><span class="line"><span class="comment">//                return o2.getAge()-o1.getAge();按年龄降序排序</span></span><br><span class="line">                <span class="keyword">int</span> result=o1.getAge()-o2.getAge();<span class="comment">//按年龄升序排序</span></span><br><span class="line">                <span class="keyword">if</span>(result==<span class="number">0</span>)&#123;</span><br><span class="line">                    result= o1.getName().charAt(<span class="number">0</span>)-o2.getName().charAt(<span class="number">0</span>);<span class="comment">//首字母排序</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Persion</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Persion</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Persion&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写排序规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Persion o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//认为元素都是相同的</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        可以自定义比较方法 比较两人的年龄(this,参数Person)</span></span><br><span class="line"><span class="comment">        return this.getAge()-o.getAge()//按年龄升序排序</span></span><br><span class="line"><span class="comment">        return o.getAge()-this.getAge()//按年龄降序排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十章-Map集合-双列集合"><a href="#第十章-Map集合-双列集合" class="headerlink" title="第十章 Map集合(双列集合)"></a>第十章 Map集合(双列集合)</h1><hr><h2 id="10-1概述"><a href="#10-1概述" class="headerlink" title="10.1概述"></a>10.1概述</h2><p>前几章我们学习的都是单列集合，而Map是双列集合。</p><p>Map&lt;K,V&gt;，K我们称为键(此映射所维护的键的类型)，V我们称为值(映射值的类型)，键是不允许重复的，value可以重复。</p><blockquote><p>tips：Map集合中K和V的关系类似于函数自变量和函数值的关系。</p></blockquote><p>在现实生活中，我们常会看到这样一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一一对应的关系，就叫做映射。Java提供了专门的集合类来存放这种对象关系的对象，即<code>java.util.Map</code>接口。</p><p>对比Collection接口与Map接口的不同：</p><p><img src="https://s2.loli.net/2022/01/11/ERZUXqpTtaWLbJe.png"></p><h2 id="10-2Map常用子类"><a href="#10-2Map常用子类" class="headerlink" title="10.2Map常用子类"></a>10.2Map常用子类</h2><hr><ul><li><p><strong>HashMap</strong>&lt;K,V&gt;：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p><p><code>java.util.HashMap&lt;K,V&gt;集合 implements Map&lt;K,V&gt;接口</code></p><p>特点：1. HashMap集合底层是哈希表：查询速度特别快</p><p>​                       JDK1.8之前：数组+单向链表</p><p>​                       JDK1.8之后：数组+单向链表/红黑树(当链表长度超过8)：提高查询的速度</p><p>​           2.HashMap集合是一个无序的集合，存储元素和取出元素的顺序有可能不一致</p></li><li><p><strong>LinkedHashMap</strong>&lt;K,V&gt;：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p><p><code>java.util.LinkedHashMap&lt;K,V&gt;集合 extends HashMap&lt;K,V&gt;集合</code></p><p>特点：1. LinkedHashMap集合底层是哈希表+链表(保证迭代的顺序)</p><p>​           2.LinkedHashMap集合是一个有序的集合，存储元素和取出元素的顺序是一致的</p></li></ul><blockquote><p>tips：Map接口中的集合都有两个泛型变量&lt;K,V&gt;，在使用时，要为两个泛型变量赋予数据类型。两个泛型变量&lt;K,V&gt;的数据类型可以相同，也可以不同。</p></blockquote><h2 id="10-3Map接口中的常用方法"><a href="#10-3Map接口中的常用方法" class="headerlink" title="10.3Map接口中的常用方法"></a>10.3Map接口中的常用方法</h2><hr><ul><li><p><code>public V put(k Key,V value)</code>：把指定的键与指定的值添加到Map集合中</p><p>返回值：V</p><p>​      存储时，Key不重复，返回值V时null</p><p>​      存储时，Key重复，会使用新的value替换Map中重复的value，返回被替换的value值</p></li><li><p><code>public V remove(Object key)</code>：把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</p><p>返回值：V</p><p>​      Key存在，V返回被删除的值</p><p>​      Key不存在，V返回null</p></li><li><p><code>public V get(Object Key)</code>：根据指定的键，在Map集合中获取对应的值。</p><p>返回值：V</p><p>​       Key存在，V返回该K对应的值</p><p>​       Key不存在，V返回null</p></li><li><p><code>boolean containsKey(Object Key)</code>：判断集合中是否包含指定的键。</p><p>​       Key存在，返回true</p><p>​       Key不存在，返回false</p></li><li><p><code>public Set&lt;K&gt; KeySet()</code>：获取Map集合中所有的键，存储到Set集合中。</p></li><li><p><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>：获取到Map集合中所有的键值对对象的集合(Set集合)。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      show01();</span></span><br><span class="line"><span class="comment">//      show02();</span></span><br><span class="line">        show03();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()：获取到Map集合中所有的键值对对象的集合(Set集合)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,Integer&gt; map03= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map03.put(<span class="string">&quot;小明&quot;</span>,<span class="number">176</span>);</span><br><span class="line">        map03.put(<span class="string">&quot;小华&quot;</span>,<span class="number">178</span>);</span><br><span class="line">        map03.put(<span class="string">&quot;小金&quot;</span>,<span class="number">169</span>);</span><br><span class="line">        map03.put(<span class="string">&quot;小林&quot;</span>,<span class="number">183</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        boolean containsKey(Object Key)：判断集合中是否包含指定的键。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = map03.containsKey(<span class="string">&quot;小金&quot;</span>);</span><br><span class="line">        System.out.println(b1);<span class="comment">//true</span></span><br><span class="line">        <span class="keyword">boolean</span> b2 = map03.containsKey(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        System.out.println(b2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(map03);<span class="comment">//&#123;小林=183, 小明=176, 小华=178, 小金=169&#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map03.entrySet();</span><br><span class="line">        System.out.println(set);<span class="comment">//[小林=183, 小明=176, 小华=178, 小金=169]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public V remove(Object key)：把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,Integer&gt; map02= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map02.put(<span class="string">&quot;小明&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map02.put(<span class="string">&quot;小华&quot;</span>,<span class="number">97</span>);</span><br><span class="line">        map02.put(<span class="string">&quot;小金&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map02.put(<span class="string">&quot;小林&quot;</span>,<span class="number">99</span>);</span><br><span class="line">        System.out.println(map02);</span><br><span class="line">        Integer a1 = map02.remove(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        System.out.println(a1);<span class="comment">//null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        Integer a2 = map02.remove(<span class="string">&quot;小金&quot;</span>);</span><br><span class="line">        System.out.println(a2);<span class="comment">//87</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public V get(Object Key)：根据指定的键，在Map集合中获取对应的值。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Integer a3 = map02.get(<span class="string">&quot;小林&quot;</span>);</span><br><span class="line">        System.out.println(a3);<span class="comment">//99</span></span><br><span class="line">        Integer a4 = map02.get(<span class="string">&quot;小琳&quot;</span>);</span><br><span class="line">        System.out.println(a4);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public V put(k Key,V value)：把指定的键与指定的值添加到Map集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map01= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String s1 = map01.put(<span class="string">&quot;计算机&quot;</span>, <span class="string">&quot;鼠标&quot;</span>);</span><br><span class="line">        System.out.println(s1);<span class="comment">//null</span></span><br><span class="line">        String s2 = map01.put(<span class="string">&quot;计算机&quot;</span>, <span class="string">&quot;键盘&quot;</span>);</span><br><span class="line">        System.out.println(s2);<span class="comment">//鼠标   返回的是被替换的值</span></span><br><span class="line">        map01.put(<span class="string">&quot;硬件&quot;</span>,<span class="string">&quot;软件&quot;</span>);</span><br><span class="line">        map01.put(<span class="string">&quot;java&quot;</span>,<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        map01.put(<span class="string">&quot;C&quot;</span>,<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        System.out.println(map01);<span class="comment">//&#123;java=C++, C=C++, 硬件=软件, 计算机=键盘&#125;</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public Set&lt;K&gt; KeySet()：获取Map集合中所有的键，存储到Set集合中。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; set = map01.keySet();</span><br><span class="line">        System.out.println(set);<span class="comment">//[java, C, 硬件, 计算机]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-4-Map集合遍历键找值方式"><a href="#10-4-Map集合遍历键找值方式" class="headerlink" title="10.4 Map集合遍历键找值方式"></a>10.4 Map集合遍历键找值方式</h2><hr><p>键找值方式：即通过元素中的键，获取键所在的值</p><p>分析步骤：</p><p>1.获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示<code>KeySet()</code></p><p>2.遍历键的Set集合，得到每一个键</p><p>3.根据键，获取键所对应的值。方法提示<code>get(K key)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02KeySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       show01();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;小明&quot;</span>, <span class="number">176</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小华&quot;</span>, <span class="number">178</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小金&quot;</span>, <span class="number">169</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小林&quot;</span>, <span class="number">183</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public Set&lt;K&gt; KeySet()：获取Map集合中所有的键，存储到Set集合中。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        System.out.println(set);<span class="comment">//[小林, 小明, 小华, 小金]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">       迭代器遍历集合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Iterator&lt;String&gt; iterator=set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            增强for</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (String Key:set) &#123;</span><br><span class="line">                Integer integer01 = map.get(Key);<span class="comment">//通过Key找Value</span></span><br><span class="line">                System.out.println(integer01);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String Key:map.keySet()) &#123;</span><br><span class="line">                Integer integer02 = map.get(Key);<span class="comment">//通过Key找Value</span></span><br><span class="line">                System.out.println(integer02);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-5Entry键值对对象"><a href="#10-5Entry键值对对象" class="headerlink" title="10.5Entry键值对对象"></a>10.5Entry键值对对象</h2><hr><p>Map中存放的是两种对象，一种称为<strong>Key</strong>(键)，一种称为<strong>value</strong>(值)，它们在Map中是一一对应关系，这一对对象又称做Map中的一个Entry(项)。Entry将键值对的对应关系封装成了对象。即键值对对象，这样我们在遍历Map集合时，就可以从每一个键值对(Entry)对象中获取对应的键和对应的值。</p><p>获取对应的键和对应的值的方法：</p><ul><li><code>public K getKey( )</code>：获取Entry对象中的键。</li><li><code>public V getValue( )</code>：获取Entry对象中的值。</li></ul><p>获取所有Entry对象的方法：</p><ul><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>：获取到Map集合中所有的键值对对象的集合(Set集合)</li></ul><h2 id="10-6Map集合遍历键值对方式"><a href="#10-6Map集合遍历键值对方式" class="headerlink" title="10.6Map集合遍历键值对方式"></a>10.6Map集合遍历键值对方式</h2><hr><p>步骤：</p><p>1.使用Map集合中的方法entrySet()，把Map集合中多个Entry对象取出来，存储到一个Set集合中</p><p>2.遍历Set集合，获取每一个Entry对象</p><p>3.使用Entry对象中的方法getKey()和getValue()获取键与值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03EntrySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;小明&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小华&quot;</span>,<span class="number">97</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小金&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小林&quot;</span>,<span class="number">99</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        System.out.println(set);<span class="comment">//[小林=99, 小明=87, 小华=97, 小金=87]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------&quot;</span>);</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,Integer&gt;&gt; iterator=set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String,Integer&gt; entry01=iterator.next();</span><br><span class="line">            String key01 = entry01.getKey();</span><br><span class="line">            Integer value01 = entry01.getValue();</span><br><span class="line">            System.out.println(key01+<span class="string">&quot;=&quot;</span>+value01);</span><br><span class="line"><span class="comment">//            小林=99</span></span><br><span class="line"><span class="comment">//            小明=87</span></span><br><span class="line"><span class="comment">//            小华=97</span></span><br><span class="line"><span class="comment">//            小金=87</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            通过增强for</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String,Integer&gt; entry02:set) &#123;</span><br><span class="line">                String key02 = entry02.getKey();</span><br><span class="line">                Integer value02 = entry02.getValue();</span><br><span class="line">                System.out.println(key02+<span class="string">&quot;=&quot;</span>+value02);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-7HashMap存储自定义类型键值"><a href="#10-7HashMap存储自定义类型键值" class="headerlink" title="10.7HashMap存储自定义类型键值"></a>10.7HashMap存储自定义类型键值</h2><hr><p>练习：每位学生(姓名，年龄)都有自己的家庭地址。那么，既然有对应关系，则将学生对象和家庭住址存储到Map集合中。学生作为键，家庭住址作为值。</p><blockquote><p>tips：学生姓名相同并且年龄相同视为同一名学生</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.tree.analysis.Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04HashMapSavePerson</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      show01();</span></span><br><span class="line">        show02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;Student,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>),<span class="number">178</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小李&quot;</span>,<span class="number">19</span>),<span class="number">175</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小林&quot;</span>,<span class="number">20</span>),<span class="number">179</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小金&quot;</span>,<span class="number">18</span>),<span class="number">183</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小笠&quot;</span>,<span class="number">18</span>),<span class="number">178</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">&quot;小笠&quot;</span>,<span class="number">18</span>),<span class="number">178</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;Student, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Student,Integer&gt; a:set) &#123;</span><br><span class="line">            Integer value = a.getValue();</span><br><span class="line">            Student key = a.getKey();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;----&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">   key : string类型</span></span><br><span class="line"><span class="comment">         string类重写hashcode方法和equals方法,可以保证key唯一</span></span><br><span class="line"><span class="comment">   value : Person类型</span></span><br><span class="line"><span class="comment">    value可以重复(同名同年龄的人视为同一个)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,Student&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;北京&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">&quot;上海&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小李&quot;</span>,<span class="number">19</span>));</span><br><span class="line">        map.put(<span class="string">&quot;北票&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小林&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        map.put(<span class="string">&quot;沈阳&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小金&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">&quot;哈尔滨&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小笠&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">&quot;哈尔滨&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;小笠&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String Key: set) &#123;</span><br><span class="line">            Student value=map.get(Key);</span><br><span class="line">            System.out.println(Key+<span class="string">&quot;---&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-7LinkedHashMap"><a href="#10-7LinkedHashMap" class="headerlink" title="10.7LinkedHashMap"></a>10.7LinkedHashMap</h2><hr><p>HashMap保证元素唯一，并且查询速度很快，可是我们要保证元素有序，还要速度快，就要了解LinkedHashMap，它是HashMap下面有一个子类，它是链表和哈希表组合的一个数据存储结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05LinkedHashMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinkedHashMap&lt;String,Integer&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小李&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        map.put(<span class="string">&quot;小林&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry:set) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;---&gt;&quot;</span>+value);</span><br><span class="line"><span class="comment">//            小明---&gt;18</span></span><br><span class="line"><span class="comment">//            小李---&gt;20</span></span><br><span class="line"><span class="comment">//            小林---&gt;18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-8Hashtable集合"><a href="#10-8Hashtable集合" class="headerlink" title="10.8Hashtable集合"></a>10.8Hashtable集合</h2><hr><p>Hashtable&lt;k,v&gt; implements Map&lt;K,V&gt;   双列集合(<strong>JDK1.0</strong>)比较早</p><p>此类实现了一个哈希表，该哈希表将键映射到相应的值。任何非null对象都可以用做键或值。Hashtable是同步的(单线程)：速度慢</p><ul><li><p>HashtabLe:底层也是一个哈希表,是一个线程安全的集合,是单线程集合,速度慢，不能存储null值, null键</p></li><li><p>HashMap:底层是一个哈希表,是一个线程不安全的集合,是多线程的集合,速度快，可以存储null值, null键</p></li></ul><p>Hashtable和vector集合一样,在jdk1.2版本之后被更先进的集合(HashMap , ArrdyList)取代了</p><p>HashtabLe的子类Properties依然活跃在历史舞台          <strong>Properties集合是一个唯—和I0流相结合的集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Hashtable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      show02();</span></span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;null=null, a=null&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Hashtable&lt;String,String&gt; hashtable=<span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        hashtable.put(<span class="keyword">null</span>,<span class="string">&quot;a&quot;</span>);<span class="comment">//NullPointerException</span></span><br><span class="line">        hashtable.put(<span class="string">&quot;a&quot;</span>,<span class="keyword">null</span>);<span class="comment">//NullPointerException</span></span><br><span class="line">        hashtable.put(<span class="keyword">null</span>,<span class="keyword">null</span>);<span class="comment">//NullPointerException</span></span><br><span class="line">        System.out.println(hashtable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-9Map集合练习"><a href="#10-9Map集合练习" class="headerlink" title="10.9Map集合练习"></a>10.9Map集合练习</h2><hr><p><strong>需求：</strong></p><p>计算一个字符串中每个字符出现次数</p><p><strong>分析</strong></p><p>​    1.获取一个字符串对象</p><p>​    2.创建一个Map集合，键代表字符，值代表次序</p><p>​    3.遍历字符串得到每个字符</p><p>​    4.判断Map中是否有该键</p><p>​    5.如果没有，第一次出现，存储次数为1；如果有，则说明已经出现过，获取到对应的值进行++，再次存储</p><p>​    6.打印最终结果</p><p>分析:</p><p>1.使用scanner获取用户输入的字符串</p><p>2.创建Map集合,key是字符串中的字符, value是字符的个数</p><p>3.遍历字符串,获取每一个字符</p><p>4.使用获取到的字符,去Nap集合判断key是否存在</p><p>key存在:  通过字符(key) ,获取value(字符个数)value++     put( key , value)把新的vatue存储到Map集合中</p><p>key不存在:  put( key ,1)</p><p>5.遍历Map集合,输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner in=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">        String s=in.next();</span><br><span class="line">        HashMap&lt;Character,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c:s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(c))&#123;</span><br><span class="line">                Integer value = map.get(c);</span><br><span class="line">                value++;</span><br><span class="line">                map.put(c,value);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Character Key:map.keySet()) &#123;</span><br><span class="line">            Integer value = map.get(Key);</span><br><span class="line">            System.out.println(Key+<span class="string">&quot;---&gt;&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-10JDK9对集合添加的优化"><a href="#10-10JDK9对集合添加的优化" class="headerlink" title="10.10JDK9对集合添加的优化"></a>10.10JDK9对集合添加的优化</h2><hr><p>添加元素时，List和Set集合使用add方法，Map集合使用put方法</p><p>在<strong>JDK9</strong>时，新的List、Set、Map的静态工厂方法可以更方便地创建集合的不可变实例。</p><p><strong>of方法</strong>(了解即可)</p><hr><h1 id="附加：Debug追踪"><a href="#附加：Debug追踪" class="headerlink" title="附加：Debug追踪"></a>附加：Debug追踪</h1><hr><p><strong>Debug调试程序：</strong></p><p>​        可以让代码逐行执行，查看代码执行的过程，调试程序中出现的bug。</p><p><strong>使用方式：</strong></p><p>​        在行号的右边，鼠标左键单击，添加断点(每个方法的第一行，哪里有bug添加到哪里)</p><p>​        右键，选择Debug执行程序</p><p>​        程序就会停留在添加的第一个断点处</p><p><strong>执行程序：</strong></p><p>​         f8：逐行执行程序</p><p>​         f7：进入到方法中</p><p>​         shift+f8：跳出方法</p><p>​         f9：跳到下一个断点，如果没有下一个断点，那么就借书程序</p><p>​         ctrl+f2：退出debug模式，停止程序</p><p>​         Console：切换到控制台</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;第一章-Collection集合-单列集合&quot;&gt;&lt;a href=&quot;#第一章-Collection集合-单列集合&quot; class=&quot;headerlink&quot; title=&quot;第一章 Collection集合(单列集合)&quot;&gt;&lt;/a&gt;第一章 Collection集合(</summary>
      
    
    
    
    <category term="java" scheme="https://www.stq555.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.stq555.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>留言功能上线~</title>
    <link href="https://www.stq555.com/2022/01/10/%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD%E4%B8%8A%E7%BA%BF/"/>
    <id>https://www.stq555.com/2022/01/10/%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD%E4%B8%8A%E7%BA%BF/</id>
    <published>2022-01-09T17:05:15.000Z</published>
    <updated>2022-01-09T17:07:49.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Valine留言功能上线"><a href="#Valine留言功能上线" class="headerlink" title="Valine留言功能上线~"></a>Valine留言功能上线~</h2><p>欢迎大家来评论</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Valine留言功能上线&quot;&gt;&lt;a href=&quot;#Valine留言功能上线&quot; class=&quot;headerlink&quot; title=&quot;Valine留言功能上线~&quot;&gt;&lt;/a&gt;Valine留言功能上线~&lt;/h2&gt;&lt;p&gt;欢迎大家来评论&lt;/p&gt;
</summary>
      
    
    
    
    <category term="First" scheme="https://www.stq555.com/categories/First/"/>
    
    
    <category term="留言" scheme="https://www.stq555.com/tags/%E7%95%99%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>README</title>
    <link href="https://www.stq555.com/2022/01/08/README/"/>
    <id>https://www.stq555.com/2022/01/08/README/</id>
    <published>2022-01-08T14:05:55.000Z</published>
    <updated>2022-01-09T17:42:34.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="README"><a href="#README" class="headerlink" title="README"></a>README</h1><p>说明：因为假期的原因，想试着搭一个属于自己的博客，会在这里发一些每天学习的知识，或是遇到的有意思的事，希望可以和大家相互交流，一起进步。</p><p>博客仅用于学习和交流。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;README&quot;&gt;&lt;a href=&quot;#README&quot; class=&quot;headerlink&quot; title=&quot;README&quot;&gt;&lt;/a&gt;README&lt;/h1&gt;&lt;p&gt;说明：因为假期的原因，想试着搭一个属于自己的博客，会在这里发一些每天学习的知识，或是遇到的有意思的事，希望可</summary>
      
    
    
    
    <category term="First" scheme="https://www.stq555.com/categories/First/"/>
    
    
    <category term="The One Day" scheme="https://www.stq555.com/tags/The-One-Day/"/>
    
  </entry>
  
</feed>
